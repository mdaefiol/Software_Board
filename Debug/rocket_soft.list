
rocket_soft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a078  0800a078  0001a078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000007c  0800a15c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800a15c  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012911  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a4  00000000  00000000  000329b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00035260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ef3  00000000  00000000  00037530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ad3  00000000  00000000  00050423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eae4  00000000  00000000  00064ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f39da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005358  00000000  00000000  000f3a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a05c 	.word	0x0800a05c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800a05c 	.word	0x0800a05c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_ldivmod>:
 8001070:	b97b      	cbnz	r3, 8001092 <__aeabi_ldivmod+0x22>
 8001072:	b972      	cbnz	r2, 8001092 <__aeabi_ldivmod+0x22>
 8001074:	2900      	cmp	r1, #0
 8001076:	bfbe      	ittt	lt
 8001078:	2000      	movlt	r0, #0
 800107a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800107e:	e006      	blt.n	800108e <__aeabi_ldivmod+0x1e>
 8001080:	bf08      	it	eq
 8001082:	2800      	cmpeq	r0, #0
 8001084:	bf1c      	itt	ne
 8001086:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800108a:	f04f 30ff 	movne.w	r0, #4294967295
 800108e:	f000 b9a9 	b.w	80013e4 <__aeabi_idiv0>
 8001092:	f1ad 0c08 	sub.w	ip, sp, #8
 8001096:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109a:	2900      	cmp	r1, #0
 800109c:	db09      	blt.n	80010b2 <__aeabi_ldivmod+0x42>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1a      	blt.n	80010d8 <__aeabi_ldivmod+0x68>
 80010a2:	f000 f835 	bl	8001110 <__udivmoddi4>
 80010a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db1b      	blt.n	80010f4 <__aeabi_ldivmod+0x84>
 80010bc:	f000 f828 	bl	8001110 <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d6:	4770      	bx	lr
 80010d8:	4252      	negs	r2, r2
 80010da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010de:	f000 f817 	bl	8001110 <__udivmoddi4>
 80010e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ea:	b004      	add	sp, #16
 80010ec:	4240      	negs	r0, r0
 80010ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f2:	4770      	bx	lr
 80010f4:	4252      	negs	r2, r2
 80010f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fa:	f000 f809 	bl	8001110 <__udivmoddi4>
 80010fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001106:	b004      	add	sp, #16
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	4770      	bx	lr

08001110 <__udivmoddi4>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	9e08      	ldr	r6, [sp, #32]
 8001116:	460d      	mov	r5, r1
 8001118:	4604      	mov	r4, r0
 800111a:	4688      	mov	r8, r1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <__udivmoddi4+0xac>
 8001120:	428a      	cmp	r2, r1
 8001122:	4694      	mov	ip, r2
 8001124:	d968      	bls.n	80011f8 <__udivmoddi4+0xe8>
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b152      	cbz	r2, 8001142 <__udivmoddi4+0x32>
 800112c:	fa01 f302 	lsl.w	r3, r1, r2
 8001130:	f1c2 0120 	rsb	r1, r2, #32
 8001134:	fa20 f101 	lsr.w	r1, r0, r1
 8001138:	fa0c fc02 	lsl.w	ip, ip, r2
 800113c:	ea41 0803 	orr.w	r8, r1, r3
 8001140:	4094      	lsls	r4, r2
 8001142:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001146:	fbb8 f7f1 	udiv	r7, r8, r1
 800114a:	fa1f fe8c 	uxth.w	lr, ip
 800114e:	fb01 8817 	mls	r8, r1, r7, r8
 8001152:	fb07 f00e 	mul.w	r0, r7, lr
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	d90a      	bls.n	8001176 <__udivmoddi4+0x66>
 8001160:	eb1c 0303 	adds.w	r3, ip, r3
 8001164:	f107 35ff 	add.w	r5, r7, #4294967295
 8001168:	f080 811e 	bcs.w	80013a8 <__udivmoddi4+0x298>
 800116c:	4298      	cmp	r0, r3
 800116e:	f240 811b 	bls.w	80013a8 <__udivmoddi4+0x298>
 8001172:	3f02      	subs	r7, #2
 8001174:	4463      	add	r3, ip
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	fbb3 f0f1 	udiv	r0, r3, r1
 800117c:	fb01 3310 	mls	r3, r1, r0, r3
 8001180:	fb00 fe0e 	mul.w	lr, r0, lr
 8001184:	b2a4      	uxth	r4, r4
 8001186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118a:	45a6      	cmp	lr, r4
 800118c:	d90a      	bls.n	80011a4 <__udivmoddi4+0x94>
 800118e:	eb1c 0404 	adds.w	r4, ip, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	f080 8109 	bcs.w	80013ac <__udivmoddi4+0x29c>
 800119a:	45a6      	cmp	lr, r4
 800119c:	f240 8106 	bls.w	80013ac <__udivmoddi4+0x29c>
 80011a0:	4464      	add	r4, ip
 80011a2:	3802      	subs	r0, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	eba4 040e 	sub.w	r4, r4, lr
 80011aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ae:	b11e      	cbz	r6, 80011b8 <__udivmoddi4+0xa8>
 80011b0:	2300      	movs	r3, #0
 80011b2:	40d4      	lsrs	r4, r2
 80011b4:	e9c6 4300 	strd	r4, r3, [r6]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	428b      	cmp	r3, r1
 80011be:	d908      	bls.n	80011d2 <__udivmoddi4+0xc2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	f000 80ee 	beq.w	80013a2 <__udivmoddi4+0x292>
 80011c6:	2100      	movs	r1, #0
 80011c8:	e9c6 0500 	strd	r0, r5, [r6]
 80011cc:	4608      	mov	r0, r1
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	fab3 f183 	clz	r1, r3
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d14a      	bne.n	8001270 <__udivmoddi4+0x160>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d302      	bcc.n	80011e4 <__udivmoddi4+0xd4>
 80011de:	4282      	cmp	r2, r0
 80011e0:	f200 80fc 	bhi.w	80013dc <__udivmoddi4+0x2cc>
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	4698      	mov	r8, r3
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d0e2      	beq.n	80011b8 <__udivmoddi4+0xa8>
 80011f2:	e9c6 4800 	strd	r4, r8, [r6]
 80011f6:	e7df      	b.n	80011b8 <__udivmoddi4+0xa8>
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xec>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 8091 	bne.w	8001328 <__udivmoddi4+0x218>
 8001206:	eba1 000c 	sub.w	r0, r1, ip
 800120a:	2101      	movs	r1, #1
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb0 f3f7 	udiv	r3, r0, r7
 8001218:	fb07 0013 	mls	r0, r7, r3, r0
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001222:	fb0e f003 	mul.w	r0, lr, r3
 8001226:	42a8      	cmp	r0, r5
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x12c>
 800122a:	eb1c 0505 	adds.w	r5, ip, r5
 800122e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x12a>
 8001234:	42a8      	cmp	r0, r5
 8001236:	f200 80ce 	bhi.w	80013d6 <__udivmoddi4+0x2c6>
 800123a:	4643      	mov	r3, r8
 800123c:	1a2d      	subs	r5, r5, r0
 800123e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001242:	fb07 5510 	mls	r5, r7, r0, r5
 8001246:	fb0e fe00 	mul.w	lr, lr, r0
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001250:	45a6      	cmp	lr, r4
 8001252:	d908      	bls.n	8001266 <__udivmoddi4+0x156>
 8001254:	eb1c 0404 	adds.w	r4, ip, r4
 8001258:	f100 35ff 	add.w	r5, r0, #4294967295
 800125c:	d202      	bcs.n	8001264 <__udivmoddi4+0x154>
 800125e:	45a6      	cmp	lr, r4
 8001260:	f200 80b6 	bhi.w	80013d0 <__udivmoddi4+0x2c0>
 8001264:	4628      	mov	r0, r5
 8001266:	eba4 040e 	sub.w	r4, r4, lr
 800126a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800126e:	e79e      	b.n	80011ae <__udivmoddi4+0x9e>
 8001270:	f1c1 0720 	rsb	r7, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 fc07 	lsr.w	ip, r2, r7
 800127a:	ea4c 0c03 	orr.w	ip, ip, r3
 800127e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001282:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001286:	fbba f8f9 	udiv	r8, sl, r9
 800128a:	fa20 f307 	lsr.w	r3, r0, r7
 800128e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001292:	408d      	lsls	r5, r1
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	431d      	orrs	r5, r3
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	fb08 f00e 	mul.w	r0, r8, lr
 80012a2:	0c2c      	lsrs	r4, r5, #16
 80012a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90b      	bls.n	80012c8 <__udivmoddi4+0x1b8>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80012b8:	f080 8088 	bcs.w	80013cc <__udivmoddi4+0x2bc>
 80012bc:	42a0      	cmp	r0, r4
 80012be:	f240 8085 	bls.w	80013cc <__udivmoddi4+0x2bc>
 80012c2:	f1a8 0802 	sub.w	r8, r8, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	1a24      	subs	r4, r4, r0
 80012ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ce:	fb09 4410 	mls	r4, r9, r0, r4
 80012d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d6:	b2ad      	uxth	r5, r5
 80012d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012dc:	45a6      	cmp	lr, r4
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x1e2>
 80012e0:	eb1c 0404 	adds.w	r4, ip, r4
 80012e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e8:	d26c      	bcs.n	80013c4 <__udivmoddi4+0x2b4>
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d96a      	bls.n	80013c4 <__udivmoddi4+0x2b4>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012f6:	fba0 9502 	umull	r9, r5, r0, r2
 80012fa:	eba4 040e 	sub.w	r4, r4, lr
 80012fe:	42ac      	cmp	r4, r5
 8001300:	46c8      	mov	r8, r9
 8001302:	46ae      	mov	lr, r5
 8001304:	d356      	bcc.n	80013b4 <__udivmoddi4+0x2a4>
 8001306:	d053      	beq.n	80013b0 <__udivmoddi4+0x2a0>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d069      	beq.n	80013e0 <__udivmoddi4+0x2d0>
 800130c:	ebb3 0208 	subs.w	r2, r3, r8
 8001310:	eb64 040e 	sbc.w	r4, r4, lr
 8001314:	fa22 f301 	lsr.w	r3, r2, r1
 8001318:	fa04 f707 	lsl.w	r7, r4, r7
 800131c:	431f      	orrs	r7, r3
 800131e:	40cc      	lsrs	r4, r1
 8001320:	e9c6 7400 	strd	r7, r4, [r6]
 8001324:	2100      	movs	r1, #0
 8001326:	e747      	b.n	80011b8 <__udivmoddi4+0xa8>
 8001328:	fa0c fc02 	lsl.w	ip, ip, r2
 800132c:	f1c2 0120 	rsb	r1, r2, #32
 8001330:	fa25 f301 	lsr.w	r3, r5, r1
 8001334:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001338:	fa20 f101 	lsr.w	r1, r0, r1
 800133c:	4095      	lsls	r5, r2
 800133e:	430d      	orrs	r5, r1
 8001340:	fbb3 f1f7 	udiv	r1, r3, r7
 8001344:	fb07 3311 	mls	r3, r7, r1, r3
 8001348:	fa1f fe8c 	uxth.w	lr, ip
 800134c:	0c28      	lsrs	r0, r5, #16
 800134e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001352:	fb01 f30e 	mul.w	r3, r1, lr
 8001356:	4283      	cmp	r3, r0
 8001358:	fa04 f402 	lsl.w	r4, r4, r2
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x260>
 800135e:	eb1c 0000 	adds.w	r0, ip, r0
 8001362:	f101 38ff 	add.w	r8, r1, #4294967295
 8001366:	d22f      	bcs.n	80013c8 <__udivmoddi4+0x2b8>
 8001368:	4283      	cmp	r3, r0
 800136a:	d92d      	bls.n	80013c8 <__udivmoddi4+0x2b8>
 800136c:	3902      	subs	r1, #2
 800136e:	4460      	add	r0, ip
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	fbb0 f3f7 	udiv	r3, r0, r7
 8001376:	fb07 0013 	mls	r0, r7, r3, r0
 800137a:	b2ad      	uxth	r5, r5
 800137c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001380:	fb03 f00e 	mul.w	r0, r3, lr
 8001384:	42a8      	cmp	r0, r5
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x28a>
 8001388:	eb1c 0505 	adds.w	r5, ip, r5
 800138c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001390:	d216      	bcs.n	80013c0 <__udivmoddi4+0x2b0>
 8001392:	42a8      	cmp	r0, r5
 8001394:	d914      	bls.n	80013c0 <__udivmoddi4+0x2b0>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	1a28      	subs	r0, r5, r0
 800139c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013a0:	e738      	b.n	8001214 <__udivmoddi4+0x104>
 80013a2:	4631      	mov	r1, r6
 80013a4:	4630      	mov	r0, r6
 80013a6:	e707      	b.n	80011b8 <__udivmoddi4+0xa8>
 80013a8:	462f      	mov	r7, r5
 80013aa:	e6e4      	b.n	8001176 <__udivmoddi4+0x66>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6f9      	b.n	80011a4 <__udivmoddi4+0x94>
 80013b0:	454b      	cmp	r3, r9
 80013b2:	d2a9      	bcs.n	8001308 <__udivmoddi4+0x1f8>
 80013b4:	ebb9 0802 	subs.w	r8, r9, r2
 80013b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013bc:	3801      	subs	r0, #1
 80013be:	e7a3      	b.n	8001308 <__udivmoddi4+0x1f8>
 80013c0:	4643      	mov	r3, r8
 80013c2:	e7ea      	b.n	800139a <__udivmoddi4+0x28a>
 80013c4:	4628      	mov	r0, r5
 80013c6:	e794      	b.n	80012f2 <__udivmoddi4+0x1e2>
 80013c8:	4641      	mov	r1, r8
 80013ca:	e7d1      	b.n	8001370 <__udivmoddi4+0x260>
 80013cc:	46d0      	mov	r8, sl
 80013ce:	e77b      	b.n	80012c8 <__udivmoddi4+0x1b8>
 80013d0:	4464      	add	r4, ip
 80013d2:	3802      	subs	r0, #2
 80013d4:	e747      	b.n	8001266 <__udivmoddi4+0x156>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	4465      	add	r5, ip
 80013da:	e72f      	b.n	800123c <__udivmoddi4+0x12c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e706      	b.n	80011ee <__udivmoddi4+0xde>
 80013e0:	4631      	mov	r1, r6
 80013e2:	e6e9      	b.n	80011b8 <__udivmoddi4+0xa8>

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <HAL_TIM_PeriodElapsedCallback>:
uint8_t press_receiv = 0;
int MPU_Count = 0;


// INTERRUPÇAO CONFIGURADA PARA 5 m/s (200Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim4.Instance){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d11d      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
    		MPU_Count = 0;
    		data_bar = 0x01;
		*/

			// Recebe dados pela SERIAL para SOFTWARE IN THE LOOP
			if (data_received_count == 0) {
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x2e>
				HAL_UART_Transmit_IT(&huart2, rx_byte, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800140a:	f007 f9b4 	bl	8008776 <HAL_UART_Transmit_IT>
				data_received_count = 1;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
				data_UART = 0x01;
				data_received_count++;
    	}
	}
}
 8001414:	e010      	b.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
			else if (data_received_count != 0){
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
				HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
 800141e:	2210      	movs	r2, #16
 8001420:	490b      	ldr	r1, [pc, #44]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001424:	f007 f9eb 	bl	80087fe <HAL_UART_Receive_IT>
				data_UART = 0x01;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
				data_received_count++;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000314 	.word	0x20000314
 8001444:	200000c8 	.word	0x200000c8
 8001448:	20000000 	.word	0x20000000
 800144c:	2000035c 	.word	0x2000035c
 8001450:	200000d8 	.word	0x200000d8
 8001454:	200000cc 	.word	0x200000cc

08001458 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b74      	ldr	r3, [pc, #464]	; (8001638 <HAL_I2C_MemRxCpltCallback+0x1e0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d141      	bne.n	80014f0 <HAL_I2C_MemRxCpltCallback+0x98>
    		acc_data.Ax = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b71      	ldr	r3, [pc, #452]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001480:	801a      	strh	r2, [r3, #0]
    		acc_data.Ay = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001482:	4b6e      	ldr	r3, [pc, #440]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b6c      	ldr	r3, [pc, #432]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001496:	805a      	strh	r2, [r3, #2]
    		acc_data.Az = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014a2:	795b      	ldrb	r3, [r3, #5]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 80014ac:	809a      	strh	r2, [r3, #4]
    		gy_data.Gx = (int16_t)(rec_data[8] << 8  | rec_data[9]);
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014b0:	7a1b      	ldrb	r3, [r3, #8]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014b8:	7a5b      	ldrb	r3, [r3, #9]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21a      	sxth	r2, r3
 80014c0:	4b60      	ldr	r3, [pc, #384]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014c2:	801a      	strh	r2, [r3, #0]
    		gy_data.Gy = (int16_t)(rec_data[10] << 8 | rec_data[11]);
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014c6:	7a9b      	ldrb	r3, [r3, #10]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014ce:	7adb      	ldrb	r3, [r3, #11]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014d8:	805a      	strh	r2, [r3, #2]
    		gy_data.Gz = (int16_t)(rec_data[12] << 8 | rec_data[13]);
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014e4:	7b5b      	ldrb	r3, [r3, #13]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b55      	ldr	r3, [pc, #340]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014ee:	809a      	strh	r2, [r3, #4]
    		/* To debug
    		transf_MPU6050_1();
    		*/
    }

    if (hi2c->Instance == hi2c2.Instance) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8098 	bne.w	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    	if(data_accel == 0x01){
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d141      	bne.n	800158a <HAL_I2C_MemRxCpltCallback+0x132>
    		acc_data.Ax2 = (int16_t)(rec_data2[0] << 8 | rec_data2[1]);
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 800151a:	80da      	strh	r2, [r3, #6]
    		acc_data.Ay2 = (int16_t)(rec_data2[2] << 8 | rec_data2[3]);
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001530:	811a      	strh	r2, [r3, #8]
    		acc_data.Az2 = (int16_t)(rec_data2[4] << 8 | rec_data2[5]);
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800153c:	795b      	ldrb	r3, [r3, #5]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001546:	815a      	strh	r2, [r3, #10]
    		gy_data.Gx2 = (int16_t)(rec_data2[8] << 8  | rec_data2[9]);
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800154a:	7a1b      	ldrb	r3, [r3, #8]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001552:	7a5b      	ldrb	r3, [r3, #9]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 800155c:	80da      	strh	r2, [r3, #6]
    		gy_data.Gy2 = (int16_t)(rec_data2[10] << 8 | rec_data2[11]);
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001560:	7a9b      	ldrb	r3, [r3, #10]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001568:	7adb      	ldrb	r3, [r3, #11]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 8001572:	811a      	strh	r2, [r3, #8]
    		gy_data.Gz2 = (int16_t)(rec_data2[12] << 8 | rec_data2[13]);
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800157e:	7b5b      	ldrb	r3, [r3, #13]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 8001588:	815a      	strh	r2, [r3, #10]
    		/* To debug
    		 transf_MPU6050_2();
    		*/
    	}
    	if(data_bar == 0x01){
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d14d      	bne.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    		pRaw = (Data[0]<<12)|(Data[1]<<4)|(Data[2]>>4);
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	031a      	lsls	r2, r3, #12
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4313      	orrs	r3, r2
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015a2:	7892      	ldrb	r2, [r2, #2]
 80015a4:	0912      	lsrs	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	4313      	orrs	r3, r2
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 80015ac:	6013      	str	r3, [r2, #0]
    		tRaw = (Data[3]<<12)|(Data[4]<<4)|(Data[5]>>4);
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015b0:	78db      	ldrb	r3, [r3, #3]
 80015b2:	031a      	lsls	r2, r3, #12
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015be:	7952      	ldrb	r2, [r2, #5]
 80015c0:	0912      	lsrs	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	4313      	orrs	r3, r2
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015c8:	6013      	str	r3, [r2, #0]

    		data_bar = 0x00;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

    		if (data_bar == 0x00){
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d123      	bne.n	8001620 <HAL_I2C_MemRxCpltCallback+0x1c8>
    			if (tRaw != 0x800000){
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015e0:	d008      	beq.n	80015f4 <HAL_I2C_MemRxCpltCallback+0x19c>
    				bmp_data.temperature = (bmp280_compensate_T_int32(tRaw));  // x/100.0 temp
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fb2a 	bl	8001c40 <bmp280_compensate_T_int32>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 80015f0:	6053      	str	r3, [r2, #4]
 80015f2:	e002      	b.n	80015fa <HAL_I2C_MemRxCpltCallback+0x1a2>
    			}
    			else{
    				bmp_data.temperature = 0; // value in case temp measurement was disabled
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
    			}
    			if (pRaw != 0x800000){
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001602:	d009      	beq.n	8001618 <HAL_I2C_MemRxCpltCallback+0x1c0>
    				// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
    				// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
    				bmp_data.pressure = (bmp280_compensate_P_int32(pRaw));
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fb59 	bl	8001cc0 <bmp280_compensate_P_int32>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001614:	601a      	str	r2, [r3, #0]
    	/* To debug
    	transf_BMP280();
    	*/
    }
  }
}
 8001616:	e00a      	b.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    				bmp_data.pressure = 0; // value in case temp measurement was disabled
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	e006      	b.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    			bmp_data.temperature = bmp_data.pressure = 0;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 800162c:	6053      	str	r3, [r2, #4]
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000214 	.word	0x20000214
 800163c:	200000a8 	.word	0x200000a8
 8001640:	20000100 	.word	0x20000100
 8001644:	2000010c 	.word	0x2000010c
 8001648:	20000268 	.word	0x20000268
 800164c:	2000009e 	.word	0x2000009e
 8001650:	200000b8 	.word	0x200000b8
 8001654:	2000009f 	.word	0x2000009f
 8001658:	20000098 	.word	0x20000098
 800165c:	200000a4 	.word	0x200000a4
 8001660:	200000a0 	.word	0x200000a0
 8001664:	20000118 	.word	0x20000118

08001668 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	0000      	movs	r0, r0
 800167c:	0000      	movs	r0, r0
	...

08001680 <HAL_UART_RxCpltCallback>:

// SOFTWARE IN THE LOOP
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_UART_RxCpltCallback+0x160>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8099 	bne.w	80017c8 <HAL_UART_RxCpltCallback+0x148>
		if(data_UART == 0x01) {
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_UART_RxCpltCallback+0x164>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	f040 8091 	bne.w	80017c2 <HAL_UART_RxCpltCallback+0x142>
			data_hex = (rx_buffer[0] << 24) | (rx_buffer[1] << 16) | (rx_buffer[2] << 8) | rx_buffer[3];
 80016a0:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016b8:	78d2      	ldrb	r2, [r2, #3]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016c0:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016c8:	6013      	str	r3, [r2, #0]
			simulated_data.accel_x = data_float;
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 80016d0:	6013      	str	r3, [r2, #0]

			data_hex = (rx_buffer[4] << 24) | (rx_buffer[5] << 16) | (rx_buffer[6] << 8) | rx_buffer[7];
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	061a      	lsls	r2, r3, #24
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016da:	795b      	ldrb	r3, [r3, #5]
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	4313      	orrs	r3, r2
 80016e8:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016ea:	79d2      	ldrb	r2, [r2, #7]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016f2:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016fa:	6013      	str	r3, [r2, #0]
			simulated_data.accel_y = data_float;
 80016fc:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001702:	6053      	str	r3, [r2, #4]

			data_hex = (rx_buffer[8] << 24) | (rx_buffer[9] << 16) | (rx_buffer[10] << 8) | rx_buffer[11];
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001706:	7a1b      	ldrb	r3, [r3, #8]
 8001708:	061a      	lsls	r2, r3, #24
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	431a      	orrs	r2, r3
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001714:	7a9b      	ldrb	r3, [r3, #10]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4313      	orrs	r3, r2
 800171a:	4a33      	ldr	r2, [pc, #204]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800171c:	7ad2      	ldrb	r2, [r2, #11]
 800171e:	4313      	orrs	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001724:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 800172c:	6013      	str	r3, [r2, #0]
			simulated_data.accel_z = data_float;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001734:	6093      	str	r3, [r2, #8]

			data_hex = (rx_buffer[12] << 24) | (rx_buffer[13] << 16) | (rx_buffer[14] << 8) | rx_buffer[15];
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001738:	7b1b      	ldrb	r3, [r3, #12]
 800173a:	061a      	lsls	r2, r3, #24
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800173e:	7b5b      	ldrb	r3, [r3, #13]
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001746:	7b9b      	ldrb	r3, [r3, #14]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	4313      	orrs	r3, r2
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800174e:	7bd2      	ldrb	r2, [r2, #15]
 8001750:	4313      	orrs	r3, r2
 8001752:	461a      	mov	r2, r3
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001756:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 800175e:	6013      	str	r3, [r2, #0]
			simulated_data.pressao = data_float;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001766:	60d3      	str	r3, [r2, #12]

			simulated_data.altitude = 44330.0*(1.0 - pow((simulated_data.pressao/101325), 0.1903));
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_UART_RxCpltCallback+0x178>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb6c 	bl	8000e4c <__aeabi_fdiv>
 8001774:	4603      	mov	r3, r0
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe4e 	bl	8000418 <__aeabi_f2d>
 800177c:	a314      	add	r3, pc, #80	; (adr r3, 80017d0 <HAL_UART_RxCpltCallback+0x150>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f007 fd87 	bl	8009294 <pow>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	491b      	ldr	r1, [pc, #108]	; (80017fc <HAL_UART_RxCpltCallback+0x17c>)
 8001790:	f7fe fce2 	bl	8000158 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	a30e      	add	r3, pc, #56	; (adr r3, 80017d8 <HAL_UART_RxCpltCallback+0x158>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fe91 	bl	80004c8 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f93b 	bl	8000a28 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 80017b6:	6113      	str	r3, [r2, #16]
			calculate_EMA();
 80017b8:	f001 fb72 	bl	8002ea0 <calculate_EMA>
			press_receiv = 1;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_UART_RxCpltCallback+0x180>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
		}
		data_UART = 0x00;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_UART_RxCpltCallback+0x164>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	1a36e2eb 	.word	0x1a36e2eb
 80017d4:	3fc85bc0 	.word	0x3fc85bc0
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40e5a540 	.word	0x40e5a540
 80017e0:	2000035c 	.word	0x2000035c
 80017e4:	200000cc 	.word	0x200000cc
 80017e8:	200000d8 	.word	0x200000d8
 80017ec:	200000d0 	.word	0x200000d0
 80017f0:	200000d4 	.word	0x200000d4
 80017f4:	200000e8 	.word	0x200000e8
 80017f8:	47c5e680 	.word	0x47c5e680
 80017fc:	3ff00000 	.word	0x3ff00000
 8001800:	200000fc 	.word	0x200000fc

08001804 <MPU6050_Config>:
extern I2C_HandleTypeDef hi2c2;

AccelData acc_data;
GyroData gy_data;

void MPU6050_Config(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af04      	add	r7, sp, #16

    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);	// WHO_AM_I ~ 6050
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	2275      	movs	r2, #117	; 0x75
 800181c:	21d0      	movs	r1, #208	; 0xd0
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <MPU6050_Config+0xa8>)
 8001820:	f002 fce8 	bl	80041f4 <HAL_I2C_Mem_Read>

    if (check == 104){
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b68      	cmp	r3, #104	; 0x68
 8001828:	d13b      	bne.n	80018a2 <MPU6050_Config+0x9e>
    	// dispositivo está presente
        data = 0; 	 	 // registro de gerenciamento de energia 0x6B devemos escrever todos os 0s para ativar o sensor
 800182a:	2300      	movs	r3, #0
 800182c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	1dbb      	adds	r3, r7, #6
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	226b      	movs	r2, #107	; 0x6b
 8001840:	21d0      	movs	r1, #208	; 0xd0
 8001842:	481a      	ldr	r0, [pc, #104]	; (80018ac <MPU6050_Config+0xa8>)
 8001844:	f002 fbdc 	bl	8004000 <HAL_I2C_Mem_Write>

        data = 0x07;	 // define DATA RATE de 1KHz escrevendo no registrador SMPLRT_DIV
 8001848:	2307      	movs	r3, #7
 800184a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2301      	movs	r3, #1
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	2219      	movs	r2, #25
 800185e:	21d0      	movs	r1, #208	; 0xd0
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <MPU6050_Config+0xa8>)
 8001862:	f002 fbcd 	bl	8004000 <HAL_I2C_Mem_Write>

        data = 0x00;	 // define a configuração do acelerômetro e giroscópio em ACCEL_CONFIG e GYRO_CONFIG
 8001866:	2300      	movs	r3, #0
 8001868:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2301      	movs	r3, #1
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	2219      	movs	r2, #25
 800187c:	21d0      	movs	r1, #208	; 0xd0
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <MPU6050_Config+0xa8>)
 8001880:	f002 fbbe 	bl	8004000 <HAL_I2C_Mem_Write>

        data = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2301      	movs	r3, #1
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	1dbb      	adds	r3, r7, #6
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	221b      	movs	r2, #27
 800189a:	21d0      	movs	r1, #208	; 0xd0
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <MPU6050_Config+0xa8>)
 800189e:	f002 fbaf 	bl	8004000 <HAL_I2C_Mem_Write>
    }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000214 	.word	0x20000214

080018b0 <MPU6050_2_Config>:

void MPU6050_2_Config(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af04      	add	r7, sp, #16

	uint8_t check2;
	uint8_t data2;

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check2, 1, 1000); 	// WHO_AM_I ~ 6050
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2301      	movs	r3, #1
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	1dfb      	adds	r3, r7, #7
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	2275      	movs	r2, #117	; 0x75
 80018c8:	21d0      	movs	r1, #208	; 0xd0
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <MPU6050_2_Config+0xa8>)
 80018cc:	f002 fc92 	bl	80041f4 <HAL_I2C_Mem_Read>

	if (check2 == 104){
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b68      	cmp	r3, #104	; 0x68
 80018d4:	d13b      	bne.n	800194e <MPU6050_2_Config+0x9e>
		// dispositivo está presente
		data2 = 0;		 // registro de gerenciamento de energia 0x6B devemos escrever todos os 0s para ativar o sensor
 80018d6:	2300      	movs	r3, #0
 80018d8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data2, 1, 1000);
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	1dbb      	adds	r3, r7, #6
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	226b      	movs	r2, #107	; 0x6b
 80018ec:	21d0      	movs	r1, #208	; 0xd0
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <MPU6050_2_Config+0xa8>)
 80018f0:	f002 fb86 	bl	8004000 <HAL_I2C_Mem_Write>

		data2 = 0x07;	 // define DATA RATE de 1KHz escrevendo no registrador SMPLRT_DIV
 80018f4:	2307      	movs	r3, #7
 80018f6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data2, 1, 1000);
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2301      	movs	r3, #1
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2219      	movs	r2, #25
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	4812      	ldr	r0, [pc, #72]	; (8001958 <MPU6050_2_Config+0xa8>)
 800190e:	f002 fb77 	bl	8004000 <HAL_I2C_Mem_Write>

		data2 = 0x00;    // define a configuração do acelerômetro e giroscópio em ACCEL_CONFIG e GYRO_CONFIG
 8001912:	2300      	movs	r3, #0
 8001914:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data2, 1, 1000);
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	2219      	movs	r2, #25
 8001928:	21d0      	movs	r1, #208	; 0xd0
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <MPU6050_2_Config+0xa8>)
 800192c:	f002 fb68 	bl	8004000 <HAL_I2C_Mem_Write>

		data2 = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data2, 1, 1000);
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	2301      	movs	r3, #1
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	221b      	movs	r2, #27
 8001946:	21d0      	movs	r1, #208	; 0xd0
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MPU6050_2_Config+0xa8>)
 800194a:	f002 fb59 	bl	8004000 <HAL_I2C_Mem_Write>
	}
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000268 	.word	0x20000268

0800195c <dataRead>:
uint8_t chipID;
float pressureSeaLevel = 101325;

// Leitura de corte, dados armazenados na memória do sensor e utilizados para calculos de novos valores.
void dataRead(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af04      	add	r7, sp, #16
	// Lê NVM de 0x88 a 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, 0x88, 1, trimdata, 24, 1000);
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2318      	movs	r3, #24
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <dataRead+0x134>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	2288      	movs	r2, #136	; 0x88
 8001974:	21ec      	movs	r1, #236	; 0xec
 8001976:	4847      	ldr	r0, [pc, #284]	; (8001a94 <dataRead+0x138>)
 8001978:	f002 fc3c 	bl	80041f4 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1] << 8) | trimdata[0];
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <dataRead+0x134>)
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21a      	sxth	r2, r3
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <dataRead+0x134>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b21b      	sxth	r3, r3
 800198a:	4313      	orrs	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <dataRead+0x13c>)
 8001992:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3] << 8) | trimdata[2];
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <dataRead+0x134>)
 8001996:	78db      	ldrb	r3, [r3, #3]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <dataRead+0x134>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <dataRead+0x140>)
 80019a8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5] << 8) | trimdata[4];
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <dataRead+0x134>)
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <dataRead+0x134>)
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <dataRead+0x144>)
 80019be:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7] << 8) | trimdata[5];
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <dataRead+0x134>)
 80019c2:	79db      	ldrb	r3, [r3, #7]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <dataRead+0x134>)
 80019ca:	795b      	ldrb	r3, [r3, #5]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <dataRead+0x148>)
 80019d6:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9] << 8) | trimdata[6];
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <dataRead+0x134>)
 80019da:	7a5b      	ldrb	r3, [r3, #9]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21a      	sxth	r2, r3
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <dataRead+0x134>)
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <dataRead+0x14c>)
 80019ec:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11] << 8) | trimdata[10];
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <dataRead+0x134>)
 80019f0:	7adb      	ldrb	r3, [r3, #11]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <dataRead+0x134>)
 80019f8:	7a9b      	ldrb	r3, [r3, #10]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <dataRead+0x150>)
 8001a02:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13] << 8) | trimdata[12];
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <dataRead+0x134>)
 8001a06:	7b5b      	ldrb	r3, [r3, #13]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <dataRead+0x134>)
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <dataRead+0x154>)
 8001a18:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15] << 8) | trimdata[14];
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <dataRead+0x134>)
 8001a1c:	7bdb      	ldrb	r3, [r3, #15]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <dataRead+0x134>)
 8001a24:	7b9b      	ldrb	r3, [r3, #14]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <dataRead+0x158>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17] << 8) | trimdata[16];
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <dataRead+0x134>)
 8001a32:	7c5b      	ldrb	r3, [r3, #17]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <dataRead+0x134>)
 8001a3a:	7c1b      	ldrb	r3, [r3, #16]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <dataRead+0x15c>)
 8001a44:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19] << 8) | trimdata[18];
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <dataRead+0x134>)
 8001a48:	7cdb      	ldrb	r3, [r3, #19]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <dataRead+0x134>)
 8001a50:	7c9b      	ldrb	r3, [r3, #18]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <dataRead+0x160>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21] << 8) | trimdata[20];
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <dataRead+0x134>)
 8001a5e:	7d5b      	ldrb	r3, [r3, #21]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <dataRead+0x134>)
 8001a66:	7d1b      	ldrb	r3, [r3, #20]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <dataRead+0x164>)
 8001a70:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23] << 8) | trimdata[22];
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <dataRead+0x134>)
 8001a74:	7ddb      	ldrb	r3, [r3, #23]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <dataRead+0x134>)
 8001a7c:	7d9b      	ldrb	r3, [r3, #22]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <dataRead+0x168>)
 8001a86:	801a      	strh	r2, [r3, #0]

}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000128 	.word	0x20000128
 8001a94:	20000268 	.word	0x20000268
 8001a98:	20000140 	.word	0x20000140
 8001a9c:	20000144 	.word	0x20000144
 8001aa0:	20000146 	.word	0x20000146
 8001aa4:	20000142 	.word	0x20000142
 8001aa8:	20000148 	.word	0x20000148
 8001aac:	2000014a 	.word	0x2000014a
 8001ab0:	2000014c 	.word	0x2000014c
 8001ab4:	2000014e 	.word	0x2000014e
 8001ab8:	20000150 	.word	0x20000150
 8001abc:	20000152 	.word	0x20000152
 8001ac0:	20000154 	.word	0x20000154
 8001ac4:	20000156 	.word	0x20000156

08001ac8 <BMP280_Config>:

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	4603      	mov	r3, r0
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	717b      	strb	r3, [r7, #5]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, ID_REG, 1, &chipID, 1, 1000);
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <BMP280_Config+0x170>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	22d0      	movs	r2, #208	; 0xd0
 8001af8:	21ec      	movs	r1, #236	; 0xec
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <BMP280_Config+0x174>)
 8001afc:	f002 fb7a 	bl	80041f4 <HAL_I2C_Mem_Read>

	if (chipID == 0x58) {
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <BMP280_Config+0x170>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b58      	cmp	r3, #88	; 0x58
 8001b06:	f040 8092 	bne.w	8001c2e <BMP280_Config+0x166>
		// Lê os parâmetros do Trimming
		dataRead();
 8001b0a:	f7ff ff27 	bl	800195c <dataRead>

		uint8_t datatowrite = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
		uint8_t datacheck = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73bb      	strb	r3, [r7, #14]

		// Reinicializa o dispositivo
		datatowrite = 0xB6;  // reinicia a sequência
 8001b16:	23b6      	movs	r3, #182	; 0xb6
 8001b18:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	f107 030f 	add.w	r3, r7, #15
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	22e0      	movs	r2, #224	; 0xe0
 8001b2e:	21ec      	movs	r1, #236	; 0xec
 8001b30:	4842      	ldr	r0, [pc, #264]	; (8001c3c <BMP280_Config+0x174>)
 8001b32:	f002 fa65 	bl	8004000 <HAL_I2C_Mem_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <BMP280_Config+0x7a>
		{
			return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	e075      	b.n	8001c2e <BMP280_Config+0x166>
		}

		HAL_Delay (100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f001 fd76 	bl	8003634 <HAL_Delay>

		// grava o tempo de espera e o coeff do filtro IIR em 0xF5
		datatowrite = (t_sb <<5) |(filter << 2);
 8001b48:	793b      	ldrb	r3, [r7, #4]
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 030f 	add.w	r3, r7, #15
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	22f5      	movs	r2, #245	; 0xf5
 8001b72:	21ec      	movs	r1, #236	; 0xec
 8001b74:	4831      	ldr	r0, [pc, #196]	; (8001c3c <BMP280_Config+0x174>)
 8001b76:	f002 fa43 	bl	8004000 <HAL_I2C_Mem_Write>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <BMP280_Config+0xbe>
		{
			return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	e053      	b.n	8001c2e <BMP280_Config+0x166>
		}
		HAL_Delay (100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f001 fd54 	bl	8003634 <HAL_Delay>
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030e 	add.w	r3, r7, #14
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	22f5      	movs	r2, #245	; 0xf5
 8001ba0:	21ec      	movs	r1, #236	; 0xec
 8001ba2:	4826      	ldr	r0, [pc, #152]	; (8001c3c <BMP280_Config+0x174>)
 8001ba4:	f002 fb26 	bl	80041f4 <HAL_I2C_Mem_Read>
		if (datacheck != datatowrite)
 8001ba8:	7bba      	ldrb	r2, [r7, #14]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d002      	beq.n	8001bb6 <BMP280_Config+0xee>
		{
			return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e03b      	b.n	8001c2e <BMP280_Config+0x166>
		}

		// grava a sobreamostragem de pressão e temperatura junto com o modo para 0xF4
		datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f107 030f 	add.w	r3, r7, #15
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	22f4      	movs	r2, #244	; 0xf4
 8001be6:	21ec      	movs	r1, #236	; 0xec
 8001be8:	4814      	ldr	r0, [pc, #80]	; (8001c3c <BMP280_Config+0x174>)
 8001bea:	f002 fa09 	bl	8004000 <HAL_I2C_Mem_Write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <BMP280_Config+0x132>
		{
			return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	e019      	b.n	8001c2e <BMP280_Config+0x166>
		}
		HAL_Delay (100);
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	f001 fd1a 	bl	8003634 <HAL_Delay>
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f107 030e 	add.w	r3, r7, #14
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	22f4      	movs	r2, #244	; 0xf4
 8001c14:	21ec      	movs	r1, #236	; 0xec
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <BMP280_Config+0x174>)
 8001c18:	f002 faec 	bl	80041f4 <HAL_I2C_Mem_Read>
		if (datacheck != datatowrite)
 8001c1c:	7bba      	ldrb	r2, [r7, #14]
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d002      	beq.n	8001c2a <BMP280_Config+0x162>
		{
			return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
 8001c28:	e001      	b.n	8001c2e <BMP280_Config+0x166>
		}

		return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e7ff      	b.n	8001c2e <BMP280_Config+0x166>
	}
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000158 	.word	0x20000158
 8001c3c:	20000268 	.word	0x20000268

08001c40 <bmp280_compensate_T_int32>:

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2)) >> 11;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	10da      	asrs	r2, r3, #3
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <bmp280_compensate_T_int32+0x74>)
 8001c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	12db      	asrs	r3, r3, #11
 8001c60:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3)) >> 14;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	111b      	asrs	r3, r3, #4
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	1112      	asrs	r2, r2, #4
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c72:	8809      	ldrh	r1, [r1, #0]
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	131b      	asrs	r3, r3, #12
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <bmp280_compensate_T_int32+0x78>)
 8001c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	139b      	asrs	r3, r3, #14
 8001c88:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <bmp280_compensate_T_int32+0x7c>)
 8001c92:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <bmp280_compensate_T_int32+0x7c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3380      	adds	r3, #128	; 0x80
 8001ca0:	121b      	asrs	r3, r3, #8
 8001ca2:	60fb      	str	r3, [r7, #12]
	return T;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000140 	.word	0x20000140
 8001cb4:	20000144 	.word	0x20000144
 8001cb8:	20000146 	.word	0x20000146
 8001cbc:	20000124 	.word	0x20000124

08001cc0 <bmp280_compensate_P_int32>:

uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b0ca      	sub	sp, #296	; 0x128
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = (((int64_t)t_fine) - 128000);
 8001ccc:	4bae      	ldr	r3, [pc, #696]	; (8001f88 <bmp280_compensate_P_int32+0x2c8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	17da      	asrs	r2, r3, #31
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001cda:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001cde:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001ce2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cea:	fb03 f102 	mul.w	r1, r3, r2
 8001cee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001cf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	18ca      	adds	r2, r1, r3
 8001cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d00:	fba3 8903 	umull	r8, r9, r3, r3
 8001d04:	eb02 0309 	add.w	r3, r2, r9
 8001d08:	4699      	mov	r9, r3
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <bmp280_compensate_P_int32+0x2cc>)
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	17da      	asrs	r2, r3, #31
 8001d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d1c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d20:	4603      	mov	r3, r0
 8001d22:	fb03 f209 	mul.w	r2, r3, r9
 8001d26:	460b      	mov	r3, r1
 8001d28:	fb08 f303 	mul.w	r3, r8, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4602      	mov	r2, r0
 8001d30:	fba8 2102 	umull	r2, r1, r8, r2
 8001d34:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001d38:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001d3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d40:	4413      	add	r3, r2
 8001d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d46:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001d4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001d4e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 +((var1*(int64_t)dig_P5)<<17);
 8001d52:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <bmp280_compensate_P_int32+0x2d0>)
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	17da      	asrs	r2, r3, #31
 8001d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d60:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d68:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	fb02 f203 	mul.w	r2, r2, r3
 8001d72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	441a      	add	r2, r3
 8001d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d82:	4621      	mov	r1, r4
 8001d84:	fba3 3101 	umull	r3, r1, r3, r1
 8001d88:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001da6:	462b      	mov	r3, r5
 8001da8:	0459      	lsls	r1, r3, #17
 8001daa:	4622      	mov	r2, r4
 8001dac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001db0:	4623      	mov	r3, r4
 8001db2:	0458      	lsls	r0, r3, #17
 8001db4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001db8:	1814      	adds	r4, r2, r0
 8001dba:	643c      	str	r4, [r7, #64]	; 0x40
 8001dbc:	414b      	adcs	r3, r1
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001dc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <bmp280_compensate_P_int32+0x2d4>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	17da      	asrs	r2, r3, #31
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	2000      	movs	r0, #0
 8001dea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001dee:	1814      	adds	r4, r2, r0
 8001df0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001df2:	414b      	adcs	r3, r1
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001dfa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001dfe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e06:	fb03 f102 	mul.w	r1, r3, r2
 8001e0a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	18ca      	adds	r2, r1, r3
 8001e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e1c:	fba3 3103 	umull	r3, r1, r3, r3
 8001e20:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <bmp280_compensate_P_int32+0x2d8>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	17da      	asrs	r2, r3, #31
 8001e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e44:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001e48:	4622      	mov	r2, r4
 8001e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e4e:	4641      	mov	r1, r8
 8001e50:	fb01 f202 	mul.w	r2, r1, r2
 8001e54:	464d      	mov	r5, r9
 8001e56:	4618      	mov	r0, r3
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	fb03 f305 	mul.w	r3, r3, r5
 8001e60:	4413      	add	r3, r2
 8001e62:	4602      	mov	r2, r0
 8001e64:	4641      	mov	r1, r8
 8001e66:	fba2 2101 	umull	r2, r1, r2, r1
 8001e6a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001e6e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001e72:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001e76:	4413      	add	r3, r2
 8001e78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001e88:	4623      	mov	r3, r4
 8001e8a:	0a18      	lsrs	r0, r3, #8
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e92:	462b      	mov	r3, r5
 8001e94:	1219      	asrs	r1, r3, #8
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <bmp280_compensate_P_int32+0x2dc>)
 8001e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	17da      	asrs	r2, r3, #31
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ea4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eac:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	fb02 f203 	mul.w	r2, r2, r3
 8001eb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001eba:	4644      	mov	r4, r8
 8001ebc:	fb04 f303 	mul.w	r3, r4, r3
 8001ec0:	441a      	add	r2, r3
 8001ec2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ec6:	4644      	mov	r4, r8
 8001ec8:	fba3 3404 	umull	r3, r4, r3, r4
 8001ecc:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001ed0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001eea:	464c      	mov	r4, r9
 8001eec:	0323      	lsls	r3, r4, #12
 8001eee:	46c4      	mov	ip, r8
 8001ef0:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001ef4:	4644      	mov	r4, r8
 8001ef6:	0322      	lsls	r2, r4, #12
 8001ef8:	1884      	adds	r4, r0, r2
 8001efa:	633c      	str	r4, [r7, #48]	; 0x30
 8001efc:	eb41 0303 	adc.w	r3, r1, r3
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
 8001f02:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f06:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1) >>33;
 8001f0a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f0e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001f12:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001f16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <bmp280_compensate_P_int32+0x2e0>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f26:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f2a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001f2e:	4622      	mov	r2, r4
 8001f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f34:	4641      	mov	r1, r8
 8001f36:	fb01 f202 	mul.w	r2, r1, r2
 8001f3a:	464d      	mov	r5, r9
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4603      	mov	r3, r0
 8001f42:	fb03 f305 	mul.w	r3, r3, r5
 8001f46:	4413      	add	r3, r2
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4641      	mov	r1, r8
 8001f4c:	fba2 2101 	umull	r2, r1, r2, r1
 8001f50:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001f54:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001f58:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001f6e:	4629      	mov	r1, r5
 8001f70:	104a      	asrs	r2, r1, #1
 8001f72:	4629      	mov	r1, r5
 8001f74:	17cb      	asrs	r3, r1, #31
 8001f76:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8001f7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	d110      	bne.n	8001fa4 <bmp280_compensate_P_int32+0x2e4>
			{
				return -1; //evita exceção causada por divisão por zero
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e151      	b.n	800222c <bmp280_compensate_P_int32+0x56c>
 8001f88:	20000124 	.word	0x20000124
 8001f8c:	20000150 	.word	0x20000150
 8001f90:	2000014e 	.word	0x2000014e
 8001f94:	2000014c 	.word	0x2000014c
 8001f98:	2000014a 	.word	0x2000014a
 8001f9c:	20000148 	.word	0x20000148
 8001fa0:	20000142 	.word	0x20000142
			}

	p = 1048576 - adc_P;
 8001fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fa8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001fac:	17da      	asrs	r2, r3, #31
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001fb6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31) - var2)*3125) / var1;
 8001fba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fbe:	105b      	asrs	r3, r3, #1
 8001fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fc8:	07db      	lsls	r3, r3, #31
 8001fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	1aa4      	subs	r4, r4, r2
 8001fda:	67bc      	str	r4, [r7, #120]	; 0x78
 8001fdc:	eb61 0303 	sbc.w	r3, r1, r3
 8001fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fe2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	6239      	str	r1, [r7, #32]
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	1851      	adds	r1, r2, r1
 8001ffa:	61b9      	str	r1, [r7, #24]
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	414b      	adcs	r3, r1
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800200e:	4649      	mov	r1, r9
 8002010:	018b      	lsls	r3, r1, #6
 8002012:	4641      	mov	r1, r8
 8002014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002018:	4641      	mov	r1, r8
 800201a:	018a      	lsls	r2, r1, #6
 800201c:	4641      	mov	r1, r8
 800201e:	1889      	adds	r1, r1, r2
 8002020:	6139      	str	r1, [r7, #16]
 8002022:	4649      	mov	r1, r9
 8002024:	eb43 0101 	adc.w	r1, r3, r1
 8002028:	6179      	str	r1, [r7, #20]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002036:	4649      	mov	r1, r9
 8002038:	008b      	lsls	r3, r1, #2
 800203a:	46c4      	mov	ip, r8
 800203c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002040:	4641      	mov	r1, r8
 8002042:	008a      	lsls	r2, r1, #2
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	4603      	mov	r3, r0
 800204a:	4622      	mov	r2, r4
 800204c:	189b      	adds	r3, r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	460b      	mov	r3, r1
 8002052:	462a      	mov	r2, r5
 8002054:	eb42 0303 	adc.w	r3, r2, r3
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002066:	4649      	mov	r1, r9
 8002068:	008b      	lsls	r3, r1, #2
 800206a:	46c4      	mov	ip, r8
 800206c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002070:	4641      	mov	r1, r8
 8002072:	008a      	lsls	r2, r1, #2
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4603      	mov	r3, r0
 800207a:	4622      	mov	r2, r4
 800207c:	189b      	adds	r3, r3, r2
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
 8002080:	462b      	mov	r3, r5
 8002082:	460a      	mov	r2, r1
 8002084:	eb42 0303 	adc.w	r3, r2, r3
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
 800208a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800208e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002092:	f7fe ffed 	bl	8001070 <__aeabi_ldivmod>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <bmp280_compensate_P_int32+0x578>)
 80020a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0b50      	lsrs	r0, r2, #13
 80020ba:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80020be:	1359      	asrs	r1, r3, #13
 80020c0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80020c4:	462b      	mov	r3, r5
 80020c6:	fb00 f203 	mul.w	r2, r0, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	fb03 f301 	mul.w	r3, r3, r1
 80020d0:	4413      	add	r3, r2
 80020d2:	4622      	mov	r2, r4
 80020d4:	fba2 2100 	umull	r2, r1, r2, r0
 80020d8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80020dc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80020e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020e4:	4413      	add	r3, r2
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80020ea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020ee:	f04f 0000 	mov.w	r0, #0
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	0b50      	lsrs	r0, r2, #13
 80020f8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80020fc:	1359      	asrs	r1, r3, #13
 80020fe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002102:	462b      	mov	r3, r5
 8002104:	fb00 f203 	mul.w	r2, r0, r3
 8002108:	4623      	mov	r3, r4
 800210a:	fb03 f301 	mul.w	r3, r3, r1
 800210e:	4413      	add	r3, r2
 8002110:	4622      	mov	r2, r4
 8002112:	fba2 2100 	umull	r2, r1, r2, r0
 8002116:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800211a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800211e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002122:	4413      	add	r3, r2
 8002124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002134:	4621      	mov	r1, r4
 8002136:	0e4a      	lsrs	r2, r1, #25
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	460c      	mov	r4, r1
 800213e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002142:	164b      	asrs	r3, r1, #25
 8002144:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8002148:	4b3c      	ldr	r3, [pc, #240]	; (800223c <bmp280_compensate_P_int32+0x57c>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	b21b      	sxth	r3, r3
 8002150:	17da      	asrs	r2, r3, #31
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
 8002154:	667a      	str	r2, [r7, #100]	; 0x64
 8002156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800215a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800215e:	462a      	mov	r2, r5
 8002160:	fb02 f203 	mul.w	r2, r2, r3
 8002164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002168:	4621      	mov	r1, r4
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002174:	4621      	mov	r1, r4
 8002176:	fba2 2101 	umull	r2, r1, r2, r1
 800217a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800217e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002182:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002186:	4413      	add	r3, r2
 8002188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002198:	4621      	mov	r1, r4
 800219a:	0cca      	lsrs	r2, r1, #19
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	460c      	mov	r4, r1
 80021a2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80021a6:	14cb      	asrs	r3, r1, #19
 80021a8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 80021ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80021b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021b4:	1884      	adds	r4, r0, r2
 80021b6:	65bc      	str	r4, [r7, #88]	; 0x58
 80021b8:	eb41 0303 	adc.w	r3, r1, r3
 80021bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80021c6:	4621      	mov	r1, r4
 80021c8:	1889      	adds	r1, r1, r2
 80021ca:	6539      	str	r1, [r7, #80]	; 0x50
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb43 0101 	adc.w	r1, r3, r1
 80021d2:	6579      	str	r1, [r7, #84]	; 0x54
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80021e0:	4623      	mov	r3, r4
 80021e2:	0a18      	lsrs	r0, r3, #8
 80021e4:	462a      	mov	r2, r5
 80021e6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80021ea:	462b      	mov	r3, r5
 80021ec:	1219      	asrs	r1, r3, #8
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <bmp280_compensate_P_int32+0x580>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	17da      	asrs	r2, r3, #31
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002208:	464c      	mov	r4, r9
 800220a:	0123      	lsls	r3, r4, #4
 800220c:	46c4      	mov	ip, r8
 800220e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8002212:	4644      	mov	r4, r8
 8002214:	0122      	lsls	r2, r4, #4
 8002216:	1884      	adds	r4, r0, r2
 8002218:	603c      	str	r4, [r7, #0]
 800221a:	eb41 0303 	adc.w	r3, r1, r3
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002224:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8002228:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800222c:	4618      	mov	r0, r3
 800222e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002238:	20000156 	.word	0x20000156
 800223c:	20000154 	.word	0x20000154
 8002240:	20000152 	.word	0x20000152

08002244 <HAL_SPI_TxCpltCallback>:
uint32_t receiv_fromFRAM[4];
uint8_t data_receive[16];
float transf_float[4];


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_SPI_TxCpltCallback+0x78>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12c      	bne.n	80022ae <HAL_SPI_TxCpltCallback+0x6a>
        if (hspi->Instance->CR1 & SPI_CR1_SPE) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <HAL_SPI_TxCpltCallback+0x6a>
 	  	  switch(FRAM_state)
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d01d      	beq.n	80022a6 <HAL_SPI_TxCpltCallback+0x62>
 800226a:	2b09      	cmp	r3, #9
 800226c:	dc21      	bgt.n	80022b2 <HAL_SPI_TxCpltCallback+0x6e>
 800226e:	2b05      	cmp	r3, #5
 8002270:	d002      	beq.n	8002278 <HAL_SPI_TxCpltCallback+0x34>
 8002272:	2b07      	cmp	r3, #7
 8002274:	d009      	beq.n	800228a <HAL_SPI_TxCpltCallback+0x46>
 	  		break;
 	  		case WAIT_FRAM_READ_COMMAND:
 	  			FRAM_state = FRAM_READ;
 	  		break;
 	  		default:
 	  			break;
 8002276:	e01c      	b.n	80022b2 <HAL_SPI_TxCpltCallback+0x6e>
 	  			FRAM_state = FRAM_WRITE;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 800227a:	2206      	movs	r2, #6
 800227c:	701a      	strb	r2, [r3, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	2101      	movs	r1, #1
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <HAL_SPI_TxCpltCallback+0x80>)
 8002284:	f001 fd5f 	bl	8003d46 <HAL_GPIO_WritePin>
 	  		break;
 8002288:	e014      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			FRAM_state = FRAM_IDLE;
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 	  			contador_FRAM += 1;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_SPI_TxCpltCallback+0x84>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_SPI_TxCpltCallback+0x84>)
 8002298:	6013      	str	r3, [r2, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2101      	movs	r1, #1
 800229e:	4809      	ldr	r0, [pc, #36]	; (80022c4 <HAL_SPI_TxCpltCallback+0x80>)
 80022a0:	f001 fd51 	bl	8003d46 <HAL_GPIO_WritePin>
 	  		break;
 80022a4:	e006      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			FRAM_state = FRAM_READ;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 80022a8:	220a      	movs	r2, #10
 80022aa:	701a      	strb	r2, [r3, #0]
 	  		break;
 80022ac:	e002      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  	}
      }
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			break;
 80022b2:	bf00      	nop
   }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200002bc 	.word	0x200002bc
 80022c0:	20000159 	.word	0x20000159
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	200001e0 	.word	0x200001e0

080022cc <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <HAL_SPI_RxCpltCallback+0x104>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d173      	bne.n	80023c4 <HAL_SPI_RxCpltCallback+0xf8>
        if (hspi->Instance->CR1 & SPI_CR1_SPE) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_SPI_RxCpltCallback+0xf8>
        	switch(FRAM_state)
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_RxCpltCallback+0x2c>
 80022f2:	2b0b      	cmp	r3, #11
 80022f4:	d009      	beq.n	800230a <HAL_SPI_RxCpltCallback+0x3e>
	  		    transf_float[3] = *(float*)&receiv_fromFRAM[3];
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 	  			FRAM_state = FRAM_IDLE;
 	  		break;
 	  		default:
 	  			break;
 80022f6:	e066      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
 	  			FRAM_state = FRAM_IDLE;
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	2101      	movs	r1, #1
 8002302:	4835      	ldr	r0, [pc, #212]	; (80023d8 <HAL_SPI_RxCpltCallback+0x10c>)
 8002304:	f001 fd1f 	bl	8003d46 <HAL_GPIO_WritePin>
 	  		break;
 8002308:	e05d      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
	  		    receiv_fromFRAM[0] = (data_receive[3] << 24) | (data_receive[2] << 16) | (data_receive[1] << 8) | data_receive[0];
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800230c:	78db      	ldrb	r3, [r3, #3]
 800230e:	061a      	lsls	r2, r3, #24
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	4313      	orrs	r3, r2
 8002320:	4a2e      	ldr	r2, [pc, #184]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	461a      	mov	r2, r3
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800232a:	601a      	str	r2, [r3, #0]
	  		    transf_float[0] = *(float*)&receiv_fromFRAM[0];
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 8002332:	6013      	str	r3, [r2, #0]
	  		    receiv_fromFRAM[1] = (data_receive[7] << 24) | (data_receive[6] << 16) | (data_receive[5] << 8) | data_receive[4];
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002336:	79db      	ldrb	r3, [r3, #7]
 8002338:	061a      	lsls	r2, r3, #24
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800233c:	799b      	ldrb	r3, [r3, #6]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	431a      	orrs	r2, r3
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002344:	795b      	ldrb	r3, [r3, #5]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4313      	orrs	r3, r2
 800234a:	4a24      	ldr	r2, [pc, #144]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800234c:	7912      	ldrb	r2, [r2, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 8002354:	605a      	str	r2, [r3, #4]
	  		    transf_float[1] = *(float*)&receiv_fromFRAM[1];
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_SPI_RxCpltCallback+0x11c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 800235c:	6053      	str	r3, [r2, #4]
	  		    receiv_fromFRAM[2] = (data_receive[11] << 24) | (data_receive[10] << 16) | (data_receive[9] << 8) | data_receive[8];
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002360:	7adb      	ldrb	r3, [r3, #11]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002366:	7a9b      	ldrb	r3, [r3, #10]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800236e:	7a5b      	ldrb	r3, [r3, #9]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4313      	orrs	r3, r2
 8002374:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002376:	7a12      	ldrb	r2, [r2, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	461a      	mov	r2, r3
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800237e:	609a      	str	r2, [r3, #8]
	  		    transf_float[2] = *(float*)&receiv_fromFRAM[2];
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_SPI_RxCpltCallback+0x120>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 8002386:	6093      	str	r3, [r2, #8]
	  		    receiv_fromFRAM[3] = (data_receive[15] << 24) | (data_receive[14] << 16) | (data_receive[13] << 8) | data_receive[12];
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800238a:	7bdb      	ldrb	r3, [r3, #15]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002390:	7b9b      	ldrb	r3, [r3, #14]
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002398:	7b5b      	ldrb	r3, [r3, #13]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	4313      	orrs	r3, r2
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 80023a0:	7b12      	ldrb	r2, [r2, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 80023a8:	60da      	str	r2, [r3, #12]
	  		    transf_float[3] = *(float*)&receiv_fromFRAM[3];
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_SPI_RxCpltCallback+0x124>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 80023b0:	60d3      	str	r3, [r2, #12]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	2101      	movs	r1, #1
 80023b6:	4808      	ldr	r0, [pc, #32]	; (80023d8 <HAL_SPI_RxCpltCallback+0x10c>)
 80023b8:	f001 fcc5 	bl	8003d46 <HAL_GPIO_WritePin>
 	  			FRAM_state = FRAM_IDLE;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
 	  		break;
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
      }
   }
 80023c4:	bf00      	nop
}
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200002bc 	.word	0x200002bc
 80023d4:	20000159 	.word	0x20000159
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	200001f4 	.word	0x200001f4
 80023e0:	200001e4 	.word	0x200001e4
 80023e4:	20000204 	.word	0x20000204
 80023e8:	200001e8 	.word	0x200001e8
 80023ec:	200001ec 	.word	0x200001ec
 80023f0:	200001f0 	.word	0x200001f0

080023f4 <FRAMset_config>:

void FRAMset_config(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2101      	movs	r1, #1
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <FRAMset_config+0x64>)
 8002400:	f001 fca1 	bl	8003d46 <HAL_GPIO_WritePin>
	uint8_t cmd[2] = {0x06, 0x00};
 8002404:	2306      	movs	r3, #6
 8002406:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&cmd, 1 ,1000);
 8002408:	1d39      	adds	r1, r7, #4
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	2201      	movs	r2, #1
 8002410:	4812      	ldr	r0, [pc, #72]	; (800245c <FRAMset_config+0x68>)
 8002412:	f004 fe11 	bl	8007038 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2101      	movs	r1, #1
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FRAMset_config+0x64>)
 800241c:	f001 fc93 	bl	8003d46 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002420:	2001      	movs	r0, #1
 8002422:	f001 f907 	bl	8003634 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	480b      	ldr	r0, [pc, #44]	; (8002458 <FRAMset_config+0x64>)
 800242c:	f001 fc8b 	bl	8003d46 <HAL_GPIO_WritePin>
	cmd[0] = 0x01;
 8002430:	2301      	movs	r3, #1
 8002432:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x80;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&cmd, 2, 1000);
 8002438:	1d39      	adds	r1, r7, #4
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	2202      	movs	r2, #2
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <FRAMset_config+0x68>)
 8002442:	f004 fdf9 	bl	8007038 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2101      	movs	r1, #1
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <FRAMset_config+0x64>)
 800244c:	f001 fc7b 	bl	8003d46 <HAL_GPIO_WritePin>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010c00 	.word	0x40010c00
 800245c:	200002bc 	.word	0x200002bc

08002460 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <FRAM_ID>:

void FRAM_ID(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2101      	movs	r1, #1
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <FRAM_ID+0x28>)
 800247e:	f001 fc62 	bl	8003d46 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDIDI, 1);
 8002482:	2201      	movs	r2, #1
 8002484:	4906      	ldr	r1, [pc, #24]	; (80024a0 <FRAM_ID+0x2c>)
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <FRAM_ID+0x30>)
 8002488:	f004 ff12 	bl	80072b0 <HAL_SPI_Transmit_IT>
    HAL_SPI_Receive_IT(&hspi1, bytes_ID, 4);
 800248c:	2204      	movs	r2, #4
 800248e:	4906      	ldr	r1, [pc, #24]	; (80024a8 <FRAM_ID+0x34>)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <FRAM_ID+0x30>)
 8002492:	f004 ff97 	bl	80073c4 <HAL_SPI_Receive_IT>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	20000003 	.word	0x20000003
 80024a4:	200002bc 	.word	0x200002bc
 80024a8:	2000015c 	.word	0x2000015c

080024ac <FRAM_enablewrite>:


void FRAM_enablewrite(void){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2101      	movs	r1, #1
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <FRAM_enablewrite+0x1c>)
 80024b6:	f001 fc46 	bl	8003d46 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 80024ba:	2201      	movs	r2, #1
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <FRAM_enablewrite+0x20>)
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <FRAM_enablewrite+0x24>)
 80024c0:	f004 fef6 	bl	80072b0 <HAL_SPI_Transmit_IT>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	20000002 	.word	0x20000002
 80024d0:	200002bc 	.word	0x200002bc

080024d4 <FRAM_Write>:

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
    HAL_SPI_Transmit_IT(&hspi1, msg, 3);
}

void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]

	uint8_t addr_high = (address >> 8 ) & 0xFF;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	72fb      	strb	r3, [r7, #11]
    uint8_t addr_low = address & 0xFF;
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	72bb      	strb	r3, [r7, #10]

    msg[0] = WRITE;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <FRAM_Write+0x78>)
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <FRAM_Write+0x7c>)
 80024f6:	701a      	strb	r2, [r3, #0]
    msg[1] = addr_high;
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <FRAM_Write+0x7c>)
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	7053      	strb	r3, [r2, #1]
    msg[2] = addr_low;
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <FRAM_Write+0x7c>)
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	7093      	strb	r3, [r2, #2]

    for (int i = 0; i < size ; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e00a      	b.n	8002520 <FRAM_Write+0x4c>
    	msg[i+3] = data[i];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3303      	adds	r3, #3
 8002514:	7811      	ldrb	r1, [r2, #0]
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <FRAM_Write+0x7c>)
 8002518:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < size ; i++){
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf0      	blt.n	800250a <FRAM_Write+0x36>
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2101      	movs	r1, #1
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <FRAM_Write+0x80>)
 800252e:	f001 fc0a 	bl	8003d46 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, msg, 3+size);
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	3303      	adds	r3, #3
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	4905      	ldr	r1, [pc, #20]	; (8002550 <FRAM_Write+0x7c>)
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <FRAM_Write+0x84>)
 800253e:	f004 feb7 	bl	80072b0 <HAL_SPI_Transmit_IT>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000001 	.word	0x20000001
 8002550:	20000160 	.word	0x20000160
 8002554:	40010c00 	.word	0x40010c00
 8002558:	200002bc 	.word	0x200002bc
 800255c:	00000000 	.word	0x00000000

08002560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002566:	f001 f803 	bl	8003570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800256a:	f000 fac7 	bl	8002afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256e:	f000 fc15 	bl	8002d9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002572:	f000 fb65 	bl	8002c40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002576:	f000 fbe7 	bl	8002d48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800257a:	f000 fb05 	bl	8002b88 <MX_I2C1_Init>
  MX_I2C2_Init();
 800257e:	f000 fb31 	bl	8002be4 <MX_I2C2_Init>
  MX_TIM4_Init();
 8002582:	f000 fb93 	bl	8002cac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZAÇÀO DOS PINOS DE ACIONAMENTO E MONITORAMENTO DE CARGA
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); 			// ACIONA CARGA 1 = 0
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258c:	48a6      	ldr	r0, [pc, #664]	; (8002828 <main+0x2c8>)
 800258e:	f001 fbda 	bl	8003d46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); 			// ACIONA CARGA 2 = 0
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002598:	48a3      	ldr	r0, [pc, #652]	; (8002828 <main+0x2c8>)
 800259a:	f001 fbd4 	bl	8003d46 <HAL_GPIO_WritePin>
  GPIO_PinState pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); 	// Lê o estado do pino GPIO14 para carga 1; RESET = 0V -> HA CARGA
 800259e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a2:	48a2      	ldr	r0, [pc, #648]	; (800282c <main+0x2cc>)
 80025a4:	f001 fbb8 	bl	8003d18 <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	737b      	strb	r3, [r7, #13]
  GPIO_PinState pin_state2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); 	// Lê o estado do pino GPIO15 para carga 2; RESET = 0V -> HA CARGA
 80025ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b0:	489e      	ldr	r0, [pc, #632]	; (800282c <main+0x2cc>)
 80025b2:	f001 fbb1 	bl	8003d18 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	733b      	strb	r3, [r7, #12]

  // INICIALIZAÇÃO DE SENSORES
  MPU6050_Config();
 80025ba:	f7ff f923 	bl	8001804 <MPU6050_Config>
  MPU6050_2_Config();
 80025be:	f7ff f977 	bl	80018b0 <MPU6050_2_Config>
  BMP280_Config(OSRS_2, OSRS_16, MODE_NORMAL, T_SB_0p5, IIR_16);
 80025c2:	2304      	movs	r3, #4
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	2203      	movs	r2, #3
 80025ca:	2105      	movs	r1, #5
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7ff fa7b 	bl	8001ac8 <BMP280_Config>

  int contSubida = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  int contDescida = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  float diffAceleracao;
  data_vehicle.pressMIN = 100000;
 80025da:	4b95      	ldr	r3, [pc, #596]	; (8002830 <main+0x2d0>)
 80025dc:	4a95      	ldr	r2, [pc, #596]	; (8002834 <main+0x2d4>)
 80025de:	619a      	str	r2, [r3, #24]
  extern uint8_t press_receiv ;

  // INICIALIZÇÃO DO ESTADO E INDICADORES DE PRÉ LANÇAMENTO
  current_state = PAUSADO;
 80025e0:	4b95      	ldr	r3, [pc, #596]	; (8002838 <main+0x2d8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
  EstadoAltitude = ESTADO_INICIAL;
 80025e6:	4b95      	ldr	r3, [pc, #596]	; (800283c <main+0x2dc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]

  GPIO_PinState pin_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); 		// BUTTON
 80025ec:	2101      	movs	r1, #1
 80025ee:	488f      	ldr	r0, [pc, #572]	; (800282c <main+0x2cc>)
 80025f0:	f001 fb92 	bl	8003d18 <HAL_GPIO_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 	GPIO_PIN_RESET);  	// LED VERDE -> ESTADO LANÇADO
 80025f8:	2200      	movs	r2, #0
 80025fa:	2120      	movs	r1, #32
 80025fc:	488a      	ldr	r0, [pc, #552]	; (8002828 <main+0x2c8>)
 80025fe:	f001 fba2 	bl	8003d46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 	GPIO_PIN_RESET); 	// LED VERMELHO -> PAUSADO
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002608:	4887      	ldr	r0, [pc, #540]	; (8002828 <main+0x2c8>)
 800260a:	f001 fb9c 	bl	8003d46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// LED AMARELO -> ESTADO AGUARDANDO LANÇAMENTO
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002614:	4885      	ldr	r0, [pc, #532]	; (800282c <main+0x2cc>)
 8002616:	f001 fb96 	bl	8003d46 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 	GPIO_PIN_RESET); 	// BUZER
 800261a:	2200      	movs	r2, #0
 800261c:	2102      	movs	r1, #2
 800261e:	4883      	ldr	r0, [pc, #524]	; (800282c <main+0x2cc>)
 8002620:	f001 fb91 	bl	8003d46 <HAL_GPIO_WritePin>

  // INICIALIZAÇÃO DAS INTERRUPÇÕES
  HAL_TIM_Base_Start_IT(&htim4);
 8002624:	4886      	ldr	r0, [pc, #536]	; (8002840 <main+0x2e0>)
 8002626:	f005 fcaf 	bl	8007f88 <HAL_TIM_Base_Start_IT>

  // INICIALIZAÇÃO FRAM
  FRAM_state = FRAM_PAUSED;
 800262a:	4b86      	ldr	r3, [pc, #536]	; (8002844 <main+0x2e4>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
  FRAMset_config();
 8002630:	f7ff fee0 	bl	80023f4 <FRAMset_config>
  uint16_t FRAM_address = 0x0000;
 8002634:	2300      	movs	r3, #0
 8002636:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 while (1)
 {
	 pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800263c:	487b      	ldr	r0, [pc, #492]	; (800282c <main+0x2cc>)
 800263e:	f001 fb6b 	bl	8003d18 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	737b      	strb	r3, [r7, #13]
	 pin_state2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800264a:	4878      	ldr	r0, [pc, #480]	; (800282c <main+0x2cc>)
 800264c:	f001 fb64 	bl	8003d18 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	733b      	strb	r3, [r7, #12]
	 pin_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002654:	2101      	movs	r1, #1
 8002656:	4875      	ldr	r0, [pc, #468]	; (800282c <main+0x2cc>)
 8002658:	f001 fb5e 	bl	8003d18 <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	72fb      	strb	r3, [r7, #11]

     // Verifica a tendência da aceleraçao
	 // data_vehicle.accel = simulated_data.accel_z;
	 data_vehicle.accel = ema_receive.EMA_z;
 8002660:	4b79      	ldr	r3, [pc, #484]	; (8002848 <main+0x2e8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a72      	ldr	r2, [pc, #456]	; (8002830 <main+0x2d0>)
 8002666:	6013      	str	r3, [r2, #0]
	 //data_vehicle.accelTemp = data_vehicle.accel;
	 data_vehicle.accelTemp = ema_receive.EMA_z;
 8002668:	4b77      	ldr	r3, [pc, #476]	; (8002848 <main+0x2e8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a70      	ldr	r2, [pc, #448]	; (8002830 <main+0x2d0>)
 800266e:	6093      	str	r3, [r2, #8]
     diffAceleracao = data_vehicle.accel - data_vehicle.accel_anterior;
 8002670:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <main+0x2d0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6e      	ldr	r2, [pc, #440]	; (8002830 <main+0x2d0>)
 8002676:	6852      	ldr	r2, [r2, #4]
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fa28 	bl	8000ad0 <__aeabi_fsub>
 8002680:	4603      	mov	r3, r0
 8002682:	607b      	str	r3, [r7, #4]

     if (data_vehicle.accel > -0.1 && data_vehicle.accel < 0.1) {
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <main+0x2d0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd fec5 	bl	8000418 <__aeabi_f2d>
 800268e:	a360      	add	r3, pc, #384	; (adr r3, 8002810 <main+0x2b0>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f9a8 	bl	80009e8 <__aeabi_dcmpgt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <main+0x160>
 800269e:	4b64      	ldr	r3, [pc, #400]	; (8002830 <main+0x2d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd feb8 	bl	8000418 <__aeabi_f2d>
 80026a8:	a35b      	add	r3, pc, #364	; (adr r3, 8002818 <main+0x2b8>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fe f97d 	bl	80009ac <__aeabi_dcmplt>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <main+0x160>
    	 EstadoAceleracao = ACCEL_NEAR_ZERO;
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <main+0x2ec>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e035      	b.n	800272c <main+0x1cc>
     } else if ( -1.5 < data_vehicle.accel && data_vehicle.accel < -1) {
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <main+0x2d0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4962      	ldr	r1, [pc, #392]	; (8002850 <main+0x2f0>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fcc8 	bl	800105c <__aeabi_fcmpgt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <main+0x18c>
 80026d2:	4b57      	ldr	r3, [pc, #348]	; (8002830 <main+0x2d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	495f      	ldr	r1, [pc, #380]	; (8002854 <main+0x2f4>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fca1 	bl	8001020 <__aeabi_fcmplt>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <main+0x18c>
    	 EstadoAceleracao = ACCEL_NEAR_G;
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <main+0x2ec>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e01f      	b.n	800272c <main+0x1cc>
     } else if (data_vehicle.accel > 1) {
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <main+0x2d0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fcb1 	bl	800105c <__aeabi_fcmpgt>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <main+0x1a8>
    	 EstadoAceleracao = ACCEL_HIGH_POSITIVE;
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <main+0x2ec>)
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e011      	b.n	800272c <main+0x1cc>
     } else if (diffAceleracao < -0.05) {
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fd fe85 	bl	8000418 <__aeabi_f2d>
 800270e:	a344      	add	r3, pc, #272	; (adr r3, 8002820 <main+0x2c0>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fe f94a 	bl	80009ac <__aeabi_dcmplt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <main+0x1c6>
    	 EstadoAceleracao = ACCEL_HIGH_NEGATIVE;
 800271e:	4b4b      	ldr	r3, [pc, #300]	; (800284c <main+0x2ec>)
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e002      	b.n	800272c <main+0x1cc>
     } else {
    	 EstadoAceleracao = ACCEL_LOW_NEGATIVE;
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <main+0x2ec>)
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
     }


     // Verifica a tendência da altitude
     if (press_receiv == 1){
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <main+0x2f8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d155      	bne.n	80027e0 <main+0x280>
    	 press_receiv = 0;
 8002734:	4b48      	ldr	r3, [pc, #288]	; (8002858 <main+0x2f8>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
    	// data_vehicle.pressao = simulated_data.pressao;
    	 data_vehicle.pressao = ema_receive.EMA_press;
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <main+0x2e8>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4a3c      	ldr	r2, [pc, #240]	; (8002830 <main+0x2d0>)
 8002740:	60d3      	str	r3, [r2, #12]
    	 data_vehicle.pressTemp = data_vehicle.pressao;
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <main+0x2d0>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <main+0x2d0>)
 8002748:	6153      	str	r3, [r2, #20]

    	 if ( data_vehicle.pressao < data_vehicle.pressao_anterior){
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <main+0x2d0>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a38      	ldr	r2, [pc, #224]	; (8002830 <main+0x2d0>)
 8002750:	6912      	ldr	r2, [r2, #16]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fc63 	bl	8001020 <__aeabi_fcmplt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00c      	beq.n	800277a <main+0x21a>
    		 if (contSubida < 30)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b1d      	cmp	r3, #29
 8002764:	dc02      	bgt.n	800276c <main+0x20c>
    			 contSubida++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
    		 if (contDescida > 0)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	dd32      	ble.n	80027d8 <main+0x278>
    			 contDescida--;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3b01      	subs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e02e      	b.n	80027d8 <main+0x278>
    	 } else if ( data_vehicle.pressao > data_vehicle.pressao_anterior) { //5%
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <main+0x2d0>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <main+0x2d0>)
 8002780:	6912      	ldr	r2, [r2, #16]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fc69 	bl	800105c <__aeabi_fcmpgt>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <main+0x24a>
    		 if (contDescida < 30)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b1d      	cmp	r3, #29
 8002794:	dc02      	bgt.n	800279c <main+0x23c>
    			 contDescida++;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	3301      	adds	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
    		 if (contSubida > 0 )
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd1a      	ble.n	80027d8 <main+0x278>
    			 contSubida--;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e016      	b.n	80027d8 <main+0x278>
    	 } else if (data_vehicle.pressao == data_vehicle.pressao_anterior){
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <main+0x2d0>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a20      	ldr	r2, [pc, #128]	; (8002830 <main+0x2d0>)
 80027b0:	6912      	ldr	r2, [r2, #16]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc29 	bl	800100c <__aeabi_fcmpeq>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <main+0x278>
    		 if (contDescida > 0)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	dd02      	ble.n	80027cc <main+0x26c>
    		     contDescida--;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
    		 if (contSubida > 0 )
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dd02      	ble.n	80027d8 <main+0x278>
    			 contSubida--;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
    	 }
    	 data_vehicle.pressao_anterior = data_vehicle.pressTemp;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <main+0x2d0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <main+0x2d0>)
 80027de:	6113      	str	r3, [r2, #16]
     }


     // MAQUINA DE ESTADOS PARA VERIFICAÇAO DA ALTITUDE
     switch (EstadoAltitude) {
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <main+0x2dc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	f200 8080 	bhi.w	80028ea <main+0x38a>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <main+0x290>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	0800287f 	.word	0x0800287f
 80027f8:	0800289f 	.word	0x0800289f
 80027fc:	080028c1 	.word	0x080028c1
         case ESTADO_INICIAL:
             if (contSubida >= NUM_AMOSTRAS) {
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b0e      	cmp	r3, #14
 8002804:	dd2a      	ble.n	800285c <main+0x2fc>
            	 EstadoAltitude = ESTADO_SUBIDA;
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <main+0x2dc>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
             } else if (contDescida >= NUM_AMOSTRAS) {
            	 EstadoAltitude = ESTADO_DESCIDA;
             } else if (contSubida == 0 && contDescida == 0) {
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
             }
             break;
 800280c:	e066      	b.n	80028dc <main+0x37c>
 800280e:	bf00      	nop
 8002810:	9999999a 	.word	0x9999999a
 8002814:	bfb99999 	.word	0xbfb99999
 8002818:	9999999a 	.word	0x9999999a
 800281c:	3fb99999 	.word	0x3fb99999
 8002820:	9999999a 	.word	0x9999999a
 8002824:	bfa99999 	.word	0xbfa99999
 8002828:	40010c00 	.word	0x40010c00
 800282c:	40010800 	.word	0x40010800
 8002830:	200003a0 	.word	0x200003a0
 8002834:	47c35000 	.word	0x47c35000
 8002838:	200003bc 	.word	0x200003bc
 800283c:	200003bd 	.word	0x200003bd
 8002840:	20000314 	.word	0x20000314
 8002844:	20000159 	.word	0x20000159
 8002848:	200003c0 	.word	0x200003c0
 800284c:	200003be 	.word	0x200003be
 8002850:	bfc00000 	.word	0xbfc00000
 8002854:	bf800000 	.word	0xbf800000
 8002858:	200000fc 	.word	0x200000fc
             } else if (contDescida >= NUM_AMOSTRAS) {
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b0e      	cmp	r3, #14
 8002860:	dd03      	ble.n	800286a <main+0x30a>
            	 EstadoAltitude = ESTADO_DESCIDA;
 8002862:	4b9e      	ldr	r3, [pc, #632]	; (8002adc <main+0x57c>)
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]
             break;
 8002868:	e038      	b.n	80028dc <main+0x37c>
             } else if (contSubida == 0 && contDescida == 0) {
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d135      	bne.n	80028dc <main+0x37c>
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d132      	bne.n	80028dc <main+0x37c>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 8002876:	4b99      	ldr	r3, [pc, #612]	; (8002adc <main+0x57c>)
 8002878:	2203      	movs	r2, #3
 800287a:	701a      	strb	r2, [r3, #0]
             break;
 800287c:	e02e      	b.n	80028dc <main+0x37c>

         case ESTADO_SUBIDA:
             if (contDescida >= NUM_AMOSTRAS) {
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b0e      	cmp	r3, #14
 8002882:	dd03      	ble.n	800288c <main+0x32c>
            	 EstadoAltitude = ESTADO_DESCIDA;
 8002884:	4b95      	ldr	r3, [pc, #596]	; (8002adc <main+0x57c>)
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e008      	b.n	800289e <main+0x33e>
             } else if (contSubida == 0 && contDescida == 0) {
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d126      	bne.n	80028e0 <main+0x380>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d123      	bne.n	80028e0 <main+0x380>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 8002898:	4b90      	ldr	r3, [pc, #576]	; (8002adc <main+0x57c>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]
             }else
             break;

         case ESTADO_DESCIDA:
             if (contSubida >= NUM_AMOSTRAS) {
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b0e      	cmp	r3, #14
 80028a2:	dd03      	ble.n	80028ac <main+0x34c>
            	 EstadoAltitude = ESTADO_SUBIDA;
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <main+0x57c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
             } else if (contSubida == 0 && contDescida == 0) {
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
             }
             break;
 80028aa:	e01b      	b.n	80028e4 <main+0x384>
             } else if (contSubida == 0 && contDescida == 0) {
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <main+0x384>
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d115      	bne.n	80028e4 <main+0x384>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <main+0x57c>)
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]
             break;
 80028be:	e011      	b.n	80028e4 <main+0x384>

         case ESTADO_ESTACIONARIO:
             if (contSubida >= NUM_AMOSTRAS) {
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b0e      	cmp	r3, #14
 80028c4:	dd03      	ble.n	80028ce <main+0x36e>
            	 EstadoAltitude = ESTADO_SUBIDA;
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <main+0x57c>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
             } else if (contDescida >= 7) {
            	 EstadoAltitude = ESTADO_DESCIDA;
             }
             break;
 80028cc:	e00c      	b.n	80028e8 <main+0x388>
             } else if (contDescida >= 7) {
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	dd09      	ble.n	80028e8 <main+0x388>
            	 EstadoAltitude = ESTADO_DESCIDA;
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <main+0x57c>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
             break;
 80028da:	e005      	b.n	80028e8 <main+0x388>
             break;
 80028dc:	bf00      	nop
 80028de:	e004      	b.n	80028ea <main+0x38a>
     }
     data_vehicle.accel_anterior = data_vehicle.accelTemp;
 80028e0:	bf00      	nop
 80028e2:	e002      	b.n	80028ea <main+0x38a>
             break;
 80028e4:	bf00      	nop
 80028e6:	e000      	b.n	80028ea <main+0x38a>
             break;
 80028e8:	bf00      	nop
     data_vehicle.accel_anterior = data_vehicle.accelTemp;
 80028ea:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <main+0x580>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a7c      	ldr	r2, [pc, #496]	; (8002ae0 <main+0x580>)
 80028f0:	6053      	str	r3, [r2, #4]


	// MAQUINA DE ESTADOS DO FOGUETE
	switch (current_state){
 80028f2:	4b7c      	ldr	r3, [pc, #496]	; (8002ae4 <main+0x584>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	f200 80b7 	bhi.w	8002a6a <main+0x50a>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <main+0x3a4>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002921 	.word	0x08002921
 8002908:	08002959 	.word	0x08002959
 800290c:	080029a3 	.word	0x080029a3
 8002910:	08002a6b 	.word	0x08002a6b
 8002914:	080029f3 	.word	0x080029f3
 8002918:	08002a6b 	.word	0x08002a6b
 800291c:	08002a6b 	.word	0x08002a6b
		case PAUSADO:
			if (pin_state1 == GPIO_PIN_RESET && pin_state2 == GPIO_PIN_RESET && pin_button == GPIO_PIN_SET ){
 8002920:	7b7b      	ldrb	r3, [r7, #13]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10e      	bne.n	8002944 <main+0x3e4>
 8002926:	7b3b      	ldrb	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10b      	bne.n	8002944 <main+0x3e4>
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <main+0x3e4>
				current_state = AGUARDANDO_LANCAMENTO;
 8002932:	4b6c      	ldr	r3, [pc, #432]	; (8002ae4 <main+0x584>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
				FRAM_state = FRAM_IDLE;
 8002938:	4b6b      	ldr	r3, [pc, #428]	; (8002ae8 <main+0x588>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
				FRAM_ID();
 800293e:	f7ff fd99 	bl	8002474 <FRAM_ID>
			}
			else {
				current_state = PAUSADO;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// LED VERMELHO para indicar PAUSA
			}
		break;
 8002942:	e099      	b.n	8002a78 <main+0x518>
				current_state = PAUSADO;
 8002944:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <main+0x584>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// LED VERMELHO para indicar PAUSA
 800294a:	2201      	movs	r2, #1
 800294c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002950:	4866      	ldr	r0, [pc, #408]	; (8002aec <main+0x58c>)
 8002952:	f001 f9f8 	bl	8003d46 <HAL_GPIO_WritePin>
		break;
 8002956:	e08f      	b.n	8002a78 <main+0x518>
		case AGUARDANDO_LANCAMENTO:
			if (EstadoAceleracao == ACCEL_HIGH_POSITIVE){
 8002958:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <main+0x590>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d103      	bne.n	8002968 <main+0x408>
				current_state = LANCADO;
 8002960:	4b60      	ldr	r3, [pc, #384]	; (8002ae4 <main+0x584>)
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// DESLIGA LED VERMELHO
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 	// BUZZER INDICA AGUARDANDO LANÇAMENTO
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); 	// LED AMARELO INDICAÇÃO AGUARDANDO LANÇAMENTO
				current_state = AGUARDANDO_LANCAMENTO;
			}
		break;
 8002966:	e082      	b.n	8002a6e <main+0x50e>
			else if (EstadoAceleracao == ACCEL_NEAR_ZERO && EstadoAltitude == ESTADO_ESTACIONARIO){
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <main+0x590>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d17e      	bne.n	8002a6e <main+0x50e>
 8002970:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <main+0x57c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d17a      	bne.n	8002a6e <main+0x50e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// DESLIGA LED VERMELHO
 8002978:	2200      	movs	r2, #0
 800297a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800297e:	485b      	ldr	r0, [pc, #364]	; (8002aec <main+0x58c>)
 8002980:	f001 f9e1 	bl	8003d46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 	// BUZZER INDICA AGUARDANDO LANÇAMENTO
 8002984:	2201      	movs	r2, #1
 8002986:	2102      	movs	r1, #2
 8002988:	485a      	ldr	r0, [pc, #360]	; (8002af4 <main+0x594>)
 800298a:	f001 f9dc 	bl	8003d46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); 	// LED AMARELO INDICAÇÃO AGUARDANDO LANÇAMENTO
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002994:	4857      	ldr	r0, [pc, #348]	; (8002af4 <main+0x594>)
 8002996:	f001 f9d6 	bl	8003d46 <HAL_GPIO_WritePin>
				current_state = AGUARDANDO_LANCAMENTO;
 800299a:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <main+0x584>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
		break;
 80029a0:	e065      	b.n	8002a6e <main+0x50e>
		case LANCADO:
			if (EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_HIGH_POSITIVE){
 80029a2:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <main+0x57c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d117      	bne.n	80029da <main+0x47a>
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <main+0x590>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d113      	bne.n	80029da <main+0x47a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);	// DESLIGA BUZZER
 80029b2:	2200      	movs	r2, #0
 80029b4:	2102      	movs	r1, #2
 80029b6:	484f      	ldr	r0, [pc, #316]	; (8002af4 <main+0x594>)
 80029b8:	f001 f9c5 	bl	8003d46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// DESLIGA LED AMARELO
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c2:	484c      	ldr	r0, [pc, #304]	; (8002af4 <main+0x594>)
 80029c4:	f001 f9bf 	bl	8003d46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET); 		// LIGA LED VERDE DE LANÇADO
 80029c8:	2201      	movs	r2, #1
 80029ca:	2120      	movs	r1, #32
 80029cc:	4847      	ldr	r0, [pc, #284]	; (8002aec <main+0x58c>)
 80029ce:	f001 f9ba 	bl	8003d46 <HAL_GPIO_WritePin>
	          	current_state = LANCADO;
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <main+0x584>)
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
			}
			else if(EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_LOW_NEGATIVE){
				current_state = DETECCAO_APOGEU ;
			}

			break;
 80029d8:	e04b      	b.n	8002a72 <main+0x512>
			else if(EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_LOW_NEGATIVE){
 80029da:	4b40      	ldr	r3, [pc, #256]	; (8002adc <main+0x57c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d147      	bne.n	8002a72 <main+0x512>
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <main+0x590>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d143      	bne.n	8002a72 <main+0x512>
				current_state = DETECCAO_APOGEU ;
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <main+0x584>)
 80029ec:	2204      	movs	r2, #4
 80029ee:	701a      	strb	r2, [r3, #0]
			break;
 80029f0:	e03f      	b.n	8002a72 <main+0x512>
	     case DETECCAO_APOGEU:
	          if (EstadoAceleracao == ACCEL_NEAR_G && EstadoAltitude == ESTADO_DESCIDA ){
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <main+0x590>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d116      	bne.n	8002a28 <main+0x4c8>
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <main+0x57c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d112      	bne.n	8002a28 <main+0x4c8>
	        	  if(data_vehicle.pressMIN > data_vehicle.pressao)
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <main+0x580>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a36      	ldr	r2, [pc, #216]	; (8002ae0 <main+0x580>)
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fb25 	bl	800105c <__aeabi_fcmpgt>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <main+0x4c0>
	        		  data_vehicle.pressMIN =  data_vehicle.pressao ;
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <main+0x580>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a30      	ldr	r2, [pc, #192]	; (8002ae0 <main+0x580>)
 8002a1e:	6193      	str	r3, [r2, #24]
	        	  current_state = DETECCAO_APOGEU;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <main+0x584>)
 8002a22:	2204      	movs	r2, #4
 8002a24:	701a      	strb	r2, [r3, #0]
	        	  current_state = PARAQUEDAS_ACIONADO;
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // ACIONA CARGA 2 = 1; paraquedas on
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); // DESLIGA O LED VERDE
	          }
	         break;
 8002a26:	e026      	b.n	8002a76 <main+0x516>
	          else if ((EstadoAceleracao == ACCEL_LOW_NEGATIVE || EstadoAceleracao == ACCEL_HIGH_NEGATIVE) && EstadoAltitude ==  ESTADO_DESCIDA){
 8002a28:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <main+0x590>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d003      	beq.n	8002a38 <main+0x4d8>
 8002a30:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <main+0x590>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d11e      	bne.n	8002a76 <main+0x516>
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <main+0x57c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d11a      	bne.n	8002a76 <main+0x516>
	        	  current_state = PARAQUEDAS_ACIONADO;
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <main+0x584>)
 8002a42:	2206      	movs	r2, #6
 8002a44:	701a      	strb	r2, [r3, #0]
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4c:	4827      	ldr	r0, [pc, #156]	; (8002aec <main+0x58c>)
 8002a4e:	f001 f97a 	bl	8003d46 <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // ACIONA CARGA 2 = 1; paraquedas on
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a58:	4824      	ldr	r0, [pc, #144]	; (8002aec <main+0x58c>)
 8002a5a:	f001 f974 	bl	8003d46 <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); // DESLIGA O LED VERDE
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2120      	movs	r1, #32
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <main+0x58c>)
 8002a64:	f001 f96f 	bl	8003d46 <HAL_GPIO_WritePin>
	         break;
 8002a68:	e005      	b.n	8002a76 <main+0x516>
	     case PARAQUEDAS_ACIONADO:

	    	 break;
	  	default:
	  		 break;
 8002a6a:	bf00      	nop
 8002a6c:	e004      	b.n	8002a78 <main+0x518>
		break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <main+0x518>
			break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <main+0x518>
	         break;
 8002a76:	bf00      	nop
	  }


	// MAQUINA DE ESTADOS DA FRAM
	switch(FRAM_state){
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <main+0x588>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d82a      	bhi.n	8002ad6 <main+0x576>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <main+0x528>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002ad7 	.word	0x08002ad7
 8002a8c:	08002ad7 	.word	0x08002ad7
 8002a90:	08002aa5 	.word	0x08002aa5
 8002a94:	08002ad7 	.word	0x08002ad7
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002ad7 	.word	0x08002ad7
 8002aa0:	08002abd 	.word	0x08002abd
		case FRAM_PAUSED:

		break;
	  	case FRAM_READ_ID:
	  		FRAM_state = WAIT_FRAM_READ_ID;
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <main+0x588>)
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	701a      	strb	r2, [r3, #0]
	  		FRAM_ID();
 8002aaa:	f7ff fce3 	bl	8002474 <FRAM_ID>
	  		break;
 8002aae:	e013      	b.n	8002ad8 <main+0x578>
		case ENABLE_WRITE:
			FRAM_state = WAIT_ENABLE_WRITE;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <main+0x588>)
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	701a      	strb	r2, [r3, #0]
			FRAM_enablewrite();
 8002ab6:	f7ff fcf9 	bl	80024ac <FRAM_enablewrite>
	  		break;
 8002aba:	e00d      	b.n	8002ad8 <main+0x578>
		case FRAM_WRITE:
			FRAM_state = WAIT_FRAM_WRITE;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <main+0x588>)
 8002abe:	2207      	movs	r2, #7
 8002ac0:	701a      	strb	r2, [r3, #0]
			FRAM_Write(FRAM_address, send_FRAM, 16);
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	490c      	ldr	r1, [pc, #48]	; (8002af8 <main+0x598>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fd03 	bl	80024d4 <FRAM_Write>
			FRAM_address += 0x10;					// Incrementa a cada 16 bytes
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	81fb      	strh	r3, [r7, #14]
	  		break;
 8002ad4:	e000      	b.n	8002ad8 <main+0x578>
			FRAM_state = ENABLE_WRITE;

		break;
*/
		default:
			break;
 8002ad6:	bf00      	nop
	 pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002ad8:	e5ae      	b.n	8002638 <main+0xd8>
 8002ada:	bf00      	nop
 8002adc:	200003bd 	.word	0x200003bd
 8002ae0:	200003a0 	.word	0x200003a0
 8002ae4:	200003bc 	.word	0x200003bc
 8002ae8:	20000159 	.word	0x20000159
 8002aec:	40010c00 	.word	0x40010c00
 8002af0:	200003be 	.word	0x200003be
 8002af4:	40010800 	.word	0x40010800
 8002af8:	200003d0 	.word	0x200003d0

08002afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b090      	sub	sp, #64	; 0x40
 8002b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b02:	f107 0318 	add.w	r3, r7, #24
 8002b06:	2228      	movs	r2, #40	; 0x28
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 fac0 	bl	8009090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b30:	2302      	movs	r3, #2
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fdd9 	bl	80066fc <HAL_RCC_OscConfig>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b50:	f000 f9a0 	bl	8002e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b54:	230f      	movs	r3, #15
 8002b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 f846 	bl	8006c00 <HAL_RCC_ClockConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002b7a:	f000 f98b 	bl	8002e94 <Error_Handler>
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3740      	adds	r7, #64	; 0x40
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <MX_I2C1_Init+0x54>)
 8002b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <MX_I2C1_Init+0x58>)
 8002b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002baa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_I2C1_Init+0x50>)
 8002bc6:	f001 f8d7 	bl	8003d78 <HAL_I2C_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bd0:	f000 f960 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000214 	.word	0x20000214
 8002bdc:	40005400 	.word	0x40005400
 8002be0:	000186a0 	.word	0x000186a0

08002be4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <MX_I2C2_Init+0x54>)
 8002bec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <MX_I2C2_Init+0x58>)
 8002bf2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <MX_I2C2_Init+0x50>)
 8002c22:	f001 f8a9 	bl	8003d78 <HAL_I2C_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c2c:	f000 f932 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000268 	.word	0x20000268
 8002c38:	40005800 	.word	0x40005800
 8002c3c:	000186a0 	.word	0x000186a0

08002c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <MX_SPI1_Init+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c74:	2228      	movs	r2, #40	; 0x28
 8002c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <MX_SPI1_Init+0x64>)
 8002c92:	f004 f94d 	bl	8006f30 <HAL_SPI_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c9c:	f000 f8fa 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200002bc 	.word	0x200002bc
 8002ca8:	40013000 	.word	0x40013000

08002cac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <MX_TIM4_Init+0x98>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cd0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002cd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ce2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cf0:	4813      	ldr	r0, [pc, #76]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002cf2:	f005 f8f9 	bl	8007ee8 <HAL_TIM_Base_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002cfc:	f000 f8ca 	bl	8002e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002d0e:	f005 fa95 	bl	800823c <HAL_TIM_ConfigClockSource>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002d18:	f000 f8bc 	bl	8002e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	; (8002d40 <MX_TIM4_Init+0x94>)
 8002d2a:	f005 fc67 	bl	80085fc <HAL_TIMEx_MasterConfigSynchronization>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d34:	f000 f8ae 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000314 	.word	0x20000314
 8002d44:	40000800 	.word	0x40000800

08002d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d4e:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <MX_USART2_UART_Init+0x50>)
 8002d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d6e:	220c      	movs	r2, #12
 8002d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d7e:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_USART2_UART_Init+0x4c>)
 8002d80:	f005 fcac 	bl	80086dc <HAL_UART_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d8a:	f000 f883 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000035c 	.word	0x2000035c
 8002d98:	40004400 	.word	0x40004400

08002d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a34      	ldr	r2, [pc, #208]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6193      	str	r3, [r2, #24]
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <MX_GPIO_Init+0xec>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f248 0102 	movw	r1, #32770	; 0x8002
 8002dfe:	4823      	ldr	r0, [pc, #140]	; (8002e8c <MX_GPIO_Init+0xf0>)
 8002e00:	f000 ffa1 	bl	8003d46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5
 8002e04:	2200      	movs	r2, #0
 8002e06:	f243 3121 	movw	r1, #13089	; 0x3321
 8002e0a:	4821      	ldr	r0, [pc, #132]	; (8002e90 <MX_GPIO_Init+0xf4>)
 8002e0c:	f000 ff9b 	bl	8003d46 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4619      	mov	r1, r3
 8002e22:	481a      	ldr	r0, [pc, #104]	; (8002e8c <MX_GPIO_Init+0xf0>)
 8002e24:	f000 fdf4 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002e28:	f248 0302 	movw	r3, #32770	; 0x8002
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4812      	ldr	r0, [pc, #72]	; (8002e8c <MX_GPIO_Init+0xf0>)
 8002e42:	f000 fde5 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5
 8002e46:	f243 3321 	movw	r3, #13089	; 0x3321
 8002e4a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2302      	movs	r3, #2
 8002e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480c      	ldr	r0, [pc, #48]	; (8002e90 <MX_GPIO_Init+0xf4>)
 8002e60:	f000 fdd6 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0310 	add.w	r3, r7, #16
 8002e76:	4619      	mov	r1, r3
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <MX_GPIO_Init+0xf0>)
 8002e7a:	f000 fdc9 	bl	8003a10 <HAL_GPIO_Init>

}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010800 	.word	0x40010800
 8002e90:	40010c00 	.word	0x40010c00

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <Error_Handler+0x8>
	...

08002ea0 <calculate_EMA>:
float get_data[4];

static int count = 0;


void calculate_EMA(void) {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
	// SOFTWARE IN THE LOOP
    get_data[0] = ((simulated_data.accel_x)/g);
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <calculate_EMA+0x1f4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7b      	ldr	r2, [pc, #492]	; (8003098 <calculate_EMA+0x1f8>)
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ffcb 	bl	8000e4c <__aeabi_fdiv>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b78      	ldr	r3, [pc, #480]	; (800309c <calculate_EMA+0x1fc>)
 8002ebc:	601a      	str	r2, [r3, #0]
    get_data[1] = ((simulated_data.accel_y)/g);
 8002ebe:	4b75      	ldr	r3, [pc, #468]	; (8003094 <calculate_EMA+0x1f4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <calculate_EMA+0x1f8>)
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ffbf 	bl	8000e4c <__aeabi_fdiv>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <calculate_EMA+0x1fc>)
 8002ed4:	605a      	str	r2, [r3, #4]
    get_data[2] = ((simulated_data.accel_z)/g);
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <calculate_EMA+0x1f4>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <calculate_EMA+0x1f8>)
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd ffb3 	bl	8000e4c <__aeabi_fdiv>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b6c      	ldr	r3, [pc, #432]	; (800309c <calculate_EMA+0x1fc>)
 8002eec:	609a      	str	r2, [r3, #8]
    get_data[3] = (simulated_data.pressao);
 8002eee:	4b69      	ldr	r3, [pc, #420]	; (8003094 <calculate_EMA+0x1f4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <calculate_EMA+0x1fc>)
 8002ef4:	60d3      	str	r3, [r2, #12]
    get_data[0] = (acc_data.Ax)/16384.0;
    get_data[1] = (acc_data.Ay)/16384.0;
    get_data[2] = (acc_data.Az)/16384.0;
    get_data[3] = (bmp_data.pressure)/256.0;
*/
    ema_receive.EMA_x = alpha * get_data[0] + (1 - alpha) * ema_receive.EMA_x;
 8002ef6:	4b69      	ldr	r3, [pc, #420]	; (800309c <calculate_EMA+0x1fc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <calculate_EMA+0x200>)
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd feef 	bl	8000ce4 <__aeabi_fmul>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461c      	mov	r4, r3
 8002f0a:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <calculate_EMA+0x200>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f14:	f7fd fddc 	bl	8000ad0 <__aeabi_fsub>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <calculate_EMA+0x204>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7fd fede 	bl	8000ce4 <__aeabi_fmul>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7fd fdd1 	bl	8000ad4 <__addsf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <calculate_EMA+0x204>)
 8002f38:	601a      	str	r2, [r3, #0]
    ema_receive.EMA_y = alpha * get_data[1] + (1 - alpha) * ema_receive.EMA_y;
 8002f3a:	4b58      	ldr	r3, [pc, #352]	; (800309c <calculate_EMA+0x1fc>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <calculate_EMA+0x200>)
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fecd 	bl	8000ce4 <__aeabi_fmul>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <calculate_EMA+0x200>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f58:	f7fd fdba 	bl	8000ad0 <__aeabi_fsub>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b50      	ldr	r3, [pc, #320]	; (80030a4 <calculate_EMA+0x204>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7fd febc 	bl	8000ce4 <__aeabi_fmul>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7fd fdaf 	bl	8000ad4 <__addsf3>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <calculate_EMA+0x204>)
 8002f7c:	605a      	str	r2, [r3, #4]
    ema_receive.EMA_z = alpha * get_data[2] + (1 - alpha) * ema_receive.EMA_z;
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <calculate_EMA+0x1fc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <calculate_EMA+0x200>)
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd feab 	bl	8000ce4 <__aeabi_fmul>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461c      	mov	r4, r3
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <calculate_EMA+0x200>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f9c:	f7fd fd98 	bl	8000ad0 <__aeabi_fsub>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <calculate_EMA+0x204>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7fd fe9a 	bl	8000ce4 <__aeabi_fmul>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fd fd8d 	bl	8000ad4 <__addsf3>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <calculate_EMA+0x204>)
 8002fc0:	609a      	str	r2, [r3, #8]
    ema_receive.EMA_press = alpha * get_data[3] + (1 - alpha) * ema_receive.EMA_press;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <calculate_EMA+0x1fc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a36      	ldr	r2, [pc, #216]	; (80030a0 <calculate_EMA+0x200>)
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fe89 	bl	8000ce4 <__aeabi_fmul>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <calculate_EMA+0x200>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002fe0:	f7fd fd76 	bl	8000ad0 <__aeabi_fsub>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <calculate_EMA+0x204>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7fd fe78 	bl	8000ce4 <__aeabi_fmul>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7fd fd6b 	bl	8000ad4 <__addsf3>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <calculate_EMA+0x204>)
 8003004:	60da      	str	r2, [r3, #12]

    count++;
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <calculate_EMA+0x208>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <calculate_EMA+0x208>)
 800300e:	6013      	str	r3, [r2, #0]
    if (count == 10) {  	// Verifica se o contador atingiu 10 para gravar EMA na FRAM
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <calculate_EMA+0x208>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b0a      	cmp	r3, #10
 8003016:	d138      	bne.n	800308a <calculate_EMA+0x1ea>
    	count = 0;
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <calculate_EMA+0x208>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

    	// Atualiza os valores de data_transf com os últimos valores de EMA
    	float *data_transf = malloc(4 * sizeof(float));
 800301e:	2010      	movs	r0, #16
 8003020:	f006 f826 	bl	8009070 <malloc>
 8003024:	4603      	mov	r3, r0
 8003026:	607b      	str	r3, [r7, #4]
    	data_transf[0] =  ema_receive.EMA_x;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <calculate_EMA+0x204>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]
    	data_transf[1] =  ema_receive.EMA_y;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <calculate_EMA+0x204>)
 8003036:	6852      	ldr	r2, [r2, #4]
 8003038:	601a      	str	r2, [r3, #0]
    	data_transf[2] =  ema_receive.EMA_z;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3308      	adds	r3, #8
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <calculate_EMA+0x204>)
 8003040:	6892      	ldr	r2, [r2, #8]
 8003042:	601a      	str	r2, [r3, #0]
    	data_transf[3] =  ema_receive.EMA_press;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	330c      	adds	r3, #12
 8003048:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <calculate_EMA+0x204>)
 800304a:	68d2      	ldr	r2, [r2, #12]
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3

        // float to 8 bits -> 4 bytes
    	memcpy(send_FRAM, &data_transf[0], sizeof(data_transf[0]));
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <calculate_EMA+0x20c>)
 8003056:	601a      	str	r2, [r3, #0]
    	memcpy(send_FRAM + sizeof(data_transf[0]), &data_transf[1], sizeof(data_transf[1]));
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <calculate_EMA+0x210>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6013      	str	r3, [r2, #0]
    	memcpy(send_FRAM + 2 * sizeof(data_transf[0]), &data_transf[2], sizeof(data_transf[2]));
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <calculate_EMA+0x214>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3308      	adds	r3, #8
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6013      	str	r3, [r2, #0]
    	memcpy(send_FRAM + 3 * sizeof(data_transf[0]), &data_transf[3], sizeof(data_transf[3]));
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <calculate_EMA+0x218>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	330c      	adds	r3, #12
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6013      	str	r3, [r2, #0]

    	// Libera a memória alocada por send_FRAM
    	free(data_transf);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f006 f802 	bl	8009080 <free>

    	// Envia os dados para gravaçao na FRAM
    	if (FRAM_state == FRAM_IDLE){
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <calculate_EMA+0x21c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <calculate_EMA+0x1ea>
    		FRAM_state = ENABLE_WRITE;
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <calculate_EMA+0x21c>)
 8003086:	2204      	movs	r2, #4
 8003088:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	bf00      	nop
 8003094:	200000e8 	.word	0x200000e8
 8003098:	20000004 	.word	0x20000004
 800309c:	200003e0 	.word	0x200003e0
 80030a0:	20000008 	.word	0x20000008
 80030a4:	200003c0 	.word	0x200003c0
 80030a8:	200003f0 	.word	0x200003f0
 80030ac:	200003d0 	.word	0x200003d0
 80030b0:	200003d4 	.word	0x200003d4
 80030b4:	200003d8 	.word	0x200003d8
 80030b8:	200003dc 	.word	0x200003dc
 80030bc:	20000159 	.word	0x20000159

080030c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_MspInit+0x5c>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_MspInit+0x5c>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6193      	str	r3, [r2, #24]
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_MspInit+0x5c>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_MspInit+0x5c>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_MspInit+0x5c>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_MspInit+0x5c>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_MspInit+0x60>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_MspInit+0x60>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	40010000 	.word	0x40010000

08003124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_I2C_MspInit+0x108>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d134      	bne.n	80031ae <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a39      	ldr	r2, [pc, #228]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800315c:	23c0      	movs	r3, #192	; 0xc0
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003160:	2312      	movs	r3, #18
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003164:	2303      	movs	r3, #3
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003168:	f107 0318 	add.w	r3, r7, #24
 800316c:	4619      	mov	r1, r3
 800316e:	4831      	ldr	r0, [pc, #196]	; (8003234 <HAL_I2C_MspInit+0x110>)
 8003170:	f000 fc4e 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 800317a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800317e:	61d3      	str	r3, [r2, #28]
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2101      	movs	r1, #1
 8003190:	201f      	movs	r0, #31
 8003192:	f000 fb4a 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003196:	201f      	movs	r0, #31
 8003198:	f000 fb63 	bl	8003862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2020      	movs	r0, #32
 80031a2:	f000 fb42 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80031a6:	2020      	movs	r0, #32
 80031a8:	f000 fb5b 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031ac:	e039      	b.n	8003222 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a21      	ldr	r2, [pc, #132]	; (8003238 <HAL_I2C_MspInit+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d134      	bne.n	8003222 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d6:	2312      	movs	r3, #18
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 0318 	add.w	r3, r7, #24
 80031e2:	4619      	mov	r1, r3
 80031e4:	4813      	ldr	r0, [pc, #76]	; (8003234 <HAL_I2C_MspInit+0x110>)
 80031e6:	f000 fc13 	bl	8003a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031f4:	61d3      	str	r3, [r2, #28]
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <HAL_I2C_MspInit+0x10c>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	2021      	movs	r0, #33	; 0x21
 8003208:	f000 fb0f 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800320c:	2021      	movs	r0, #33	; 0x21
 800320e:	f000 fb28 	bl	8003862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2022      	movs	r0, #34	; 0x22
 8003218:	f000 fb07 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800321c:	2022      	movs	r0, #34	; 0x22
 800321e:	f000 fb20 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3728      	adds	r7, #40	; 0x28
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40005400 	.word	0x40005400
 8003230:	40021000 	.word	0x40021000
 8003234:	40010c00 	.word	0x40010c00
 8003238:	40005800 	.word	0x40005800

0800323c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_SPI_MspInit+0x98>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d137      	bne.n	80032cc <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800325c:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 8003262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003266:	6193      	str	r3, [r2, #24]
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6193      	str	r3, [r2, #24]
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_SPI_MspInit+0x9c>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800328c:	23a0      	movs	r3, #160	; 0xa0
 800328e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4619      	mov	r1, r3
 800329e:	480f      	ldr	r0, [pc, #60]	; (80032dc <HAL_SPI_MspInit+0xa0>)
 80032a0:	f000 fbb6 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	4619      	mov	r1, r3
 80032b6:	4809      	ldr	r0, [pc, #36]	; (80032dc <HAL_SPI_MspInit+0xa0>)
 80032b8:	f000 fbaa 	bl	8003a10 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	2023      	movs	r0, #35	; 0x23
 80032c2:	f000 fab2 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032c6:	2023      	movs	r0, #35	; 0x23
 80032c8:	f000 facb 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032cc:	bf00      	nop
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013000 	.word	0x40013000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010800 	.word	0x40010800

080032e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_TIM_Base_MspInit+0x44>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d113      	bne.n	800331a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	61d3      	str	r3, [r2, #28]
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_TIM_Base_MspInit+0x48>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	201e      	movs	r0, #30
 8003310:	f000 fa8b 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003314:	201e      	movs	r0, #30
 8003316:	f000 faa4 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40000800 	.word	0x40000800
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0310 	add.w	r3, r7, #16
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_UART_MspInit+0x98>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d137      	bne.n	80033bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800334c:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 8003352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003356:	61d3      	str	r3, [r2, #28]
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6193      	str	r3, [r2, #24]
 8003370:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <HAL_UART_MspInit+0x9c>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800337c:	2304      	movs	r3, #4
 800337e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	4619      	mov	r1, r3
 800338e:	480f      	ldr	r0, [pc, #60]	; (80033cc <HAL_UART_MspInit+0xa0>)
 8003390:	f000 fb3e 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003394:	2308      	movs	r3, #8
 8003396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	4619      	mov	r1, r3
 80033a6:	4809      	ldr	r0, [pc, #36]	; (80033cc <HAL_UART_MspInit+0xa0>)
 80033a8:	f000 fb32 	bl	8003a10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	2026      	movs	r0, #38	; 0x26
 80033b2:	f000 fa3a 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b6:	2026      	movs	r0, #38	; 0x26
 80033b8:	f000 fa53 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40004400 	.word	0x40004400
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40010800 	.word	0x40010800

080033d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <NMI_Handler+0x4>

080033d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033da:	e7fe      	b.n	80033da <HardFault_Handler+0x4>

080033dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <MemManage_Handler+0x4>

080033e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <BusFault_Handler+0x4>

080033e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <UsageFault_Handler+0x4>

080033ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003416:	f000 f8f1 	bl	80035fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <TIM4_IRQHandler+0x10>)
 8003426:	f004 fe01 	bl	800802c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000314 	.word	0x20000314

08003434 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <I2C1_EV_IRQHandler+0x10>)
 800343a:	f001 f943 	bl	80046c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000214 	.word	0x20000214

08003448 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <I2C1_ER_IRQHandler+0x10>)
 800344e:	f001 faaa 	bl	80049a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000214 	.word	0x20000214

0800345c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <I2C2_EV_IRQHandler+0x10>)
 8003462:	f001 f92f 	bl	80046c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000268 	.word	0x20000268

08003470 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <I2C2_ER_IRQHandler+0x10>)
 8003476:	f001 fa96 	bl	80049a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000268 	.word	0x20000268

08003484 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <SPI1_IRQHandler+0x10>)
 800348a:	f004 f8cd 	bl	8007628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200002bc 	.word	0x200002bc

08003498 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <USART2_IRQHandler+0x10>)
 800349e:	f005 f9df 	bl	8008860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000035c 	.word	0x2000035c

080034ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b4:	4a14      	ldr	r2, [pc, #80]	; (8003508 <_sbrk+0x5c>)
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <_sbrk+0x60>)
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <_sbrk+0x64>)
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <_sbrk+0x68>)
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d207      	bcs.n	80034ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034dc:	f005 fd9e 	bl	800901c <__errno>
 80034e0:	4603      	mov	r3, r0
 80034e2:	220c      	movs	r2, #12
 80034e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	e009      	b.n	8003500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <_sbrk+0x64>)
 80034fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20005000 	.word	0x20005000
 800350c:	00000400 	.word	0x00000400
 8003510:	200003f4 	.word	0x200003f4
 8003514:	20000410 	.word	0x20000410

08003518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003526:	490d      	ldr	r1, [pc, #52]	; (800355c <LoopFillZerobss+0x16>)
                ldr r2, =_sidata
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800352c:	e002      	b.n	8003534 <LoopCopyDataInit>

0800352e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003532:	3304      	adds	r3, #4

08003534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003538:	d3f9      	bcc.n	800352e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800353c:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800353e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003540:	e001      	b.n	8003546 <LoopFillZerobss>

08003542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003544:	3204      	adds	r2, #4

08003546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003548:	d3fb      	bcc.n	8003542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800354a:	f7ff ffe5 	bl	8003518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800354e:	f005 fd6b 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003552:	f7ff f805 	bl	8002560 <main>
  bx lr
 8003556:	4770      	bx	lr
  ldr r0, =_sdata
 8003558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800355c:	2000007c 	.word	0x2000007c
                ldr r2, =_sidata
 8003560:	0800a0e0 	.word	0x0800a0e0
  ldr r2, =_sbss
 8003564:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003568:	2000040c 	.word	0x2000040c

0800356c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800356c:	e7fe      	b.n	800356c <ADC1_2_IRQHandler>
	...

08003570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_Init+0x28>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a07      	ldr	r2, [pc, #28]	; (8003598 <HAL_Init+0x28>)
 800357a:	f043 0310 	orr.w	r3, r3, #16
 800357e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003580:	2003      	movs	r0, #3
 8003582:	f000 f947 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003586:	2000      	movs	r0, #0
 8003588:	f000 f808 	bl	800359c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800358c:	f7ff fd98 	bl	80030c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000

0800359c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_InitTick+0x54>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_InitTick+0x58>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4619      	mov	r1, r3
 80035ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f95f 	bl	800387e <HAL_SYSTICK_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00e      	b.n	80035e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d80a      	bhi.n	80035e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d0:	2200      	movs	r2, #0
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	f000 f927 	bl	800382a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <HAL_InitTick+0x5c>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e000      	b.n	80035e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	20000014 	.word	0x20000014
 80035f8:	20000010 	.word	0x20000010

080035fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_IncTick+0x1c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_IncTick+0x20>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4413      	add	r3, r2
 800360c:	4a03      	ldr	r2, [pc, #12]	; (800361c <HAL_IncTick+0x20>)
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000014 	.word	0x20000014
 800361c:	200003f8 	.word	0x200003f8

08003620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b02      	ldr	r3, [pc, #8]	; (8003630 <HAL_GetTick+0x10>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	200003f8 	.word	0x200003f8

08003634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff fff0 	bl	8003620 <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d005      	beq.n	800365a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_Delay+0x44>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800365a:	bf00      	nop
 800365c:	f7ff ffe0 	bl	8003620 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d8f7      	bhi.n	800365c <HAL_Delay+0x28>
  {
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000014 	.word	0x20000014

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4906      	ldr	r1, [pc, #24]	; (8003714 <__NVIC_EnableIRQ+0x34>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff90 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff2d 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff42 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff90 	bl	800376c <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5f 	bl	8003718 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff35 	bl	80036e0 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d008      	beq.n	80038be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e020      	b.n	8003900 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 020e 	bic.w	r2, r2, #14
 80038cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
	...

0800390c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800391e:	2b02      	cmp	r3, #2
 8003920:	d005      	beq.n	800392e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e051      	b.n	80039d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 020e 	bic.w	r2, r2, #14
 800393c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_DMA_Abort_IT+0xd0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d029      	beq.n	80039ac <HAL_DMA_Abort_IT+0xa0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <HAL_DMA_Abort_IT+0xd4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <HAL_DMA_Abort_IT+0x9c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <HAL_DMA_Abort_IT+0xd8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01a      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x96>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <HAL_DMA_Abort_IT+0xdc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d012      	beq.n	800399c <HAL_DMA_Abort_IT+0x90>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <HAL_DMA_Abort_IT+0xe0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00a      	beq.n	8003996 <HAL_DMA_Abort_IT+0x8a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_DMA_Abort_IT+0xe4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d102      	bne.n	8003990 <HAL_DMA_Abort_IT+0x84>
 800398a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800398e:	e00e      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 8003990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003994:	e00b      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 8003996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399a:	e008      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	e005      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 80039a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a6:	e002      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 80039a8:	2310      	movs	r3, #16
 80039aa:	e000      	b.n	80039ae <HAL_DMA_Abort_IT+0xa2>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <HAL_DMA_Abort_IT+0xe8>)
 80039b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
    } 
  }
  return status;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40020008 	.word	0x40020008
 80039e0:	4002001c 	.word	0x4002001c
 80039e4:	40020030 	.word	0x40020030
 80039e8:	40020044 	.word	0x40020044
 80039ec:	40020058 	.word	0x40020058
 80039f0:	4002006c 	.word	0x4002006c
 80039f4:	40020000 	.word	0x40020000

080039f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b08b      	sub	sp, #44	; 0x2c
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a22:	e169      	b.n	8003cf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a24:	2201      	movs	r2, #1
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	f040 8158 	bne.w	8003cf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a9a      	ldr	r2, [pc, #616]	; (8003cb0 <HAL_GPIO_Init+0x2a0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d05e      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
 8003a4c:	4a98      	ldr	r2, [pc, #608]	; (8003cb0 <HAL_GPIO_Init+0x2a0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d875      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a52:	4a98      	ldr	r2, [pc, #608]	; (8003cb4 <HAL_GPIO_Init+0x2a4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d058      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
 8003a58:	4a96      	ldr	r2, [pc, #600]	; (8003cb4 <HAL_GPIO_Init+0x2a4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d86f      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a5e:	4a96      	ldr	r2, [pc, #600]	; (8003cb8 <HAL_GPIO_Init+0x2a8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d052      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
 8003a64:	4a94      	ldr	r2, [pc, #592]	; (8003cb8 <HAL_GPIO_Init+0x2a8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d869      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a6a:	4a94      	ldr	r2, [pc, #592]	; (8003cbc <HAL_GPIO_Init+0x2ac>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04c      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
 8003a70:	4a92      	ldr	r2, [pc, #584]	; (8003cbc <HAL_GPIO_Init+0x2ac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d863      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a76:	4a92      	ldr	r2, [pc, #584]	; (8003cc0 <HAL_GPIO_Init+0x2b0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d046      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
 8003a7c:	4a90      	ldr	r2, [pc, #576]	; (8003cc0 <HAL_GPIO_Init+0x2b0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d85d      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a82:	2b12      	cmp	r3, #18
 8003a84:	d82a      	bhi.n	8003adc <HAL_GPIO_Init+0xcc>
 8003a86:	2b12      	cmp	r3, #18
 8003a88:	d859      	bhi.n	8003b3e <HAL_GPIO_Init+0x12e>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_GPIO_Init+0x80>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003b0b 	.word	0x08003b0b
 8003a94:	08003ae5 	.word	0x08003ae5
 8003a98:	08003af7 	.word	0x08003af7
 8003a9c:	08003b39 	.word	0x08003b39
 8003aa0:	08003b3f 	.word	0x08003b3f
 8003aa4:	08003b3f 	.word	0x08003b3f
 8003aa8:	08003b3f 	.word	0x08003b3f
 8003aac:	08003b3f 	.word	0x08003b3f
 8003ab0:	08003b3f 	.word	0x08003b3f
 8003ab4:	08003b3f 	.word	0x08003b3f
 8003ab8:	08003b3f 	.word	0x08003b3f
 8003abc:	08003b3f 	.word	0x08003b3f
 8003ac0:	08003b3f 	.word	0x08003b3f
 8003ac4:	08003b3f 	.word	0x08003b3f
 8003ac8:	08003b3f 	.word	0x08003b3f
 8003acc:	08003b3f 	.word	0x08003b3f
 8003ad0:	08003b3f 	.word	0x08003b3f
 8003ad4:	08003aed 	.word	0x08003aed
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	4a79      	ldr	r2, [pc, #484]	; (8003cc4 <HAL_GPIO_Init+0x2b4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ae2:	e02c      	b.n	8003b3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	623b      	str	r3, [r7, #32]
          break;
 8003aea:	e029      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	623b      	str	r3, [r7, #32]
          break;
 8003af4:	e024      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	3308      	adds	r3, #8
 8003afc:	623b      	str	r3, [r7, #32]
          break;
 8003afe:	e01f      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	330c      	adds	r3, #12
 8003b06:	623b      	str	r3, [r7, #32]
          break;
 8003b08:	e01a      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b12:	2304      	movs	r3, #4
 8003b14:	623b      	str	r3, [r7, #32]
          break;
 8003b16:	e013      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b20:	2308      	movs	r3, #8
 8003b22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	611a      	str	r2, [r3, #16]
          break;
 8003b2a:	e009      	b.n	8003b40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	615a      	str	r2, [r3, #20]
          break;
 8003b36:	e003      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
          break;
 8003b3c:	e000      	b.n	8003b40 <HAL_GPIO_Init+0x130>
          break;
 8003b3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d801      	bhi.n	8003b4a <HAL_GPIO_Init+0x13a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_Init+0x13e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2bff      	cmp	r3, #255	; 0xff
 8003b54:	d802      	bhi.n	8003b5c <HAL_GPIO_Init+0x14c>
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	e002      	b.n	8003b62 <HAL_GPIO_Init+0x152>
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3b08      	subs	r3, #8
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	210f      	movs	r1, #15
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80b1 	beq.w	8003cf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b90:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	4a4c      	ldr	r2, [pc, #304]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6193      	str	r3, [r2, #24]
 8003b9c:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_GPIO_Init+0x2b8>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ba8:	4a48      	ldr	r2, [pc, #288]	; (8003ccc <HAL_GPIO_Init+0x2bc>)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <HAL_GPIO_Init+0x2c0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_GPIO_Init+0x1ec>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <HAL_GPIO_Init+0x2c4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00d      	beq.n	8003bf8 <HAL_GPIO_Init+0x1e8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <HAL_GPIO_Init+0x2c8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e4>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a3d      	ldr	r2, [pc, #244]	; (8003cdc <HAL_GPIO_Init+0x2cc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_GPIO_Init+0x1e0>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e006      	b.n	8003bfe <HAL_GPIO_Init+0x1ee>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e004      	b.n	8003bfe <HAL_GPIO_Init+0x1ee>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e002      	b.n	8003bfe <HAL_GPIO_Init+0x1ee>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_GPIO_Init+0x1ee>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	f002 0203 	and.w	r2, r2, #3
 8003c04:	0092      	lsls	r2, r2, #2
 8003c06:	4093      	lsls	r3, r2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c0e:	492f      	ldr	r1, [pc, #188]	; (8003ccc <HAL_GPIO_Init+0x2bc>)
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	492c      	ldr	r1, [pc, #176]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c36:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	4928      	ldr	r1, [pc, #160]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c50:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	4922      	ldr	r1, [pc, #136]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	491e      	ldr	r1, [pc, #120]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d006      	beq.n	8003c86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4918      	ldr	r1, [pc, #96]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]
 8003c84:	e006      	b.n	8003c94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	4914      	ldr	r1, [pc, #80]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d021      	beq.n	8003ce4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	490e      	ldr	r1, [pc, #56]	; (8003ce0 <HAL_GPIO_Init+0x2d0>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60cb      	str	r3, [r1, #12]
 8003cac:	e021      	b.n	8003cf2 <HAL_GPIO_Init+0x2e2>
 8003cae:	bf00      	nop
 8003cb0:	10320000 	.word	0x10320000
 8003cb4:	10310000 	.word	0x10310000
 8003cb8:	10220000 	.word	0x10220000
 8003cbc:	10210000 	.word	0x10210000
 8003cc0:	10120000 	.word	0x10120000
 8003cc4:	10110000 	.word	0x10110000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	40010c00 	.word	0x40010c00
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_GPIO_Init+0x304>)
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	4909      	ldr	r1, [pc, #36]	; (8003d14 <HAL_GPIO_Init+0x304>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f47f ae8e 	bne.w	8003a24 <HAL_GPIO_Init+0x14>
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	372c      	adds	r7, #44	; 0x2c
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e001      	b.n	8003d3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	807b      	strh	r3, [r7, #2]
 8003d52:	4613      	mov	r3, r2
 8003d54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d56:	787b      	ldrb	r3, [r7, #1]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d62:	e003      	b.n	8003d6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d64:	887b      	ldrh	r3, [r7, #2]
 8003d66:	041a      	lsls	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e12b      	b.n	8003fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff f9c0 	bl	8003124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f003 f862 	bl	8006ea4 <HAL_RCC_GetPCLK1Freq>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4a81      	ldr	r2, [pc, #516]	; (8003fec <HAL_I2C_Init+0x274>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d807      	bhi.n	8003dfc <HAL_I2C_Init+0x84>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a80      	ldr	r2, [pc, #512]	; (8003ff0 <HAL_I2C_Init+0x278>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	bf94      	ite	ls
 8003df4:	2301      	movls	r3, #1
 8003df6:	2300      	movhi	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e006      	b.n	8003e0a <HAL_I2C_Init+0x92>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a7d      	ldr	r2, [pc, #500]	; (8003ff4 <HAL_I2C_Init+0x27c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bf94      	ite	ls
 8003e04:	2301      	movls	r3, #1
 8003e06:	2300      	movhi	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0e7      	b.n	8003fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a78      	ldr	r2, [pc, #480]	; (8003ff8 <HAL_I2C_Init+0x280>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0c9b      	lsrs	r3, r3, #18
 8003e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a6a      	ldr	r2, [pc, #424]	; (8003fec <HAL_I2C_Init+0x274>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d802      	bhi.n	8003e4c <HAL_I2C_Init+0xd4>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	e009      	b.n	8003e60 <HAL_I2C_Init+0xe8>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	4a69      	ldr	r2, [pc, #420]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	3301      	adds	r3, #1
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	495c      	ldr	r1, [pc, #368]	; (8003fec <HAL_I2C_Init+0x274>)
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d819      	bhi.n	8003eb4 <HAL_I2C_Init+0x13c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e59      	subs	r1, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e8e:	1c59      	adds	r1, r3, #1
 8003e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e94:	400b      	ands	r3, r1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_I2C_Init+0x138>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1e59      	subs	r1, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	e051      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	e04f      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <HAL_I2C_Init+0x168>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e012      	b.n	8003f06 <HAL_I2C_Init+0x18e>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e58      	subs	r0, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	0099      	lsls	r1, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x196>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e022      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10e      	bne.n	8003f34 <HAL_I2C_Init+0x1bc>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1e58      	subs	r0, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	440b      	add	r3, r1
 8003f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	e00f      	b.n	8003f54 <HAL_I2C_Init+0x1dc>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	0099      	lsls	r1, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	6809      	ldr	r1, [r1, #0]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6911      	ldr	r1, [r2, #16]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68d2      	ldr	r2, [r2, #12]
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	000186a0 	.word	0x000186a0
 8003ff0:	001e847f 	.word	0x001e847f
 8003ff4:	003d08ff 	.word	0x003d08ff
 8003ff8:	431bde83 	.word	0x431bde83
 8003ffc:	10624dd3 	.word	0x10624dd3

08004000 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	460b      	mov	r3, r1
 8004014:	813b      	strh	r3, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800401a:	f7ff fb01 	bl	8003620 <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	f040 80d9 	bne.w	80041e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	2319      	movs	r3, #25
 8004034:	2201      	movs	r2, #1
 8004036:	496d      	ldr	r1, [pc, #436]	; (80041ec <HAL_I2C_Mem_Write+0x1ec>)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f002 f937 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	e0cc      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_I2C_Mem_Write+0x56>
 8004052:	2302      	movs	r3, #2
 8004054:	e0c5      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d007      	beq.n	800407c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a4d      	ldr	r2, [pc, #308]	; (80041f0 <HAL_I2C_Mem_Write+0x1f0>)
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040be:	88f8      	ldrh	r0, [r7, #6]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4603      	mov	r3, r0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 fec6 	bl	8005e60 <I2C_RequestMemoryWrite>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d052      	beq.n	8004180 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e081      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f002 f9b8 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d107      	bne.n	8004106 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e06b      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d11b      	bne.n	8004180 <HAL_I2C_Mem_Write+0x180>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1aa      	bne.n	80040de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f002 f9a4 	bl	80064da <I2C_WaitOnBTFFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b04      	cmp	r3, #4
 800419e:	d107      	bne.n	80041b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e016      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	00100002 	.word	0x00100002
 80041f0:	ffff0000 	.word	0xffff0000

080041f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004212:	f7ff fa05 	bl	8003620 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	f040 8244 	bne.w	80046ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2319      	movs	r3, #25
 800422c:	2201      	movs	r2, #1
 800422e:	4982      	ldr	r1, [pc, #520]	; (8004438 <HAL_I2C_Mem_Read+0x244>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f002 f83b 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	e237      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_I2C_Mem_Read+0x5a>
 800424a:	2302      	movs	r3, #2
 800424c:	e230      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d007      	beq.n	8004274 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2222      	movs	r2, #34	; 0x22
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a62      	ldr	r2, [pc, #392]	; (800443c <HAL_I2C_Mem_Read+0x248>)
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042b6:	88f8      	ldrh	r0, [r7, #6]
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f001 fe60 	bl	8005f8c <I2C_RequestMemoryRead>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1ec      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d113      	bne.n	8004306 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e1c0      	b.n	8004688 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	2b01      	cmp	r3, #1
 800430c:	d11e      	bne.n	800434c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800431e:	b672      	cpsid	i
}
 8004320:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004348:	b662      	cpsie	i
}
 800434a:	e035      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11e      	bne.n	8004392 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
}
 8004366:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800438e:	b662      	cpsie	i
}
 8004390:	e012      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80043b8:	e166      	b.n	8004688 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	2b03      	cmp	r3, #3
 80043c0:	f200 811f 	bhi.w	8004602 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d123      	bne.n	8004414 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f002 f8f5 	bl	80065c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e167      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004412:	e139      	b.n	8004688 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	2b02      	cmp	r3, #2
 800441a:	d152      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2200      	movs	r2, #0
 8004424:	4906      	ldr	r1, [pc, #24]	; (8004440 <HAL_I2C_Mem_Read+0x24c>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f001 ff40 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e13c      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000
 8004440:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800448a:	b662      	cpsie	i
}
 800448c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c0:	e0e2      	b.n	8004688 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2200      	movs	r2, #0
 80044ca:	497b      	ldr	r1, [pc, #492]	; (80046b8 <HAL_I2C_Mem_Read+0x4c4>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f001 feed 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0e9      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ec:	b672      	cpsid	i
}
 80044ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004522:	4b66      	ldr	r3, [pc, #408]	; (80046bc <HAL_I2C_Mem_Read+0x4c8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	4a65      	ldr	r2, [pc, #404]	; (80046c0 <HAL_I2C_Mem_Read+0x4cc>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a1a      	lsrs	r2, r3, #8
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00da      	lsls	r2, r3, #3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	3b01      	subs	r3, #1
 8004540:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d118      	bne.n	800457a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800456a:	b662      	cpsie	i
}
 800456c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e09a      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d1d9      	bne.n	800453c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045ca:	b662      	cpsie	i
}
 80045cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e042      	b.n	8004688 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 ffda 	bl	80065c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e04c      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d118      	bne.n	8004688 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f ae94 	bne.w	80043ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010004 	.word	0x00010004
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	14f8b589 	.word	0x14f8b589

080046c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d003      	beq.n	80046fc <HAL_I2C_EV_IRQHandler+0x38>
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	f040 80c1 	bne.w	800487e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <HAL_I2C_EV_IRQHandler+0x6e>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800471c:	d003      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0x62>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004724:	d101      	bne.n	800472a <HAL_I2C_EV_IRQHandler+0x66>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_I2C_EV_IRQHandler+0x68>
 800472a:	2300      	movs	r3, #0
 800472c:	2b01      	cmp	r3, #1
 800472e:	f000 8132 	beq.w	8004996 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0x92>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	0a5b      	lsrs	r3, r3, #9
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 ffbd 	bl	80066c8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fd65 	bl	800521e <I2C_Master_SB>
 8004754:	e092      	b.n	800487c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	08db      	lsrs	r3, r3, #3
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0xb2>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fdda 	bl	8005328 <I2C_Master_ADD10>
 8004774:	e082      	b.n	800487c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0xd2>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fdf3 	bl	800537a <I2C_Master_ADDR>
 8004794:	e072      	b.n	800487c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03b      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b0:	f000 80f3 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	09db      	lsrs	r3, r3, #7
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00f      	beq.n	80047e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f9df 	bl	8004b9c <I2C_MasterTransmit_TXE>
 80047de:	e04d      	b.n	800487c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80d6 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	0a5b      	lsrs	r3, r3, #9
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80cf 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b21      	cmp	r3, #33	; 0x21
 8004800:	d103      	bne.n	800480a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa66 	bl	8004cd4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004808:	e0c7      	b.n	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	f040 80c4 	bne.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fad4 	bl	8004dc0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004818:	e0bf      	b.n	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	f000 80b7 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00f      	beq.n	8004858 <HAL_I2C_EV_IRQHandler+0x194>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_I2C_EV_IRQHandler+0x194>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb49 	bl	8004ee8 <I2C_MasterReceive_RXNE>
 8004856:	e011      	b.n	800487c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 809a 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0a5b      	lsrs	r3, r3, #9
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8093 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fbe8 	bl	800504a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487a:	e08e      	b.n	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
 800487c:	e08d      	b.n	800499a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e007      	b.n	80048a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0a5b      	lsrs	r3, r3, #9
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00c      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 ffac 	bl	8005828 <I2C_Slave_ADDR>
 80048d0:	e066      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	0a5b      	lsrs	r3, r3, #9
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 ffe6 	bl	80058bc <I2C_Slave_STOPF>
 80048f0:	e056      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048f2:	7bbb      	ldrb	r3, [r7, #14]
 80048f4:	2b21      	cmp	r3, #33	; 0x21
 80048f6:	d002      	beq.n	80048fe <HAL_I2C_EV_IRQHandler+0x23a>
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	2b29      	cmp	r3, #41	; 0x29
 80048fc:	d125      	bne.n	800494a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	09db      	lsrs	r3, r3, #7
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00f      	beq.n	800492a <HAL_I2C_EV_IRQHandler+0x266>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	0a9b      	lsrs	r3, r3, #10
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_I2C_EV_IRQHandler+0x266>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fec4 	bl	80056b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004928:	e039      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d033      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x2da>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	0a5b      	lsrs	r3, r3, #9
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d02d      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fef1 	bl	800572a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004948:	e029      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	0a9b      	lsrs	r3, r3, #10
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fefb 	bl	800576a <I2C_SlaveReceive_RXNE>
 8004974:	e014      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	0a5b      	lsrs	r3, r3, #9
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 ff29 	bl	80057e6 <I2C_SlaveReceive_BTF>
 8004994:	e004      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800499e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b08a      	sub	sp, #40	; 0x28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_I2C_ER_IRQHandler+0x5e>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x88>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f043 0302 	orr.w	r3, r3, #2
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	0a9b      	lsrs	r3, r3, #10
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03f      	beq.n	8004aba <HAL_I2C_ER_IRQHandler+0x114>
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d039      	beq.n	8004aba <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004a46:	7efb      	ldrb	r3, [r7, #27]
 8004a48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a60:	7ebb      	ldrb	r3, [r7, #26]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d112      	bne.n	8004a8c <HAL_I2C_ER_IRQHandler+0xe6>
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10f      	bne.n	8004a8c <HAL_I2C_ER_IRQHandler+0xe6>
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	2b21      	cmp	r3, #33	; 0x21
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b29      	cmp	r3, #41	; 0x29
 8004a76:	d005      	beq.n	8004a84 <HAL_I2C_ER_IRQHandler+0xde>
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b28      	cmp	r3, #40	; 0x28
 8004a7c:	d106      	bne.n	8004a8c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b21      	cmp	r3, #33	; 0x21
 8004a82:	d103      	bne.n	8004a8c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f001 f849 	bl	8005b1c <I2C_Slave_AF>
 8004a8a:	e016      	b.n	8004aba <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a9e:	7efb      	ldrb	r3, [r7, #27]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d002      	beq.n	8004aaa <HAL_I2C_ER_IRQHandler+0x104>
 8004aa4:	7efb      	ldrb	r3, [r7, #27]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d107      	bne.n	8004aba <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	0adb      	lsrs	r3, r3, #11
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00e      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0x13e>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f043 0308 	orr.w	r3, r3, #8
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ae2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f880 	bl	8005bfc <I2C_ITError>
  }
}
 8004afc:	bf00      	nop
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d150      	bne.n	8004c64 <I2C_MasterTransmit_TXE+0xc8>
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b21      	cmp	r3, #33	; 0x21
 8004bc6:	d14d      	bne.n	8004c64 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d01d      	beq.n	8004c0a <I2C_MasterTransmit_TXE+0x6e>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d01a      	beq.n	8004c0a <I2C_MasterTransmit_TXE+0x6e>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bda:	d016      	beq.n	8004c0a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2211      	movs	r2, #17
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff7e 	bl	8004b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c08:	e060      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c18:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c28:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d107      	bne.n	8004c54 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff93 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c52:	e03b      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff51 	bl	8004b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c62:	e033      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b21      	cmp	r3, #33	; 0x21
 8004c68:	d005      	beq.n	8004c76 <I2C_MasterTransmit_TXE+0xda>
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d12d      	bne.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b22      	cmp	r3, #34	; 0x22
 8004c74:	d12a      	bne.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d108      	bne.n	8004c92 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c90:	e01c      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d103      	bne.n	8004ca6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f88e 	bl	8004dc0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ca4:	e012      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cca:	e7ff      	b.n	8004ccc <I2C_MasterTransmit_TXE+0x130>
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b21      	cmp	r3, #33	; 0x21
 8004cec:	d164      	bne.n	8004db8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d1c:	e04c      	b.n	8004db8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d01d      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d01a      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d30:	d016      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2211      	movs	r2, #17
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fed3 	bl	8004b04 <HAL_I2C_MasterTxCpltCallback>
}
 8004d5e:	e02b      	b.n	8004db8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d107      	bne.n	8004daa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fee8 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
}
 8004da8:	e006      	b.n	8004db8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fea6 	bl	8004b04 <HAL_I2C_MasterTxCpltCallback>
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11d      	bne.n	8004e14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10b      	bne.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004df6:	e073      	b.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	121b      	asrs	r3, r3, #8
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e12:	e065      	b.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d10b      	bne.n	8004e34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e32:	e055      	b.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d151      	bne.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b22      	cmp	r3, #34	; 0x22
 8004e40:	d10d      	bne.n	8004e5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e5c:	e040      	b.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b21      	cmp	r3, #33	; 0x21
 8004e6c:	d112      	bne.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e92:	e025      	b.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d120      	bne.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b21      	cmp	r3, #33	; 0x21
 8004ea2:	d11d      	bne.n	8004ee0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eb2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe4c 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b22      	cmp	r3, #34	; 0x22
 8004efa:	f040 80a2 	bne.w	8005042 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d921      	bls.n	8004f50 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	f040 8082 	bne.w	8005042 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f4e:	e078      	b.n	8005042 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d074      	beq.n	8005042 <I2C_MasterReceive_RXNE+0x15a>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d002      	beq.n	8004f64 <I2C_MasterReceive_RXNE+0x7c>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d16e      	bne.n	8005042 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 faf9 	bl	800655c <I2C_WaitOnSTOPRequestThroughIT>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d142      	bne.n	8004ff6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d10a      	bne.n	8004fe0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc fa3d 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 8004fde:	e030      	b.n	8005042 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2212      	movs	r2, #18
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fd91 	bl	8004b16 <HAL_I2C_MasterRxCpltCallback>
}
 8004ff4:	e025      	b.n	8005042 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005004:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fc fb13 	bl	8001668 <HAL_I2C_ErrorCallback>
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b04      	cmp	r3, #4
 8005060:	d11b      	bne.n	800509a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005070:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005098:	e0bd      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d129      	bne.n	80050f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00a      	beq.n	80050d0 <I2C_MasterReceive_BTF+0x86>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d007      	beq.n	80050d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f6:	e08e      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d176      	bne.n	80051f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d002      	beq.n	800510e <I2C_MasterReceive_BTF+0xc4>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b10      	cmp	r3, #16
 800510c:	d108      	bne.n	8005120 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e019      	b.n	8005154 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d002      	beq.n	800512c <I2C_MasterReceive_BTF+0xe2>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d108      	bne.n	800513e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e00a      	b.n	8005154 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b10      	cmp	r3, #16
 8005142:	d007      	beq.n	8005154 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d10a      	bne.n	80051da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fc f940 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 80051d8:	e01d      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2212      	movs	r2, #18
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fc94 	bl	8004b16 <HAL_I2C_MasterRxCpltCallback>
}
 80051ee:	e012      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d117      	bne.n	8005262 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800524a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800524c:	e067      	b.n	800531e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]
}
 8005260:	e05d      	b.n	800531e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526a:	d133      	bne.n	80052d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b21      	cmp	r3, #33	; 0x21
 8005276:	d109      	bne.n	800528c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005288:	611a      	str	r2, [r3, #16]
 800528a:	e008      	b.n	800529e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <I2C_Master_SB+0x92>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d032      	beq.n	800531e <I2C_Master_SB+0x100>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02d      	beq.n	800531e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d0:	605a      	str	r2, [r3, #4]
}
 80052d2:	e024      	b.n	800531e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	11db      	asrs	r3, r3, #7
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0306 	and.w	r3, r3, #6
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f063 030f 	orn	r3, r3, #15
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	611a      	str	r2, [r3, #16]
}
 80052f8:	e011      	b.n	800531e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10d      	bne.n	800531e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	b29b      	uxth	r3, r3
 8005308:	11db      	asrs	r3, r3, #7
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 0306 	and.w	r3, r3, #6
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f063 030e 	orn	r3, r3, #14
 8005316:	b2da      	uxtb	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <I2C_Master_ADD10+0x26>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <I2C_Master_ADD10+0x48>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536e:	605a      	str	r2, [r3, #4]
  }
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800537a:	b480      	push	{r7}
 800537c:	b091      	sub	sp, #68	; 0x44
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b22      	cmp	r3, #34	; 0x22
 80053a2:	f040 8174 	bne.w	800568e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <I2C_Master_ADDR+0x54>
 80053ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d10b      	bne.n	80053ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b6:	2300      	movs	r3, #0
 80053b8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	e16b      	b.n	80056a6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11d      	bne.n	8005412 <I2C_Master_ADDR+0x98>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053de:	d118      	bne.n	8005412 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005404:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	651a      	str	r2, [r3, #80]	; 0x50
 8005410:	e149      	b.n	80056a6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d113      	bne.n	8005444 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541c:	2300      	movs	r3, #0
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e120      	b.n	8005686 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	f040 808a 	bne.w	8005564 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005456:	d137      	bne.n	80054c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005466:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d113      	bne.n	80054a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005486:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	e0f2      	b.n	8005686 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	2300      	movs	r3, #0
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e0de      	b.n	8005686 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d02e      	beq.n	800552c <I2C_Master_ADDR+0x1b2>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d02b      	beq.n	800552c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	2b12      	cmp	r3, #18
 80054d8:	d102      	bne.n	80054e0 <I2C_Master_ADDR+0x166>
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d125      	bne.n	800552c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d00e      	beq.n	8005504 <I2C_Master_ADDR+0x18a>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d00b      	beq.n	8005504 <I2C_Master_ADDR+0x18a>
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d008      	beq.n	8005504 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e007      	b.n	8005514 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	e0ac      	b.n	8005686 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e090      	b.n	8005686 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d158      	bne.n	8005620 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b04      	cmp	r3, #4
 8005572:	d021      	beq.n	80055b8 <I2C_Master_ADDR+0x23e>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b02      	cmp	r3, #2
 8005578:	d01e      	beq.n	80055b8 <I2C_Master_ADDR+0x23e>
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	2b10      	cmp	r3, #16
 800557e:	d01b      	beq.n	80055b8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e012      	b.n	80055de <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d14b      	bne.n	8005686 <I2C_Master_ADDR+0x30c>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f4:	d00b      	beq.n	800560e <I2C_Master_ADDR+0x294>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d008      	beq.n	800560e <I2C_Master_ADDR+0x294>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d005      	beq.n	800560e <I2C_Master_ADDR+0x294>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b10      	cmp	r3, #16
 8005606:	d002      	beq.n	800560e <I2C_Master_ADDR+0x294>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	2b20      	cmp	r3, #32
 800560c:	d13b      	bne.n	8005686 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	e032      	b.n	8005686 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800562e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800563a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563e:	d117      	bne.n	8005670 <I2C_Master_ADDR+0x2f6>
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005646:	d00b      	beq.n	8005660 <I2C_Master_ADDR+0x2e6>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	2b01      	cmp	r3, #1
 800564c:	d008      	beq.n	8005660 <I2C_Master_ADDR+0x2e6>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b08      	cmp	r3, #8
 8005652:	d005      	beq.n	8005660 <I2C_Master_ADDR+0x2e6>
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	2b10      	cmp	r3, #16
 8005658:	d002      	beq.n	8005660 <I2C_Master_ADDR+0x2e6>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	2b20      	cmp	r3, #32
 800565e:	d107      	bne.n	8005670 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800566e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800568c:	e00b      	b.n	80056a6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
}
 80056a4:	e7ff      	b.n	80056a6 <I2C_Master_ADDR+0x32c>
 80056a6:	bf00      	nop
 80056a8:	3744      	adds	r7, #68	; 0x44
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d02b      	beq.n	8005722 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d114      	bne.n	8005722 <I2C_SlaveTransmit_TXE+0x72>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b29      	cmp	r3, #41	; 0x29
 80056fc:	d111      	bne.n	8005722 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2221      	movs	r2, #33	; 0x21
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2228      	movs	r2, #40	; 0x28
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fa03 	bl	8004b28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d011      	beq.n	8005760 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02c      	beq.n	80057de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d114      	bne.n	80057de <I2C_SlaveReceive_RXNE+0x74>
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b2a      	cmp	r3, #42	; 0x2a
 80057b8:	d111      	bne.n	80057de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2222      	movs	r2, #34	; 0x22
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2228      	movs	r2, #40	; 0x28
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff f9ae 	bl	8004b3a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005842:	2b28      	cmp	r3, #40	; 0x28
 8005844:	d127      	bne.n	8005896 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005854:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	09db      	lsrs	r3, r3, #7
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	81bb      	strh	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005888:	89ba      	ldrh	r2, [r7, #12]
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff f95c 	bl	8004b4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005894:	e00e      	b.n	80058b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	d172      	bne.n	8005a00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b22      	cmp	r3, #34	; 0x22
 800591e:	d002      	beq.n	8005926 <I2C_Slave_STOPF+0x6a>
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b2a      	cmp	r3, #42	; 0x2a
 8005924:	d135      	bne.n	8005992 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005958:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe f84a 	bl	80039f8 <HAL_DMA_GetState>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d049      	beq.n	80059fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	4a69      	ldr	r2, [pc, #420]	; (8005b14 <I2C_Slave_STOPF+0x258>)
 8005970:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd ffc8 	bl	800390c <HAL_DMA_Abort_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03d      	beq.n	80059fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800598c:	4610      	mov	r0, r2
 800598e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005990:	e035      	b.n	80059fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0204 	orr.w	r2, r3, #4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f814 	bl	80039f8 <HAL_DMA_GetState>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d014      	beq.n	8005a00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	4a4e      	ldr	r2, [pc, #312]	; (8005b14 <I2C_Slave_STOPF+0x258>)
 80059dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd ff92 	bl	800390c <HAL_DMA_Abort_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
 80059fc:	e000      	b.n	8005a00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03e      	beq.n	8005a88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d112      	bne.n	8005a3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d112      	bne.n	8005a72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	f043 0204 	orr.w	r2, r3, #4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8b3 	bl	8005bfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a96:	e039      	b.n	8005b0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9c:	d109      	bne.n	8005ab2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2228      	movs	r2, #40	; 0x28
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff f844 	bl	8004b3a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b28      	cmp	r3, #40	; 0x28
 8005abc:	d111      	bne.n	8005ae2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <I2C_Slave_STOPF+0x25c>)
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff f843 	bl	8004b66 <HAL_I2C_ListenCpltCallback>
}
 8005ae0:	e014      	b.n	8005b0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	2b22      	cmp	r3, #34	; 0x22
 8005ae8:	d002      	beq.n	8005af0 <I2C_Slave_STOPF+0x234>
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b22      	cmp	r3, #34	; 0x22
 8005aee:	d10d      	bne.n	8005b0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff f817 	bl	8004b3a <HAL_I2C_SlaveRxCpltCallback>
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0800615d 	.word	0x0800615d
 8005b18:	ffff0000 	.word	0xffff0000

08005b1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d002      	beq.n	8005b3e <I2C_Slave_AF+0x22>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d129      	bne.n	8005b92 <I2C_Slave_AF+0x76>
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b28      	cmp	r3, #40	; 0x28
 8005b42:	d126      	bne.n	8005b92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <I2C_Slave_AF+0xdc>)
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fe ffeb 	bl	8004b66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b90:	e02e      	b.n	8005bf0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b21      	cmp	r3, #33	; 0x21
 8005b96:	d126      	bne.n	8005be6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <I2C_Slave_AF+0xdc>)
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2221      	movs	r2, #33	; 0x21
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bcc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bdc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe ffa2 	bl	8004b28 <HAL_I2C_SlaveTxCpltCallback>
}
 8005be4:	e004      	b.n	8005bf0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bee:	615a      	str	r2, [r3, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	ffff0000 	.word	0xffff0000

08005bfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c14:	7bbb      	ldrb	r3, [r7, #14]
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d002      	beq.n	8005c20 <I2C_ITError+0x24>
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d10a      	bne.n	8005c36 <I2C_ITError+0x3a>
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b22      	cmp	r3, #34	; 0x22
 8005c24:	d107      	bne.n	8005c36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c3c:	2b28      	cmp	r3, #40	; 0x28
 8005c3e:	d107      	bne.n	8005c50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2228      	movs	r2, #40	; 0x28
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c4e:	e015      	b.n	8005c7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d00a      	beq.n	8005c76 <I2C_ITError+0x7a>
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b60      	cmp	r3, #96	; 0x60
 8005c64:	d007      	beq.n	8005c76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8a:	d161      	bne.n	8005d50 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d020      	beq.n	8005cea <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	4a6a      	ldr	r2, [pc, #424]	; (8005e58 <I2C_ITError+0x25c>)
 8005cae:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fd fe29 	bl	800390c <HAL_DMA_Abort_IT>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8089 	beq.w	8005dd4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	e074      	b.n	8005dd4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	4a5a      	ldr	r2, [pc, #360]	; (8005e58 <I2C_ITError+0x25c>)
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fd fe08 	bl	800390c <HAL_DMA_Abort_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d068      	beq.n	8005dd4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d10b      	bne.n	8005d28 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4798      	blx	r3
 8005d4e:	e041      	b.n	8005dd4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b60      	cmp	r3, #96	; 0x60
 8005d5a:	d125      	bne.n	8005da8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d10b      	bne.n	8005d90 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fe fef2 	bl	8004b8a <HAL_I2C_AbortCpltCallback>
 8005da6:	e015      	b.n	8005dd4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d10b      	bne.n	8005dce <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fb fc4a 	bl	8001668 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10e      	bne.n	8005e02 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d113      	bne.n	8005e4e <I2C_ITError+0x252>
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b28      	cmp	r3, #40	; 0x28
 8005e2a:	d110      	bne.n	8005e4e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <I2C_ITError+0x260>)
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fe fe8c 	bl	8004b66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	0800615d 	.word	0x0800615d
 8005e5c:	ffff0000 	.word	0xffff0000

08005e60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	817b      	strh	r3, [r7, #10]
 8005e72:	460b      	mov	r3, r1
 8005e74:	813b      	strh	r3, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fa08 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb0:	d103      	bne.n	8005eba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e05f      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ebe:	897b      	ldrh	r3, [r7, #10]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ecc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	492d      	ldr	r1, [pc, #180]	; (8005f88 <I2C_RequestMemoryWrite+0x128>)
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fa40 	bl	800635a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e04c      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 faaa 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e02b      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f2c:	893b      	ldrh	r3, [r7, #8]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	e021      	b.n	8005f7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f38:	893b      	ldrh	r3, [r7, #8]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa84 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e005      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	00010002 	.word	0x00010002

08005f8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	817b      	strh	r3, [r7, #10]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	813b      	strh	r3, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f96a 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fec:	d103      	bne.n	8005ff6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0aa      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ffa:	897b      	ldrh	r3, [r7, #10]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	4952      	ldr	r1, [pc, #328]	; (8006158 <I2C_RequestMemoryRead+0x1cc>)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f9a2 	bl	800635a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e097      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	6a39      	ldr	r1, [r7, #32]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fa0c 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b04      	cmp	r3, #4
 800604c:	d107      	bne.n	800605e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e076      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	611a      	str	r2, [r3, #16]
 8006072:	e021      	b.n	80060b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f9e6 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b04      	cmp	r3, #4
 8006098:	d107      	bne.n	80060aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e050      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	6a39      	ldr	r1, [r7, #32]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f9cb 	bl	8006458 <I2C_WaitOnTXEFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d107      	bne.n	80060e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e035      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f8d3 	bl	80062ac <I2C_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611a:	d103      	bne.n	8006124 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e013      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006128:	897b      	ldrh	r3, [r7, #10]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	4906      	ldr	r1, [pc, #24]	; (8006158 <I2C_RequestMemoryRead+0x1cc>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f90b 	bl	800635a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	00010002 	.word	0x00010002

0800615c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006176:	4b4b      	ldr	r3, [pc, #300]	; (80062a4 <I2C_DMAAbort+0x148>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <I2C_DMAAbort+0x14c>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	0a1a      	lsrs	r2, r3, #8
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00da      	lsls	r2, r3, #3
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0220 	orr.w	r2, r3, #32
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061a2:	e00a      	b.n	80061ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b8:	d0ea      	beq.n	8006190 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	2200      	movs	r2, #0
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	2200      	movs	r2, #0
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	2200      	movs	r2, #0
 80061fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	2200      	movs	r2, #0
 800620e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d10e      	bne.n	800624a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7fe fca1 	bl	8004b8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006248:	e027      	b.n	800629a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800624a:	7cfb      	ldrb	r3, [r7, #19]
 800624c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006250:	2b28      	cmp	r3, #40	; 0x28
 8006252:	d117      	bne.n	8006284 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006272:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2228      	movs	r2, #40	; 0x28
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006282:	e007      	b.n	8006294 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f7fb f9e7 	bl	8001668 <HAL_I2C_ErrorCallback>
}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c
 80062a8:	14f8b589 	.word	0x14f8b589

080062ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062bc:	e025      	b.n	800630a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d021      	beq.n	800630a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c6:	f7fd f9ab 	bl	8003620 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d302      	bcc.n	80062dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d116      	bne.n	800630a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e023      	b.n	8006352 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d10d      	bne.n	8006330 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	43da      	mvns	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	461a      	mov	r2, r3
 800632e:	e00c      	b.n	800634a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	43da      	mvns	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf0c      	ite	eq
 8006342:	2301      	moveq	r3, #1
 8006344:	2300      	movne	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	429a      	cmp	r2, r3
 800634e:	d0b6      	beq.n	80062be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006368:	e051      	b.n	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006378:	d123      	bne.n	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006388:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006392:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0204 	orr.w	r2, r3, #4
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e046      	b.n	8006450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d021      	beq.n	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fd f929 	bl	8003620 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d116      	bne.n	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e020      	b.n	8006450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	d10c      	bne.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	43da      	mvns	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e00b      	b.n	800644a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	43da      	mvns	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d18d      	bne.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006464:	e02d      	b.n	80064c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f900 	bl	800666c <I2C_IsAcknowledgeFailed>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e02d      	b.n	80064d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d021      	beq.n	80064c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fd f8cf 	bl	8003620 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e007      	b.n	80064d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d1ca      	bne.n	8006466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064e6:	e02d      	b.n	8006544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f8bf 	bl	800666c <I2C_IsAcknowledgeFailed>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e02d      	b.n	8006554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d021      	beq.n	8006544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006500:	f7fd f88e 	bl	8003620 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e007      	b.n	8006554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b04      	cmp	r3, #4
 8006550:	d1ca      	bne.n	80064e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	08db      	lsrs	r3, r3, #3
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	0a1a      	lsrs	r2, r3, #8
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b01      	subs	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d107      	bne.n	800659a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e008      	b.n	80065ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d0e9      	beq.n	800657e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	2000000c 	.word	0x2000000c
 80065bc:	14f8b589 	.word	0x14f8b589

080065c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065cc:	e042      	b.n	8006654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d119      	bne.n	8006610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0210 	mvn.w	r2, #16
 80065e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e029      	b.n	8006664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006610:	f7fd f806 	bl	8003620 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d116      	bne.n	8006654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e007      	b.n	8006664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d1b5      	bne.n	80065ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006682:	d11b      	bne.n	80066bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800668c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	f043 0204 	orr.w	r2, r3, #4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066d8:	d103      	bne.n	80066e2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066e0:	e007      	b.n	80066f2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066ea:	d102      	bne.n	80066f2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2208      	movs	r2, #8
 80066f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e272      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8087 	beq.w	800682a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800671c:	4b92      	ldr	r3, [pc, #584]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b04      	cmp	r3, #4
 8006726:	d00c      	beq.n	8006742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006728:	4b8f      	ldr	r3, [pc, #572]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 030c 	and.w	r3, r3, #12
 8006730:	2b08      	cmp	r3, #8
 8006732:	d112      	bne.n	800675a <HAL_RCC_OscConfig+0x5e>
 8006734:	4b8c      	ldr	r3, [pc, #560]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d10b      	bne.n	800675a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006742:	4b89      	ldr	r3, [pc, #548]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d06c      	beq.n	8006828 <HAL_RCC_OscConfig+0x12c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d168      	bne.n	8006828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e24c      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006762:	d106      	bne.n	8006772 <HAL_RCC_OscConfig+0x76>
 8006764:	4b80      	ldr	r3, [pc, #512]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7f      	ldr	r2, [pc, #508]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800676a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e02e      	b.n	80067d0 <HAL_RCC_OscConfig+0xd4>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <HAL_RCC_OscConfig+0x98>
 800677a:	4b7b      	ldr	r3, [pc, #492]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7a      	ldr	r2, [pc, #488]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b78      	ldr	r3, [pc, #480]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a77      	ldr	r2, [pc, #476]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800678c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <HAL_RCC_OscConfig+0xd4>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0xbc>
 800679e:	4b72      	ldr	r3, [pc, #456]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a71      	ldr	r2, [pc, #452]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b6f      	ldr	r3, [pc, #444]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6e      	ldr	r2, [pc, #440]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0xd4>
 80067b8:	4b6b      	ldr	r3, [pc, #428]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6a      	ldr	r2, [pc, #424]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b68      	ldr	r3, [pc, #416]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a67      	ldr	r2, [pc, #412]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fc ff22 	bl	8003620 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fc ff1e 	bl	8003620 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e200      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	4b5d      	ldr	r3, [pc, #372]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0xe4>
 80067fe:	e014      	b.n	800682a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006800:	f7fc ff0e 	bl	8003620 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006808:	f7fc ff0a 	bl	8003620 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	; 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1ec      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681a:	4b53      	ldr	r3, [pc, #332]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0x10c>
 8006826:	e000      	b.n	800682a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d063      	beq.n	80068fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006836:	4b4c      	ldr	r3, [pc, #304]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006842:	4b49      	ldr	r3, [pc, #292]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11c      	bne.n	8006888 <HAL_RCC_OscConfig+0x18c>
 800684e:	4b46      	ldr	r3, [pc, #280]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d116      	bne.n	8006888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	4b43      	ldr	r3, [pc, #268]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_RCC_OscConfig+0x176>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e1c0      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006872:	4b3d      	ldr	r3, [pc, #244]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4939      	ldr	r1, [pc, #228]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006886:	e03a      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006890:	4b36      	ldr	r3, [pc, #216]	; (800696c <HAL_RCC_OscConfig+0x270>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006896:	f7fc fec3 	bl	8003620 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800689e:	f7fc febf 	bl	8003620 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1a1      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b0:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4927      	ldr	r1, [pc, #156]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	e015      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b26      	ldr	r3, [pc, #152]	; (800696c <HAL_RCC_OscConfig+0x270>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d8:	f7fc fea2 	bl	8003620 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fc fe9e 	bl	8003620 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e180      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d03a      	beq.n	8006980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <HAL_RCC_OscConfig+0x274>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006918:	f7fc fe82 	bl	8003620 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006920:	f7fc fe7e 	bl	8003620 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e160      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <HAL_RCC_OscConfig+0x26c>)
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800693e:	2001      	movs	r0, #1
 8006940:	f000 fad8 	bl	8006ef4 <RCC_Delay>
 8006944:	e01c      	b.n	8006980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_RCC_OscConfig+0x274>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694c:	f7fc fe68 	bl	8003620 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006952:	e00f      	b.n	8006974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006954:	f7fc fe64 	bl	8003620 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d908      	bls.n	8006974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e146      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	42420000 	.word	0x42420000
 8006970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006974:	4b92      	ldr	r3, [pc, #584]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e9      	bne.n	8006954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80a6 	beq.w	8006ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006992:	4b8b      	ldr	r3, [pc, #556]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800699e:	4b88      	ldr	r3, [pc, #544]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	4a87      	ldr	r2, [pc, #540]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a8:	61d3      	str	r3, [r2, #28]
 80069aa:	4b85      	ldr	r3, [pc, #532]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b6:	2301      	movs	r3, #1
 80069b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ba:	4b82      	ldr	r3, [pc, #520]	; (8006bc4 <HAL_RCC_OscConfig+0x4c8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d118      	bne.n	80069f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069c6:	4b7f      	ldr	r3, [pc, #508]	; (8006bc4 <HAL_RCC_OscConfig+0x4c8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a7e      	ldr	r2, [pc, #504]	; (8006bc4 <HAL_RCC_OscConfig+0x4c8>)
 80069cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d2:	f7fc fe25 	bl	8003620 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069da:	f7fc fe21 	bl	8003620 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	; 0x64
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e103      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ec:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x4c8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0f0      	beq.n	80069da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d106      	bne.n	8006a0e <HAL_RCC_OscConfig+0x312>
 8006a00:	4b6f      	ldr	r3, [pc, #444]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	4a6e      	ldr	r2, [pc, #440]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	6213      	str	r3, [r2, #32]
 8006a0c:	e02d      	b.n	8006a6a <HAL_RCC_OscConfig+0x36e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCC_OscConfig+0x334>
 8006a16:	4b6a      	ldr	r3, [pc, #424]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	4a69      	ldr	r2, [pc, #420]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	6213      	str	r3, [r2, #32]
 8006a22:	4b67      	ldr	r3, [pc, #412]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	4a66      	ldr	r2, [pc, #408]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a28:	f023 0304 	bic.w	r3, r3, #4
 8006a2c:	6213      	str	r3, [r2, #32]
 8006a2e:	e01c      	b.n	8006a6a <HAL_RCC_OscConfig+0x36e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b05      	cmp	r3, #5
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCC_OscConfig+0x356>
 8006a38:	4b61      	ldr	r3, [pc, #388]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	4a60      	ldr	r2, [pc, #384]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a3e:	f043 0304 	orr.w	r3, r3, #4
 8006a42:	6213      	str	r3, [r2, #32]
 8006a44:	4b5e      	ldr	r3, [pc, #376]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	4a5d      	ldr	r2, [pc, #372]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6213      	str	r3, [r2, #32]
 8006a50:	e00b      	b.n	8006a6a <HAL_RCC_OscConfig+0x36e>
 8006a52:	4b5b      	ldr	r3, [pc, #364]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4a5a      	ldr	r2, [pc, #360]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	6213      	str	r3, [r2, #32]
 8006a5e:	4b58      	ldr	r3, [pc, #352]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4a57      	ldr	r2, [pc, #348]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a64:	f023 0304 	bic.w	r3, r3, #4
 8006a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d015      	beq.n	8006a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a72:	f7fc fdd5 	bl	8003620 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a78:	e00a      	b.n	8006a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a7a:	f7fc fdd1 	bl	8003620 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e0b1      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a90:	4b4b      	ldr	r3, [pc, #300]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0ee      	beq.n	8006a7a <HAL_RCC_OscConfig+0x37e>
 8006a9c:	e014      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a9e:	f7fc fdbf 	bl	8003620 <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa4:	e00a      	b.n	8006abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa6:	f7fc fdbb 	bl	8003620 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e09b      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006abc:	4b40      	ldr	r3, [pc, #256]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ee      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ace:	4b3c      	ldr	r3, [pc, #240]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4a3b      	ldr	r2, [pc, #236]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8087 	beq.w	8006bf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ae4:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 030c 	and.w	r3, r3, #12
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d061      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d146      	bne.n	8006b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af8:	4b33      	ldr	r3, [pc, #204]	; (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7fc fd8f 	bl	8003620 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b06:	f7fc fd8b 	bl	8003620 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e06d      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b18:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f0      	bne.n	8006b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2c:	d108      	bne.n	8006b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b2e:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4921      	ldr	r1, [pc, #132]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a19      	ldr	r1, [r3, #32]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	430b      	orrs	r3, r1
 8006b52:	491b      	ldr	r1, [pc, #108]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5e:	f7fc fd5f 	bl	8003620 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fc fd5b 	bl	8003620 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e03d      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x46a>
 8006b84:	e035      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b86:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fc fd48 	bl	8003620 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fc fd44 	bl	8003620 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e026      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCC_OscConfig+0x4c4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x498>
 8006bb2:	e01e      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d107      	bne.n	8006bcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e019      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	40007000 	.word	0x40007000
 8006bc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <HAL_RCC_OscConfig+0x500>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d106      	bne.n	8006bee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d001      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40021000 	.word	0x40021000

08006c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0d0      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c14:	4b6a      	ldr	r3, [pc, #424]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d910      	bls.n	8006c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c22:	4b67      	ldr	r3, [pc, #412]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 0207 	bic.w	r2, r3, #7
 8006c2a:	4965      	ldr	r1, [pc, #404]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c32:	4b63      	ldr	r3, [pc, #396]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d001      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0b8      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d020      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c5c:	4b59      	ldr	r3, [pc, #356]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a58      	ldr	r2, [pc, #352]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c74:	4b53      	ldr	r3, [pc, #332]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4a52      	ldr	r2, [pc, #328]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c80:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	494d      	ldr	r1, [pc, #308]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d040      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d115      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e07f      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d107      	bne.n	8006cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e073      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cce:	4b3d      	ldr	r3, [pc, #244]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06b      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cde:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f023 0203 	bic.w	r2, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4936      	ldr	r1, [pc, #216]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf0:	f7fc fc96 	bl	8003620 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf8:	f7fc fc92 	bl	8003620 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e053      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 020c 	and.w	r2, r3, #12
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d1eb      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d20:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d210      	bcs.n	8006d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f023 0207 	bic.w	r2, r3, #7
 8006d36:	4922      	ldr	r1, [pc, #136]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e032      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d5c:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	4916      	ldr	r1, [pc, #88]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	490e      	ldr	r1, [pc, #56]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d8e:	f000 f821 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 8006d92:	4602      	mov	r2, r0
 8006d94:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	490a      	ldr	r1, [pc, #40]	; (8006dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006da0:	5ccb      	ldrb	r3, [r1, r3]
 8006da2:	fa22 f303 	lsr.w	r3, r2, r3
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <HAL_RCC_ClockConfig+0x1cc>)
 8006da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fc fbf4 	bl	800359c <HAL_InitTick>

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40022000 	.word	0x40022000
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	0800a088 	.word	0x0800a088
 8006dcc:	2000000c 	.word	0x2000000c
 8006dd0:	20000010 	.word	0x20000010

08006dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dd4:	b490      	push	{r4, r7}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006dda:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ddc:	1d3c      	adds	r4, r7, #4
 8006dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006de4:	f240 2301 	movw	r3, #513	; 0x201
 8006de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	2300      	movs	r3, #0
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d002      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x40>
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d003      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0x46>
 8006e12:	e02b      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e14:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e16:	623b      	str	r3, [r7, #32]
      break;
 8006e18:	e02b      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	0c9b      	lsrs	r3, r3, #18
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	3328      	adds	r3, #40	; 0x28
 8006e24:	443b      	add	r3, r7
 8006e26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d012      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	0c5b      	lsrs	r3, r3, #17
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	3328      	adds	r3, #40	; 0x28
 8006e42:	443b      	add	r3, r7
 8006e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4a0e      	ldr	r2, [pc, #56]	; (8006e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e4e:	fb03 f202 	mul.w	r2, r3, r2
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5a:	e004      	b.n	8006e66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4a0b      	ldr	r2, [pc, #44]	; (8006e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	623b      	str	r3, [r7, #32]
      break;
 8006e6a:	e002      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e6e:	623b      	str	r3, [r7, #32]
      break;
 8006e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e72:	6a3b      	ldr	r3, [r7, #32]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3728      	adds	r7, #40	; 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc90      	pop	{r4, r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	0800a078 	.word	0x0800a078
 8006e84:	40021000 	.word	0x40021000
 8006e88:	007a1200 	.word	0x007a1200
 8006e8c:	003d0900 	.word	0x003d0900

08006e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr
 8006ea0:	2000000c 	.word	0x2000000c

08006ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ea8:	f7ff fff2 	bl	8006e90 <HAL_RCC_GetHCLKFreq>
 8006eac:	4602      	mov	r2, r0
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	4903      	ldr	r1, [pc, #12]	; (8006ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eba:	5ccb      	ldrb	r3, [r1, r3]
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	0800a098 	.word	0x0800a098

08006ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ed0:	f7ff ffde 	bl	8006e90 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	0adb      	lsrs	r3, r3, #11
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	; (8006ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	0800a098 	.word	0x0800a098

08006ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <RCC_Delay+0x34>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <RCC_Delay+0x38>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	0a5b      	lsrs	r3, r3, #9
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f10:	bf00      	nop
  }
  while (Delay --);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	60fa      	str	r2, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f9      	bne.n	8006f10 <RCC_Delay+0x1c>
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr
 8006f28:	2000000c 	.word	0x2000000c
 8006f2c:	10624dd3 	.word	0x10624dd3

08006f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e076      	b.n	8007030 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d108      	bne.n	8006f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f52:	d009      	beq.n	8006f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	61da      	str	r2, [r3, #28]
 8006f5a:	e005      	b.n	8006f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fc f95a 	bl	800323c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fec:	ea42 0103 	orr.w	r1, r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	0c1a      	lsrs	r2, r3, #16
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f002 0204 	and.w	r2, r2, #4
 800700e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800701e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_SPI_Transmit+0x22>
 8007056:	2302      	movs	r3, #2
 8007058:	e126      	b.n	80072a8 <HAL_SPI_Transmit+0x270>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007062:	f7fc fadd 	bl	8003620 <HAL_GetTick>
 8007066:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007078:	2302      	movs	r3, #2
 800707a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800707c:	e10b      	b.n	8007296 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_Transmit+0x52>
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800708e:	e102      	b.n	8007296 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2203      	movs	r2, #3
 8007094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	88fa      	ldrh	r2, [r7, #6]
 80070ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d6:	d10f      	bne.n	80070f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d007      	beq.n	8007116 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711e:	d14b      	bne.n	80071b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_SPI_Transmit+0xf6>
 8007128:	8afb      	ldrh	r3, [r7, #22]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d13e      	bne.n	80071ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	1c9a      	adds	r2, r3, #2
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007152:	e02b      	b.n	80071ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b02      	cmp	r3, #2
 8007160:	d112      	bne.n	8007188 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	86da      	strh	r2, [r3, #54]	; 0x36
 8007186:	e011      	b.n	80071ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007188:	f7fc fa4a 	bl	8003620 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d803      	bhi.n	80071a0 <HAL_SPI_Transmit+0x168>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d102      	bne.n	80071a6 <HAL_SPI_Transmit+0x16e>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d102      	bne.n	80071ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071aa:	e074      	b.n	8007296 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ce      	bne.n	8007154 <HAL_SPI_Transmit+0x11c>
 80071b6:	e04c      	b.n	8007252 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_SPI_Transmit+0x18e>
 80071c0:	8afb      	ldrh	r3, [r7, #22]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d140      	bne.n	8007248 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	7812      	ldrb	r2, [r2, #0]
 80071d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071ec:	e02c      	b.n	8007248 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d113      	bne.n	8007224 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	86da      	strh	r2, [r3, #54]	; 0x36
 8007222:	e011      	b.n	8007248 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007224:	f7fc f9fc 	bl	8003620 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d803      	bhi.n	800723c <HAL_SPI_Transmit+0x204>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d102      	bne.n	8007242 <HAL_SPI_Transmit+0x20a>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007246:	e026      	b.n	8007296 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1cd      	bne.n	80071ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fd12 	bl	8007c80 <SPI_EndRxTxTransaction>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e000      	b.n	8007296 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007294:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3720      	adds	r7, #32
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	4613      	mov	r3, r2
 80072bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_SPI_Transmit_IT+0x20>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e06f      	b.n	80073b0 <HAL_SPI_Transmit_IT+0x100>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_SPI_Transmit_IT+0x34>
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e8:	e05d      	b.n	80073a6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
 80072f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072fa:	e054      	b.n	80073a6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <HAL_SPI_Transmit_IT+0x10c>)
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
 8007342:	e002      	b.n	800734a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a1e      	ldr	r2, [pc, #120]	; (80073c0 <HAL_SPI_Transmit_IT+0x110>)
 8007348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007352:	d10f      	bne.n	8007374 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007382:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d008      	beq.n	80073a4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e000      	b.n	80073a6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80073a4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	08007a87 	.word	0x08007a87
 80073c0:	08007a41 	.word	0x08007a41

080073c4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <HAL_SPI_Receive_IT+0x3c>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e6:	d10b      	bne.n	8007400 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2204      	movs	r2, #4
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f882 	bl	8007500 <HAL_SPI_TransmitReceive_IT>
 80073fc:	4603      	mov	r3, r0
 80073fe:	e076      	b.n	80074ee <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_SPI_Receive_IT+0x4a>
 800740a:	2302      	movs	r3, #2
 800740c:	e06f      	b.n	80074ee <HAL_SPI_Receive_IT+0x12a>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b01      	cmp	r3, #1
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007422:	2302      	movs	r3, #2
 8007424:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007426:	e05d      	b.n	80074e4 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_SPI_Receive_IT+0x70>
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007438:	e054      	b.n	80074e4 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2204      	movs	r2, #4
 800743e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a1e      	ldr	r2, [pc, #120]	; (80074f8 <HAL_SPI_Receive_IT+0x134>)
 800747e:	641a      	str	r2, [r3, #64]	; 0x40
 8007480:	e002      	b.n	8007488 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <HAL_SPI_Receive_IT+0x138>)
 8007486:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007490:	d10f      	bne.n	80074b2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80074c0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d008      	beq.n	80074e2 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e000      	b.n	80074e4 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80074e2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	080079fb 	.word	0x080079fb
 80074fc:	080079b1 	.word	0x080079b1

08007500 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_SPI_TransmitReceive_IT+0x20>
 800751c:	2302      	movs	r3, #2
 800751e:	e075      	b.n	800760c <HAL_SPI_TransmitReceive_IT+0x10c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800752e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007536:	7dbb      	ldrb	r3, [r7, #22]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d00d      	beq.n	8007558 <HAL_SPI_TransmitReceive_IT+0x58>
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007542:	d106      	bne.n	8007552 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_SPI_TransmitReceive_IT+0x52>
 800754c:	7dbb      	ldrb	r3, [r7, #22]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d002      	beq.n	8007558 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007552:	2302      	movs	r3, #2
 8007554:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007556:	e054      	b.n	8007602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_SPI_TransmitReceive_IT+0x6a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007564:	887b      	ldrh	r3, [r7, #2]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800756e:	e048      	b.n	8007602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b04      	cmp	r3, #4
 800757a:	d003      	beq.n	8007584 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2205      	movs	r2, #5
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	887a      	ldrh	r2, [r7, #2]
 800759a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	887a      	ldrh	r2, [r7, #2]
 80075a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a17      	ldr	r2, [pc, #92]	; (8007618 <HAL_SPI_TransmitReceive_IT+0x118>)
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
 80075c2:	e005      	b.n	80075d0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a16      	ldr	r2, [pc, #88]	; (8007620 <HAL_SPI_TransmitReceive_IT+0x120>)
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a15      	ldr	r2, [pc, #84]	; (8007624 <HAL_SPI_TransmitReceive_IT+0x124>)
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80075de:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d008      	beq.n	8007600 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e000      	b.n	8007602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007600:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	080078f3 	.word	0x080078f3
 800761c:	08007953 	.word	0x08007953
 8007620:	0800782f 	.word	0x0800782f
 8007624:	08007893 	.word	0x08007893

08007628 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	099b      	lsrs	r3, r3, #6
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
    return;
 800766a:	e0be      	b.n	80077ea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_SPI_IRQHandler+0x66>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	09db      	lsrs	r3, r3, #7
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
    return;
 800768c:	e0ad      	b.n	80077ea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_SPI_IRQHandler+0x80>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	099b      	lsrs	r3, r3, #6
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80a1 	beq.w	80077ea <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 809a 	beq.w	80077ea <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	099b      	lsrs	r3, r3, #6
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d023      	beq.n	800770a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d011      	beq.n	80076f2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d2:	f043 0204 	orr.w	r2, r3, #4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	e00b      	b.n	800770a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	693b      	ldr	r3, [r7, #16]
        return;
 8007708:	e06f      	b.n	80077ea <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d014      	beq.n	8007740 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f043 0201 	orr.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	2b00      	cmp	r3, #0
 8007746:	d04f      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007756:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <HAL_SPI_IRQHandler+0x14c>
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d034      	beq.n	80077de <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0203 	bic.w	r2, r2, #3
 8007782:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d011      	beq.n	80077b0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007790:	4a17      	ldr	r2, [pc, #92]	; (80077f0 <HAL_SPI_IRQHandler+0x1c8>)
 8007792:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007798:	4618      	mov	r0, r3
 800779a:	f7fc f8b7 	bl	800390c <HAL_DMA_Abort_IT>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d016      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077bc:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <HAL_SPI_IRQHandler+0x1c8>)
 80077be:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fc f8a1 	bl	800390c <HAL_DMA_Abort_IT>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80077dc:	e003      	b.n	80077e6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa fe3e 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077e4:	e000      	b.n	80077e8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80077e6:	bf00      	nop
    return;
 80077e8:	bf00      	nop
  }
}
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08007807 	.word	0x08007807

080077f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7fa fe1d 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f103 020c 	add.w	r2, r3, #12
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007878:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa19 	bl	8007cbc <SPI_CloseRxTx_ISR>
    }
  }
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10f      	bne.n	80078ea <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9e9 	bl	8007cbc <SPI_CloseRxTx_ISR>
    }
  }
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	b292      	uxth	r2, r2
 8007906:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10f      	bne.n	800794a <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007938:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9b9 	bl	8007cbc <SPI_CloseRxTx_ISR>
    }
  }
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	881a      	ldrh	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	1c9a      	adds	r2, r3, #2
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007996:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f98a 	bl	8007cbc <SPI_CloseRxTx_ISR>
    }
  }
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f103 020c 	add.w	r2, r3, #12
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9d9 	bl	8007da4 <SPI_CloseRx_ISR>
  }
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	b292      	uxth	r2, r2
 8007a0e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	1c9a      	adds	r2, r3, #2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9b6 	bl	8007da4 <SPI_CloseRx_ISR>
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f9d3 	bl	8007e24 <SPI_CloseTx_ISR>
  }
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9b1 	bl	8007e24 <SPI_CloseTx_ISR>
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007adc:	f7fb fda0 	bl	8003620 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4413      	add	r3, r2
 8007aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007aec:	f7fb fd98 	bl	8003620 <HAL_GetTick>
 8007af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	015b      	lsls	r3, r3, #5
 8007af8:	0d1b      	lsrs	r3, r3, #20
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b02:	e054      	b.n	8007bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d050      	beq.n	8007bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b0c:	f7fb fd88 	bl	8003620 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d902      	bls.n	8007b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d13d      	bne.n	8007b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3a:	d111      	bne.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b44:	d004      	beq.n	8007b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4e:	d107      	bne.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b68:	d10f      	bne.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e017      	b.n	8007bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2301      	moveq	r3, #1
 8007bc0:	2300      	movne	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d19b      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000000c 	.word	0x2000000c

08007bdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bf0:	d111      	bne.n	8007c16 <SPI_EndRxTransaction+0x3a>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfa:	d004      	beq.n	8007c06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c04:	d107      	bne.n	8007c16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c1e:	d117      	bne.n	8007c50 <SPI_EndRxTransaction+0x74>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d112      	bne.n	8007c50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2200      	movs	r2, #0
 8007c32:	2101      	movs	r1, #1
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff ff49 	bl	8007acc <SPI_WaitFlagStateUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e013      	b.n	8007c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff36 	bl	8007acc <SPI_WaitFlagStateUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e000      	b.n	8007c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff ff18 	bl	8007acc <SPI_WaitFlagStateUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f043 0220 	orr.w	r2, r3, #32
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e000      	b.n	8007cb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007cc4:	4b35      	ldr	r3, [pc, #212]	; (8007d9c <SPI_CloseRxTx_ISR+0xe0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a35      	ldr	r2, [pc, #212]	; (8007da0 <SPI_CloseRxTx_ISR+0xe4>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	0a5b      	lsrs	r3, r3, #9
 8007cd0:	2264      	movs	r2, #100	; 0x64
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd8:	f7fb fca2 	bl	8003620 <HAL_GetTick>
 8007cdc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0220 	bic.w	r2, r2, #32
 8007cec:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf8:	f043 0220 	orr.w	r2, r3, #32
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d00:	e009      	b.n	8007d16 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0eb      	beq.n	8007cee <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	2164      	movs	r1, #100	; 0x64
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ffb0 	bl	8007c80 <SPI_EndRxTxTransaction>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2a:	f043 0220 	orr.w	r2, r3, #32
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d115      	bne.n	8007d84 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d107      	bne.n	8007d74 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fa faad 	bl	80022cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d72:	e00e      	b.n	8007d92 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fd39 	bl	80077f4 <HAL_SPI_TxRxCpltCallback>
}
 8007d82:	e006      	b.n	8007d92 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fa fb67 	bl	8002460 <HAL_SPI_ErrorCallback>
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	057619f1 	.word	0x057619f1

08007da4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007dbc:	f7fb fc30 	bl	8003620 <HAL_GetTick>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2164      	movs	r1, #100	; 0x64
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff ff08 	bl	8007bdc <SPI_EndRxTransaction>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fa fa5d 	bl	80022cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e12:	e002      	b.n	8007e1a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fa fb23 	bl	8002460 <HAL_SPI_ErrorCallback>
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007e2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <SPI_CloseTx_ISR+0xbc>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2c      	ldr	r2, [pc, #176]	; (8007ee4 <SPI_CloseTx_ISR+0xc0>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	0a5b      	lsrs	r3, r3, #9
 8007e38:	2264      	movs	r2, #100	; 0x64
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e40:	f7fb fbee 	bl	8003620 <HAL_GetTick>
 8007e44:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e58:	e009      	b.n	8007e6e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0eb      	beq.n	8007e46 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	2164      	movs	r1, #100	; 0x64
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fefc 	bl	8007c80 <SPI_EndRxTxTransaction>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	f043 0220 	orr.w	r2, r3, #32
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fa fac9 	bl	8002460 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007ece:	e002      	b.n	8007ed6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fa f9b7 	bl	8002244 <HAL_SPI_TxCpltCallback>
}
 8007ed6:	bf00      	nop
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	057619f1 	.word	0x057619f1

08007ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e041      	b.n	8007f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7fb f9e6 	bl	80032e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f000 fa70 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d001      	beq.n	8007fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e03a      	b.n	8008016 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a18      	ldr	r2, [pc, #96]	; (8008020 <HAL_TIM_Base_Start_IT+0x98>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x58>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d009      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x58>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a14      	ldr	r2, [pc, #80]	; (8008024 <HAL_TIM_Base_Start_IT+0x9c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x58>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <HAL_TIM_Base_Start_IT+0xa0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d111      	bne.n	8008004 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b06      	cmp	r3, #6
 8007ff0:	d010      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0201 	orr.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008002:	e007      	b.n	8008014 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800

0800802c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b02      	cmp	r3, #2
 8008040:	d122      	bne.n	8008088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b02      	cmp	r3, #2
 800804e:	d11b      	bne.n	8008088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 0202 	mvn.w	r2, #2
 8008058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f9b1 	bl	80083d6 <HAL_TIM_IC_CaptureCallback>
 8008074:	e005      	b.n	8008082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f9a4 	bl	80083c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f9b3 	bl	80083e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b04      	cmp	r3, #4
 8008094:	d122      	bne.n	80080dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d11b      	bne.n	80080dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0204 	mvn.w	r2, #4
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f987 	bl	80083d6 <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f97a 	bl	80083c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f989 	bl	80083e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d122      	bne.n	8008130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d11b      	bne.n	8008130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0208 	mvn.w	r2, #8
 8008100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2204      	movs	r2, #4
 8008106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f95d 	bl	80083d6 <HAL_TIM_IC_CaptureCallback>
 800811c:	e005      	b.n	800812a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f950 	bl	80083c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f95f 	bl	80083e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b10      	cmp	r3, #16
 800813c:	d122      	bne.n	8008184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b10      	cmp	r3, #16
 800814a:	d11b      	bne.n	8008184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0210 	mvn.w	r2, #16
 8008154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2208      	movs	r2, #8
 800815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f933 	bl	80083d6 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f926 	bl	80083c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f935 	bl	80083e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b01      	cmp	r3, #1
 8008190:	d10e      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b01      	cmp	r3, #1
 800819e:	d107      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0201 	mvn.w	r2, #1
 80081a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f9 f91c 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d10e      	bne.n	80081dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d107      	bne.n	80081dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa77 	bl	80086ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d10e      	bne.n	8008208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d107      	bne.n	8008208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f8f9 	bl	80083fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b20      	cmp	r3, #32
 8008214:	d10e      	bne.n	8008234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b20      	cmp	r3, #32
 8008222:	d107      	bne.n	8008234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0220 	mvn.w	r2, #32
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa42 	bl	80086b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIM_ConfigClockSource+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e0b3      	b.n	80083bc <HAL_TIM_ConfigClockSource+0x180>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800827a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828c:	d03e      	beq.n	800830c <HAL_TIM_ConfigClockSource+0xd0>
 800828e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008292:	f200 8087 	bhi.w	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 8008296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829a:	f000 8085 	beq.w	80083a8 <HAL_TIM_ConfigClockSource+0x16c>
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a2:	d87f      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082a4:	2b70      	cmp	r3, #112	; 0x70
 80082a6:	d01a      	beq.n	80082de <HAL_TIM_ConfigClockSource+0xa2>
 80082a8:	2b70      	cmp	r3, #112	; 0x70
 80082aa:	d87b      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082ac:	2b60      	cmp	r3, #96	; 0x60
 80082ae:	d050      	beq.n	8008352 <HAL_TIM_ConfigClockSource+0x116>
 80082b0:	2b60      	cmp	r3, #96	; 0x60
 80082b2:	d877      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082b4:	2b50      	cmp	r3, #80	; 0x50
 80082b6:	d03c      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0xf6>
 80082b8:	2b50      	cmp	r3, #80	; 0x50
 80082ba:	d873      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d058      	beq.n	8008372 <HAL_TIM_ConfigClockSource+0x136>
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d86f      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082c4:	2b30      	cmp	r3, #48	; 0x30
 80082c6:	d064      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x156>
 80082c8:	2b30      	cmp	r3, #48	; 0x30
 80082ca:	d86b      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	d060      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x156>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	d867      	bhi.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d05c      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x156>
 80082d8:	2b10      	cmp	r3, #16
 80082da:	d05a      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80082dc:	e062      	b.n	80083a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6899      	ldr	r1, [r3, #8]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f000 f966 	bl	80085be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008300:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	609a      	str	r2, [r3, #8]
      break;
 800830a:	e04e      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	6899      	ldr	r1, [r3, #8]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f000 f94f 	bl	80085be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800832e:	609a      	str	r2, [r3, #8]
      break;
 8008330:	e03b      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6859      	ldr	r1, [r3, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	461a      	mov	r2, r3
 8008340:	f000 f8c6 	bl	80084d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2150      	movs	r1, #80	; 0x50
 800834a:	4618      	mov	r0, r3
 800834c:	f000 f91d 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8008350:	e02b      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6859      	ldr	r1, [r3, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	461a      	mov	r2, r3
 8008360:	f000 f8e4 	bl	800852c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2160      	movs	r1, #96	; 0x60
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f90d 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8008370:	e01b      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6859      	ldr	r1, [r3, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	461a      	mov	r2, r3
 8008380:	f000 f8a6 	bl	80084d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2140      	movs	r1, #64	; 0x40
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f8fd 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8008390:	e00b      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f000 f8f4 	bl	800858a <TIM_ITRx_SetConfig>
        break;
 80083a2:	e002      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80083a4:	bf00      	nop
 80083a6:	e000      	b.n	80083aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80083a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr

0800840c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a29      	ldr	r2, [pc, #164]	; (80084c4 <TIM_Base_SetConfig+0xb8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00b      	beq.n	800843c <TIM_Base_SetConfig+0x30>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d007      	beq.n	800843c <TIM_Base_SetConfig+0x30>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a26      	ldr	r2, [pc, #152]	; (80084c8 <TIM_Base_SetConfig+0xbc>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_Base_SetConfig+0x30>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a25      	ldr	r2, [pc, #148]	; (80084cc <TIM_Base_SetConfig+0xc0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d108      	bne.n	800844e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <TIM_Base_SetConfig+0xb8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00b      	beq.n	800846e <TIM_Base_SetConfig+0x62>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845c:	d007      	beq.n	800846e <TIM_Base_SetConfig+0x62>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <TIM_Base_SetConfig+0xbc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_Base_SetConfig+0x62>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a18      	ldr	r2, [pc, #96]	; (80084cc <TIM_Base_SetConfig+0xc0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d108      	bne.n	8008480 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a07      	ldr	r2, [pc, #28]	; (80084c4 <TIM_Base_SetConfig+0xb8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d103      	bne.n	80084b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	615a      	str	r2, [r3, #20]
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	40012c00 	.word	0x40012c00
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800

080084d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f023 0201 	bic.w	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f023 030a 	bic.w	r3, r3, #10
 800850c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f023 0210 	bic.w	r2, r3, #16
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008556:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	031b      	lsls	r3, r3, #12
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008568:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	621a      	str	r2, [r3, #32]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f043 0307 	orr.w	r3, r3, #7
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	bf00      	nop
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr

080085be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085be:	b480      	push	{r7}
 80085c0:	b087      	sub	sp, #28
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	607a      	str	r2, [r7, #4]
 80085ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	021a      	lsls	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	609a      	str	r2, [r3, #8]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008610:	2302      	movs	r3, #2
 8008612:	e046      	b.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a16      	ldr	r2, [pc, #88]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00e      	beq.n	8008676 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d009      	beq.n	8008676 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a12      	ldr	r2, [pc, #72]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d004      	beq.n	8008676 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d10c      	bne.n	8008690 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800867c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	4313      	orrs	r3, r2
 8008686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800

080086b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e03f      	b.n	800876e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fa fe12 	bl	800332c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2224      	movs	r2, #36	; 0x24
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800871e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbed 	bl	8008f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b20      	cmp	r3, #32
 800878e:	d130      	bne.n	80087f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_UART_Transmit_IT+0x26>
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e029      	b.n	80087f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit_IT+0x38>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e022      	b.n	80087f4 <HAL_UART_Transmit_IT+0x7e>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2221      	movs	r2, #33	; 0x21
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e000      	b.n	80087f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80087f2:	2302      	movs	r3, #2
  }
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr

080087fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b20      	cmp	r3, #32
 8008816:	d11d      	bne.n	8008854 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_UART_Receive_IT+0x26>
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e016      	b.n	8008856 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_UART_Receive_IT+0x38>
 8008832:	2302      	movs	r3, #2
 8008834:	e00f      	b.n	8008856 <HAL_UART_Receive_IT+0x58>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008844:	88fb      	ldrh	r3, [r7, #6]
 8008846:	461a      	mov	r2, r3
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 f9cf 	bl	8008bee <UART_Start_Receive_IT>
 8008850:	4603      	mov	r3, r0
 8008852:	e000      	b.n	8008856 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008854:	2302      	movs	r3, #2
  }
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008880:	2300      	movs	r3, #0
 8008882:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10d      	bne.n	80088b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <HAL_UART_IRQHandler+0x52>
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa7f 	bl	8008dae <UART_Receive_IT>
      return;
 80088b0:	e17b      	b.n	8008baa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80b1 	beq.w	8008a1c <HAL_UART_IRQHandler+0x1bc>
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <HAL_UART_IRQHandler+0x70>
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80a6 	beq.w	8008a1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <HAL_UART_IRQHandler+0x90>
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <HAL_UART_IRQHandler+0xb0>
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	f043 0202 	orr.w	r2, r3, #2
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <HAL_UART_IRQHandler+0xd0>
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	f043 0204 	orr.w	r2, r3, #4
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00f      	beq.n	800895a <HAL_UART_IRQHandler+0xfa>
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <HAL_UART_IRQHandler+0xee>
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	f043 0208 	orr.w	r2, r3, #8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 811e 	beq.w	8008ba0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <HAL_UART_IRQHandler+0x11e>
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fa18 	bl	8008dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <HAL_UART_IRQHandler+0x146>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d031      	beq.n	8008a0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f95a 	bl	8008c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d023      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d013      	beq.n	80089fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	4a76      	ldr	r2, [pc, #472]	; (8008bb0 <HAL_UART_IRQHandler+0x350>)
 80089d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fa ff94 	bl	800390c <HAL_DMA_Abort_IT>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d016      	beq.n	8008a18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f8:	e00e      	b.n	8008a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f8e3 	bl	8008bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	e00a      	b.n	8008a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8df 	bl	8008bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	e006      	b.n	8008a18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8db 	bl	8008bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a16:	e0c3      	b.n	8008ba0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	bf00      	nop
    return;
 8008a1a:	e0c1      	b.n	8008ba0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	f040 80a1 	bne.w	8008b68 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 809b 	beq.w	8008b68 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8095 	beq.w	8008b68 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04e      	beq.n	8008b00 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008a6c:	8a3b      	ldrh	r3, [r7, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 8098 	beq.w	8008ba4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a78:	8a3a      	ldrh	r2, [r7, #16]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	f080 8092 	bcs.w	8008ba4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8a3a      	ldrh	r2, [r7, #16]
 8008a84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d02b      	beq.n	8008ae8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695a      	ldr	r2, [r3, #20]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008abe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0210 	bic.w	r2, r2, #16
 8008adc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fa fed7 	bl	8003896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f86d 	bl	8008bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008afe:	e051      	b.n	8008ba4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d047      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008b18:	8a7b      	ldrh	r3, [r7, #18]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d044      	beq.n	8008ba8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695a      	ldr	r2, [r3, #20]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0210 	bic.w	r2, r2, #16
 8008b5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b5c:	8a7b      	ldrh	r3, [r7, #18]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f839 	bl	8008bd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b66:	e01f      	b.n	8008ba8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <HAL_UART_IRQHandler+0x324>
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f8af 	bl	8008ce0 <UART_Transmit_IT>
    return;
 8008b82:	e012      	b.n	8008baa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00d      	beq.n	8008baa <HAL_UART_IRQHandler+0x34a>
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8f0 	bl	8008d7e <UART_EndTransmit_IT>
    return;
 8008b9e:	e004      	b.n	8008baa <HAL_UART_IRQHandler+0x34a>
    return;
 8008ba0:	bf00      	nop
 8008ba2:	e002      	b.n	8008baa <HAL_UART_IRQHandler+0x34a>
      return;
 8008ba4:	bf00      	nop
 8008ba6:	e000      	b.n	8008baa <HAL_UART_IRQHandler+0x34a>
      return;
 8008ba8:	bf00      	nop
  }
}
 8008baa:	3728      	adds	r7, #40	; 0x28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	08008cb9 	.word	0x08008cb9

08008bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr

08008bee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2222      	movs	r2, #34	; 0x22
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c32:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	695a      	ldr	r2, [r3, #20]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0220 	orr.w	r2, r2, #32
 8008c52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0201 	bic.w	r2, r2, #1
 8008c86:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d107      	bne.n	8008ca0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0210 	bic.w	r2, r2, #16
 8008c9e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff ff77 	bl	8008bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b21      	cmp	r3, #33	; 0x21
 8008cf2:	d13e      	bne.n	8008d72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfc:	d114      	bne.n	8008d28 <UART_Transmit_IT+0x48>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d110      	bne.n	8008d28 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]
 8008d26:	e008      	b.n	8008d3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	1c59      	adds	r1, r3, #1
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6211      	str	r1, [r2, #32]
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4619      	mov	r1, r3
 8008d48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10f      	bne.n	8008d6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr

08008d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff ff08 	bl	8008bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b086      	sub	sp, #24
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b22      	cmp	r3, #34	; 0x22
 8008dc0:	f040 8099 	bne.w	8008ef6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dcc:	d117      	bne.n	8008dfe <UART_Receive_IT+0x50>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d113      	bne.n	8008dfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	1c9a      	adds	r2, r3, #2
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8008dfc:	e026      	b.n	8008e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e10:	d007      	beq.n	8008e22 <UART_Receive_IT+0x74>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <UART_Receive_IT+0x82>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e008      	b.n	8008e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d148      	bne.n	8008ef2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0220 	bic.w	r2, r2, #32
 8008e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695a      	ldr	r2, [r3, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d123      	bne.n	8008ee8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0210 	bic.w	r2, r2, #16
 8008eb4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d10a      	bne.n	8008eda <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fe79 	bl	8008bd8 <HAL_UARTEx_RxEventCallback>
 8008ee6:	e002      	b.n	8008eee <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7f8 fbc9 	bl	8001680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e002      	b.n	8008ef8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e000      	b.n	8008ef8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008ef6:	2302      	movs	r3, #2
  }
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f3a:	f023 030c 	bic.w	r3, r3, #12
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	430b      	orrs	r3, r1
 8008f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a2c      	ldr	r2, [pc, #176]	; (8009014 <UART_SetConfig+0x114>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d103      	bne.n	8008f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f68:	f7fd ffb0 	bl	8006ecc <HAL_RCC_GetPCLK2Freq>
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	e002      	b.n	8008f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fd ff98 	bl	8006ea4 <HAL_RCC_GetPCLK1Freq>
 8008f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009a      	lsls	r2, r3, #2
 8008f80:	441a      	add	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8c:	4a22      	ldr	r2, [pc, #136]	; (8009018 <UART_SetConfig+0x118>)
 8008f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	0119      	lsls	r1, r3, #4
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009a      	lsls	r2, r3, #2
 8008fa0:	441a      	add	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fac:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <UART_SetConfig+0x118>)
 8008fae:	fba3 0302 	umull	r0, r3, r3, r2
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	2064      	movs	r0, #100	; 0x64
 8008fb6:	fb00 f303 	mul.w	r3, r0, r3
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	3332      	adds	r3, #50	; 0x32
 8008fc0:	4a15      	ldr	r2, [pc, #84]	; (8009018 <UART_SetConfig+0x118>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fcc:	4419      	add	r1, r3
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009a      	lsls	r2, r3, #2
 8008fd8:	441a      	add	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <UART_SetConfig+0x118>)
 8008fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	2064      	movs	r0, #100	; 0x64
 8008fee:	fb00 f303 	mul.w	r3, r0, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	3332      	adds	r3, #50	; 0x32
 8008ff8:	4a07      	ldr	r2, [pc, #28]	; (8009018 <UART_SetConfig+0x118>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	440a      	add	r2, r1
 800900a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	40013800 	.word	0x40013800
 8009018:	51eb851f 	.word	0x51eb851f

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000018 	.word	0x20000018

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	2600      	movs	r6, #0
 800902c:	4d0c      	ldr	r5, [pc, #48]	; (8009060 <__libc_init_array+0x38>)
 800902e:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 8009030:	1b64      	subs	r4, r4, r5
 8009032:	10a4      	asrs	r4, r4, #2
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	f001 f810 	bl	800a05c <_init>
 800903c:	2600      	movs	r6, #0
 800903e:	4d0a      	ldr	r5, [pc, #40]	; (8009068 <__libc_init_array+0x40>)
 8009040:	4c0a      	ldr	r4, [pc, #40]	; (800906c <__libc_init_array+0x44>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	0800a0d8 	.word	0x0800a0d8
 8009064:	0800a0d8 	.word	0x0800a0d8
 8009068:	0800a0d8 	.word	0x0800a0d8
 800906c:	0800a0dc 	.word	0x0800a0dc

08009070 <malloc>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <malloc+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f000 b87b 	b.w	8009170 <_malloc_r>
 800907a:	bf00      	nop
 800907c:	20000018 	.word	0x20000018

08009080 <free>:
 8009080:	4b02      	ldr	r3, [pc, #8]	; (800908c <free+0xc>)
 8009082:	4601      	mov	r1, r0
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	f000 b80b 	b.w	80090a0 <_free_r>
 800908a:	bf00      	nop
 800908c:	20000018 	.word	0x20000018

08009090 <memset>:
 8009090:	4603      	mov	r3, r0
 8009092:	4402      	add	r2, r0
 8009094:	4293      	cmp	r3, r2
 8009096:	d100      	bne.n	800909a <memset+0xa>
 8009098:	4770      	bx	lr
 800909a:	f803 1b01 	strb.w	r1, [r3], #1
 800909e:	e7f9      	b.n	8009094 <memset+0x4>

080090a0 <_free_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4605      	mov	r5, r0
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d040      	beq.n	800912a <_free_r+0x8a>
 80090a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ac:	1f0c      	subs	r4, r1, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfb8      	it	lt
 80090b2:	18e4      	addlt	r4, r4, r3
 80090b4:	f000 f8e0 	bl	8009278 <__malloc_lock>
 80090b8:	4a1c      	ldr	r2, [pc, #112]	; (800912c <_free_r+0x8c>)
 80090ba:	6813      	ldr	r3, [r2, #0]
 80090bc:	b933      	cbnz	r3, 80090cc <_free_r+0x2c>
 80090be:	6063      	str	r3, [r4, #4]
 80090c0:	6014      	str	r4, [r2, #0]
 80090c2:	4628      	mov	r0, r5
 80090c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090c8:	f000 b8dc 	b.w	8009284 <__malloc_unlock>
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	d908      	bls.n	80090e2 <_free_r+0x42>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	1821      	adds	r1, r4, r0
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf01      	itttt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	1809      	addeq	r1, r1, r0
 80090de:	6021      	streq	r1, [r4, #0]
 80090e0:	e7ed      	b.n	80090be <_free_r+0x1e>
 80090e2:	461a      	mov	r2, r3
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b10b      	cbz	r3, 80090ec <_free_r+0x4c>
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d9fa      	bls.n	80090e2 <_free_r+0x42>
 80090ec:	6811      	ldr	r1, [r2, #0]
 80090ee:	1850      	adds	r0, r2, r1
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d10b      	bne.n	800910c <_free_r+0x6c>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	4401      	add	r1, r0
 80090f8:	1850      	adds	r0, r2, r1
 80090fa:	4283      	cmp	r3, r0
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	d1e0      	bne.n	80090c2 <_free_r+0x22>
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4401      	add	r1, r0
 8009106:	6011      	str	r1, [r2, #0]
 8009108:	6053      	str	r3, [r2, #4]
 800910a:	e7da      	b.n	80090c2 <_free_r+0x22>
 800910c:	d902      	bls.n	8009114 <_free_r+0x74>
 800910e:	230c      	movs	r3, #12
 8009110:	602b      	str	r3, [r5, #0]
 8009112:	e7d6      	b.n	80090c2 <_free_r+0x22>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	1821      	adds	r1, r4, r0
 8009118:	428b      	cmp	r3, r1
 800911a:	bf01      	itttt	eq
 800911c:	6819      	ldreq	r1, [r3, #0]
 800911e:	685b      	ldreq	r3, [r3, #4]
 8009120:	1809      	addeq	r1, r1, r0
 8009122:	6021      	streq	r1, [r4, #0]
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6054      	str	r4, [r2, #4]
 8009128:	e7cb      	b.n	80090c2 <_free_r+0x22>
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	200003fc 	.word	0x200003fc

08009130 <sbrk_aligned>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4e0e      	ldr	r6, [pc, #56]	; (800916c <sbrk_aligned+0x3c>)
 8009134:	460c      	mov	r4, r1
 8009136:	6831      	ldr	r1, [r6, #0]
 8009138:	4605      	mov	r5, r0
 800913a:	b911      	cbnz	r1, 8009142 <sbrk_aligned+0x12>
 800913c:	f000 f88c 	bl	8009258 <_sbrk_r>
 8009140:	6030      	str	r0, [r6, #0]
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f887 	bl	8009258 <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d00a      	beq.n	8009164 <sbrk_aligned+0x34>
 800914e:	1cc4      	adds	r4, r0, #3
 8009150:	f024 0403 	bic.w	r4, r4, #3
 8009154:	42a0      	cmp	r0, r4
 8009156:	d007      	beq.n	8009168 <sbrk_aligned+0x38>
 8009158:	1a21      	subs	r1, r4, r0
 800915a:	4628      	mov	r0, r5
 800915c:	f000 f87c 	bl	8009258 <_sbrk_r>
 8009160:	3001      	adds	r0, #1
 8009162:	d101      	bne.n	8009168 <sbrk_aligned+0x38>
 8009164:	f04f 34ff 	mov.w	r4, #4294967295
 8009168:	4620      	mov	r0, r4
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	20000400 	.word	0x20000400

08009170 <_malloc_r>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	1ccd      	adds	r5, r1, #3
 8009176:	f025 0503 	bic.w	r5, r5, #3
 800917a:	3508      	adds	r5, #8
 800917c:	2d0c      	cmp	r5, #12
 800917e:	bf38      	it	cc
 8009180:	250c      	movcc	r5, #12
 8009182:	2d00      	cmp	r5, #0
 8009184:	4607      	mov	r7, r0
 8009186:	db01      	blt.n	800918c <_malloc_r+0x1c>
 8009188:	42a9      	cmp	r1, r5
 800918a:	d905      	bls.n	8009198 <_malloc_r+0x28>
 800918c:	230c      	movs	r3, #12
 800918e:	2600      	movs	r6, #0
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	4630      	mov	r0, r6
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	4e2e      	ldr	r6, [pc, #184]	; (8009254 <_malloc_r+0xe4>)
 800919a:	f000 f86d 	bl	8009278 <__malloc_lock>
 800919e:	6833      	ldr	r3, [r6, #0]
 80091a0:	461c      	mov	r4, r3
 80091a2:	bb34      	cbnz	r4, 80091f2 <_malloc_r+0x82>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7ff ffc2 	bl	8009130 <sbrk_aligned>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	4604      	mov	r4, r0
 80091b0:	d14d      	bne.n	800924e <_malloc_r+0xde>
 80091b2:	6834      	ldr	r4, [r6, #0]
 80091b4:	4626      	mov	r6, r4
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	d140      	bne.n	800923c <_malloc_r+0xcc>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	4631      	mov	r1, r6
 80091be:	4638      	mov	r0, r7
 80091c0:	eb04 0803 	add.w	r8, r4, r3
 80091c4:	f000 f848 	bl	8009258 <_sbrk_r>
 80091c8:	4580      	cmp	r8, r0
 80091ca:	d13a      	bne.n	8009242 <_malloc_r+0xd2>
 80091cc:	6821      	ldr	r1, [r4, #0]
 80091ce:	3503      	adds	r5, #3
 80091d0:	1a6d      	subs	r5, r5, r1
 80091d2:	f025 0503 	bic.w	r5, r5, #3
 80091d6:	3508      	adds	r5, #8
 80091d8:	2d0c      	cmp	r5, #12
 80091da:	bf38      	it	cc
 80091dc:	250c      	movcc	r5, #12
 80091de:	4638      	mov	r0, r7
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7ff ffa5 	bl	8009130 <sbrk_aligned>
 80091e6:	3001      	adds	r0, #1
 80091e8:	d02b      	beq.n	8009242 <_malloc_r+0xd2>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	442b      	add	r3, r5
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	e00e      	b.n	8009210 <_malloc_r+0xa0>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	1b52      	subs	r2, r2, r5
 80091f6:	d41e      	bmi.n	8009236 <_malloc_r+0xc6>
 80091f8:	2a0b      	cmp	r2, #11
 80091fa:	d916      	bls.n	800922a <_malloc_r+0xba>
 80091fc:	1961      	adds	r1, r4, r5
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6025      	str	r5, [r4, #0]
 8009202:	bf18      	it	ne
 8009204:	6059      	strne	r1, [r3, #4]
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	bf08      	it	eq
 800920a:	6031      	streq	r1, [r6, #0]
 800920c:	5162      	str	r2, [r4, r5]
 800920e:	604b      	str	r3, [r1, #4]
 8009210:	4638      	mov	r0, r7
 8009212:	f104 060b 	add.w	r6, r4, #11
 8009216:	f000 f835 	bl	8009284 <__malloc_unlock>
 800921a:	f026 0607 	bic.w	r6, r6, #7
 800921e:	1d23      	adds	r3, r4, #4
 8009220:	1af2      	subs	r2, r6, r3
 8009222:	d0b6      	beq.n	8009192 <_malloc_r+0x22>
 8009224:	1b9b      	subs	r3, r3, r6
 8009226:	50a3      	str	r3, [r4, r2]
 8009228:	e7b3      	b.n	8009192 <_malloc_r+0x22>
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	42a3      	cmp	r3, r4
 800922e:	bf0c      	ite	eq
 8009230:	6032      	streq	r2, [r6, #0]
 8009232:	605a      	strne	r2, [r3, #4]
 8009234:	e7ec      	b.n	8009210 <_malloc_r+0xa0>
 8009236:	4623      	mov	r3, r4
 8009238:	6864      	ldr	r4, [r4, #4]
 800923a:	e7b2      	b.n	80091a2 <_malloc_r+0x32>
 800923c:	4634      	mov	r4, r6
 800923e:	6876      	ldr	r6, [r6, #4]
 8009240:	e7b9      	b.n	80091b6 <_malloc_r+0x46>
 8009242:	230c      	movs	r3, #12
 8009244:	4638      	mov	r0, r7
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	f000 f81c 	bl	8009284 <__malloc_unlock>
 800924c:	e7a1      	b.n	8009192 <_malloc_r+0x22>
 800924e:	6025      	str	r5, [r4, #0]
 8009250:	e7de      	b.n	8009210 <_malloc_r+0xa0>
 8009252:	bf00      	nop
 8009254:	200003fc 	.word	0x200003fc

08009258 <_sbrk_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	2300      	movs	r3, #0
 800925c:	4d05      	ldr	r5, [pc, #20]	; (8009274 <_sbrk_r+0x1c>)
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	f7fa f922 	bl	80034ac <_sbrk>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_sbrk_r+0x1a>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_sbrk_r+0x1a>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000404 	.word	0x20000404

08009278 <__malloc_lock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_lock+0x8>)
 800927a:	f000 b809 	b.w	8009290 <__retarget_lock_acquire_recursive>
 800927e:	bf00      	nop
 8009280:	20000408 	.word	0x20000408

08009284 <__malloc_unlock>:
 8009284:	4801      	ldr	r0, [pc, #4]	; (800928c <__malloc_unlock+0x8>)
 8009286:	f000 b804 	b.w	8009292 <__retarget_lock_release_recursive>
 800928a:	bf00      	nop
 800928c:	20000408 	.word	0x20000408

08009290 <__retarget_lock_acquire_recursive>:
 8009290:	4770      	bx	lr

08009292 <__retarget_lock_release_recursive>:
 8009292:	4770      	bx	lr

08009294 <pow>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4614      	mov	r4, r2
 800929a:	461d      	mov	r5, r3
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	f000 f862 	bl	8009368 <__ieee754_pow>
 80092a4:	4622      	mov	r2, r4
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	462b      	mov	r3, r5
 80092ac:	4620      	mov	r0, r4
 80092ae:	4629      	mov	r1, r5
 80092b0:	f7f7 fba4 	bl	80009fc <__aeabi_dcmpun>
 80092b4:	bbc8      	cbnz	r0, 800932a <pow+0x96>
 80092b6:	2200      	movs	r2, #0
 80092b8:	2300      	movs	r3, #0
 80092ba:	4640      	mov	r0, r8
 80092bc:	4649      	mov	r1, r9
 80092be:	f7f7 fb6b 	bl	8000998 <__aeabi_dcmpeq>
 80092c2:	b1b8      	cbz	r0, 80092f4 <pow+0x60>
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	f7f7 fb64 	bl	8000998 <__aeabi_dcmpeq>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d141      	bne.n	8009358 <pow+0xc4>
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f000 fe3b 	bl	8009f52 <finite>
 80092dc:	b328      	cbz	r0, 800932a <pow+0x96>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fb61 	bl	80009ac <__aeabi_dcmplt>
 80092ea:	b1f0      	cbz	r0, 800932a <pow+0x96>
 80092ec:	f7ff fe96 	bl	800901c <__errno>
 80092f0:	2322      	movs	r3, #34	; 0x22
 80092f2:	e019      	b.n	8009328 <pow+0x94>
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f000 fe2b 	bl	8009f52 <finite>
 80092fc:	b9c8      	cbnz	r0, 8009332 <pow+0x9e>
 80092fe:	4640      	mov	r0, r8
 8009300:	4649      	mov	r1, r9
 8009302:	f000 fe26 	bl	8009f52 <finite>
 8009306:	b1a0      	cbz	r0, 8009332 <pow+0x9e>
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	f000 fe21 	bl	8009f52 <finite>
 8009310:	b178      	cbz	r0, 8009332 <pow+0x9e>
 8009312:	4632      	mov	r2, r6
 8009314:	463b      	mov	r3, r7
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fb6f 	bl	80009fc <__aeabi_dcmpun>
 800931e:	2800      	cmp	r0, #0
 8009320:	d0e4      	beq.n	80092ec <pow+0x58>
 8009322:	f7ff fe7b 	bl	800901c <__errno>
 8009326:	2321      	movs	r3, #33	; 0x21
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009332:	2200      	movs	r2, #0
 8009334:	2300      	movs	r3, #0
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f7 fb2d 	bl	8000998 <__aeabi_dcmpeq>
 800933e:	2800      	cmp	r0, #0
 8009340:	d0f3      	beq.n	800932a <pow+0x96>
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f000 fe04 	bl	8009f52 <finite>
 800934a:	2800      	cmp	r0, #0
 800934c:	d0ed      	beq.n	800932a <pow+0x96>
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f000 fdfe 	bl	8009f52 <finite>
 8009356:	e7c8      	b.n	80092ea <pow+0x56>
 8009358:	2600      	movs	r6, #0
 800935a:	4f01      	ldr	r7, [pc, #4]	; (8009360 <pow+0xcc>)
 800935c:	e7e5      	b.n	800932a <pow+0x96>
 800935e:	bf00      	nop
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	00000000 	.word	0x00000000

08009368 <__ieee754_pow>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	b093      	sub	sp, #76	; 0x4c
 800936e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009372:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009376:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800937a:	4689      	mov	r9, r1
 800937c:	ea56 0102 	orrs.w	r1, r6, r2
 8009380:	4680      	mov	r8, r0
 8009382:	d111      	bne.n	80093a8 <__ieee754_pow+0x40>
 8009384:	1803      	adds	r3, r0, r0
 8009386:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800938a:	4152      	adcs	r2, r2
 800938c:	4299      	cmp	r1, r3
 800938e:	4b82      	ldr	r3, [pc, #520]	; (8009598 <__ieee754_pow+0x230>)
 8009390:	4193      	sbcs	r3, r2
 8009392:	f080 84b9 	bcs.w	8009d08 <__ieee754_pow+0x9a0>
 8009396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939a:	4640      	mov	r0, r8
 800939c:	4649      	mov	r1, r9
 800939e:	f7f6 fedd 	bl	800015c <__adddf3>
 80093a2:	4683      	mov	fp, r0
 80093a4:	468c      	mov	ip, r1
 80093a6:	e06f      	b.n	8009488 <__ieee754_pow+0x120>
 80093a8:	4b7c      	ldr	r3, [pc, #496]	; (800959c <__ieee754_pow+0x234>)
 80093aa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80093ae:	429c      	cmp	r4, r3
 80093b0:	464d      	mov	r5, r9
 80093b2:	4682      	mov	sl, r0
 80093b4:	dc06      	bgt.n	80093c4 <__ieee754_pow+0x5c>
 80093b6:	d101      	bne.n	80093bc <__ieee754_pow+0x54>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1ec      	bne.n	8009396 <__ieee754_pow+0x2e>
 80093bc:	429e      	cmp	r6, r3
 80093be:	dc01      	bgt.n	80093c4 <__ieee754_pow+0x5c>
 80093c0:	d10f      	bne.n	80093e2 <__ieee754_pow+0x7a>
 80093c2:	b172      	cbz	r2, 80093e2 <__ieee754_pow+0x7a>
 80093c4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80093c8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80093cc:	ea55 050a 	orrs.w	r5, r5, sl
 80093d0:	d1e1      	bne.n	8009396 <__ieee754_pow+0x2e>
 80093d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093d6:	18db      	adds	r3, r3, r3
 80093d8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80093dc:	4152      	adcs	r2, r2
 80093de:	429d      	cmp	r5, r3
 80093e0:	e7d5      	b.n	800938e <__ieee754_pow+0x26>
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	da39      	bge.n	800945a <__ieee754_pow+0xf2>
 80093e6:	4b6e      	ldr	r3, [pc, #440]	; (80095a0 <__ieee754_pow+0x238>)
 80093e8:	429e      	cmp	r6, r3
 80093ea:	dc52      	bgt.n	8009492 <__ieee754_pow+0x12a>
 80093ec:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80093f0:	429e      	cmp	r6, r3
 80093f2:	f340 849c 	ble.w	8009d2e <__ieee754_pow+0x9c6>
 80093f6:	1533      	asrs	r3, r6, #20
 80093f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093fc:	2b14      	cmp	r3, #20
 80093fe:	dd0f      	ble.n	8009420 <__ieee754_pow+0xb8>
 8009400:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009404:	fa22 f103 	lsr.w	r1, r2, r3
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	4293      	cmp	r3, r2
 800940e:	f040 848e 	bne.w	8009d2e <__ieee754_pow+0x9c6>
 8009412:	f001 0101 	and.w	r1, r1, #1
 8009416:	f1c1 0302 	rsb	r3, r1, #2
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	b182      	cbz	r2, 8009440 <__ieee754_pow+0xd8>
 800941e:	e05d      	b.n	80094dc <__ieee754_pow+0x174>
 8009420:	2a00      	cmp	r2, #0
 8009422:	d159      	bne.n	80094d8 <__ieee754_pow+0x170>
 8009424:	f1c3 0314 	rsb	r3, r3, #20
 8009428:	fa46 f103 	asr.w	r1, r6, r3
 800942c:	fa01 f303 	lsl.w	r3, r1, r3
 8009430:	42b3      	cmp	r3, r6
 8009432:	f040 8479 	bne.w	8009d28 <__ieee754_pow+0x9c0>
 8009436:	f001 0101 	and.w	r1, r1, #1
 800943a:	f1c1 0302 	rsb	r3, r1, #2
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4b58      	ldr	r3, [pc, #352]	; (80095a4 <__ieee754_pow+0x23c>)
 8009442:	429e      	cmp	r6, r3
 8009444:	d132      	bne.n	80094ac <__ieee754_pow+0x144>
 8009446:	2f00      	cmp	r7, #0
 8009448:	f280 846a 	bge.w	8009d20 <__ieee754_pow+0x9b8>
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	2000      	movs	r0, #0
 8009452:	4954      	ldr	r1, [pc, #336]	; (80095a4 <__ieee754_pow+0x23c>)
 8009454:	f7f7 f962 	bl	800071c <__aeabi_ddiv>
 8009458:	e7a3      	b.n	80093a2 <__ieee754_pow+0x3a>
 800945a:	2300      	movs	r3, #0
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	2a00      	cmp	r2, #0
 8009460:	d13c      	bne.n	80094dc <__ieee754_pow+0x174>
 8009462:	4b4e      	ldr	r3, [pc, #312]	; (800959c <__ieee754_pow+0x234>)
 8009464:	429e      	cmp	r6, r3
 8009466:	d1eb      	bne.n	8009440 <__ieee754_pow+0xd8>
 8009468:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800946c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009470:	ea53 030a 	orrs.w	r3, r3, sl
 8009474:	f000 8448 	beq.w	8009d08 <__ieee754_pow+0x9a0>
 8009478:	4b4b      	ldr	r3, [pc, #300]	; (80095a8 <__ieee754_pow+0x240>)
 800947a:	429c      	cmp	r4, r3
 800947c:	dd0b      	ble.n	8009496 <__ieee754_pow+0x12e>
 800947e:	2f00      	cmp	r7, #0
 8009480:	f2c0 8448 	blt.w	8009d14 <__ieee754_pow+0x9ac>
 8009484:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009488:	4658      	mov	r0, fp
 800948a:	4661      	mov	r1, ip
 800948c:	b013      	add	sp, #76	; 0x4c
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009492:	2302      	movs	r3, #2
 8009494:	e7e2      	b.n	800945c <__ieee754_pow+0xf4>
 8009496:	2f00      	cmp	r7, #0
 8009498:	f04f 0b00 	mov.w	fp, #0
 800949c:	f04f 0c00 	mov.w	ip, #0
 80094a0:	daf2      	bge.n	8009488 <__ieee754_pow+0x120>
 80094a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80094a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80094aa:	e7ed      	b.n	8009488 <__ieee754_pow+0x120>
 80094ac:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80094b0:	d106      	bne.n	80094c0 <__ieee754_pow+0x158>
 80094b2:	4642      	mov	r2, r8
 80094b4:	464b      	mov	r3, r9
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f7 f805 	bl	80004c8 <__aeabi_dmul>
 80094be:	e770      	b.n	80093a2 <__ieee754_pow+0x3a>
 80094c0:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <__ieee754_pow+0x244>)
 80094c2:	429f      	cmp	r7, r3
 80094c4:	d10a      	bne.n	80094dc <__ieee754_pow+0x174>
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	db08      	blt.n	80094dc <__ieee754_pow+0x174>
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	b013      	add	sp, #76	; 0x4c
 80094d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d4:	f000 bc5e 	b.w	8009d94 <__ieee754_sqrt>
 80094d8:	2300      	movs	r3, #0
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f000 fd34 	bl	8009f4c <fabs>
 80094e4:	4683      	mov	fp, r0
 80094e6:	468c      	mov	ip, r1
 80094e8:	f1ba 0f00 	cmp.w	sl, #0
 80094ec:	d128      	bne.n	8009540 <__ieee754_pow+0x1d8>
 80094ee:	b124      	cbz	r4, 80094fa <__ieee754_pow+0x192>
 80094f0:	4b2c      	ldr	r3, [pc, #176]	; (80095a4 <__ieee754_pow+0x23c>)
 80094f2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d122      	bne.n	8009540 <__ieee754_pow+0x1d8>
 80094fa:	2f00      	cmp	r7, #0
 80094fc:	da07      	bge.n	800950e <__ieee754_pow+0x1a6>
 80094fe:	465a      	mov	r2, fp
 8009500:	4663      	mov	r3, ip
 8009502:	2000      	movs	r0, #0
 8009504:	4927      	ldr	r1, [pc, #156]	; (80095a4 <__ieee754_pow+0x23c>)
 8009506:	f7f7 f909 	bl	800071c <__aeabi_ddiv>
 800950a:	4683      	mov	fp, r0
 800950c:	468c      	mov	ip, r1
 800950e:	2d00      	cmp	r5, #0
 8009510:	daba      	bge.n	8009488 <__ieee754_pow+0x120>
 8009512:	9b00      	ldr	r3, [sp, #0]
 8009514:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009518:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800951c:	4323      	orrs	r3, r4
 800951e:	d108      	bne.n	8009532 <__ieee754_pow+0x1ca>
 8009520:	465a      	mov	r2, fp
 8009522:	4663      	mov	r3, ip
 8009524:	4658      	mov	r0, fp
 8009526:	4661      	mov	r1, ip
 8009528:	f7f6 fe16 	bl	8000158 <__aeabi_dsub>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	e790      	b.n	8009454 <__ieee754_pow+0xec>
 8009532:	9b00      	ldr	r3, [sp, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d1a7      	bne.n	8009488 <__ieee754_pow+0x120>
 8009538:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800953c:	469c      	mov	ip, r3
 800953e:	e7a3      	b.n	8009488 <__ieee754_pow+0x120>
 8009540:	0feb      	lsrs	r3, r5, #31
 8009542:	3b01      	subs	r3, #1
 8009544:	930c      	str	r3, [sp, #48]	; 0x30
 8009546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	4313      	orrs	r3, r2
 800954c:	d104      	bne.n	8009558 <__ieee754_pow+0x1f0>
 800954e:	4642      	mov	r2, r8
 8009550:	464b      	mov	r3, r9
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	e7e7      	b.n	8009528 <__ieee754_pow+0x1c0>
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <__ieee754_pow+0x248>)
 800955a:	429e      	cmp	r6, r3
 800955c:	f340 80f6 	ble.w	800974c <__ieee754_pow+0x3e4>
 8009560:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009564:	429e      	cmp	r6, r3
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <__ieee754_pow+0x240>)
 8009568:	dd09      	ble.n	800957e <__ieee754_pow+0x216>
 800956a:	429c      	cmp	r4, r3
 800956c:	dc0c      	bgt.n	8009588 <__ieee754_pow+0x220>
 800956e:	2f00      	cmp	r7, #0
 8009570:	da0c      	bge.n	800958c <__ieee754_pow+0x224>
 8009572:	2000      	movs	r0, #0
 8009574:	b013      	add	sp, #76	; 0x4c
 8009576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	f000 bce2 	b.w	8009f42 <__math_oflow>
 800957e:	429c      	cmp	r4, r3
 8009580:	dbf5      	blt.n	800956e <__ieee754_pow+0x206>
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <__ieee754_pow+0x23c>)
 8009584:	429c      	cmp	r4, r3
 8009586:	dd15      	ble.n	80095b4 <__ieee754_pow+0x24c>
 8009588:	2f00      	cmp	r7, #0
 800958a:	dcf2      	bgt.n	8009572 <__ieee754_pow+0x20a>
 800958c:	2000      	movs	r0, #0
 800958e:	b013      	add	sp, #76	; 0x4c
 8009590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	f000 bcd0 	b.w	8009f38 <__math_uflow>
 8009598:	fff00000 	.word	0xfff00000
 800959c:	7ff00000 	.word	0x7ff00000
 80095a0:	433fffff 	.word	0x433fffff
 80095a4:	3ff00000 	.word	0x3ff00000
 80095a8:	3fefffff 	.word	0x3fefffff
 80095ac:	3fe00000 	.word	0x3fe00000
 80095b0:	41e00000 	.word	0x41e00000
 80095b4:	4661      	mov	r1, ip
 80095b6:	2200      	movs	r2, #0
 80095b8:	4658      	mov	r0, fp
 80095ba:	4b5f      	ldr	r3, [pc, #380]	; (8009738 <__ieee754_pow+0x3d0>)
 80095bc:	f7f6 fdcc 	bl	8000158 <__aeabi_dsub>
 80095c0:	a355      	add	r3, pc, #340	; (adr r3, 8009718 <__ieee754_pow+0x3b0>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	4604      	mov	r4, r0
 80095c8:	460d      	mov	r5, r1
 80095ca:	f7f6 ff7d 	bl	80004c8 <__aeabi_dmul>
 80095ce:	a354      	add	r3, pc, #336	; (adr r3, 8009720 <__ieee754_pow+0x3b8>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	4620      	mov	r0, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	f7f6 ff74 	bl	80004c8 <__aeabi_dmul>
 80095e0:	2200      	movs	r2, #0
 80095e2:	4682      	mov	sl, r0
 80095e4:	468b      	mov	fp, r1
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	4b54      	ldr	r3, [pc, #336]	; (800973c <__ieee754_pow+0x3d4>)
 80095ec:	f7f6 ff6c 	bl	80004c8 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	a14c      	add	r1, pc, #304	; (adr r1, 8009728 <__ieee754_pow+0x3c0>)
 80095f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095fa:	f7f6 fdad 	bl	8000158 <__aeabi_dsub>
 80095fe:	4622      	mov	r2, r4
 8009600:	462b      	mov	r3, r5
 8009602:	f7f6 ff61 	bl	80004c8 <__aeabi_dmul>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	2000      	movs	r0, #0
 800960c:	494c      	ldr	r1, [pc, #304]	; (8009740 <__ieee754_pow+0x3d8>)
 800960e:	f7f6 fda3 	bl	8000158 <__aeabi_dsub>
 8009612:	4622      	mov	r2, r4
 8009614:	462b      	mov	r3, r5
 8009616:	4680      	mov	r8, r0
 8009618:	4689      	mov	r9, r1
 800961a:	4620      	mov	r0, r4
 800961c:	4629      	mov	r1, r5
 800961e:	f7f6 ff53 	bl	80004c8 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 ff4d 	bl	80004c8 <__aeabi_dmul>
 800962e:	a340      	add	r3, pc, #256	; (adr r3, 8009730 <__ieee754_pow+0x3c8>)
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f7f6 ff48 	bl	80004c8 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4650      	mov	r0, sl
 800963e:	4659      	mov	r1, fp
 8009640:	f7f6 fd8a 	bl	8000158 <__aeabi_dsub>
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 fd82 	bl	800015c <__adddf3>
 8009658:	4632      	mov	r2, r6
 800965a:	463b      	mov	r3, r7
 800965c:	4650      	mov	r0, sl
 800965e:	468b      	mov	fp, r1
 8009660:	f7f6 fd7a 	bl	8000158 <__aeabi_dsub>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4620      	mov	r0, r4
 800966a:	4629      	mov	r1, r5
 800966c:	f7f6 fd74 	bl	8000158 <__aeabi_dsub>
 8009670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009674:	9b00      	ldr	r3, [sp, #0]
 8009676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009678:	3b01      	subs	r3, #1
 800967a:	4313      	orrs	r3, r2
 800967c:	f04f 0600 	mov.w	r6, #0
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	bf0c      	ite	eq
 8009686:	4b2f      	ldreq	r3, [pc, #188]	; (8009744 <__ieee754_pow+0x3dc>)
 8009688:	4b2b      	ldrne	r3, [pc, #172]	; (8009738 <__ieee754_pow+0x3d0>)
 800968a:	4604      	mov	r4, r0
 800968c:	460d      	mov	r5, r1
 800968e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009692:	e9cd 2300 	strd	r2, r3, [sp]
 8009696:	4632      	mov	r2, r6
 8009698:	463b      	mov	r3, r7
 800969a:	f7f6 fd5d 	bl	8000158 <__aeabi_dsub>
 800969e:	4652      	mov	r2, sl
 80096a0:	465b      	mov	r3, fp
 80096a2:	f7f6 ff11 	bl	80004c8 <__aeabi_dmul>
 80096a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 ff09 	bl	80004c8 <__aeabi_dmul>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	f7f6 fd4d 	bl	800015c <__adddf3>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	4680      	mov	r8, r0
 80096c8:	4689      	mov	r9, r1
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 fefb 	bl	80004c8 <__aeabi_dmul>
 80096d2:	4604      	mov	r4, r0
 80096d4:	460d      	mov	r5, r1
 80096d6:	460b      	mov	r3, r1
 80096d8:	4602      	mov	r2, r0
 80096da:	4649      	mov	r1, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80096e2:	f7f6 fd3b 	bl	800015c <__adddf3>
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <__ieee754_pow+0x3e0>)
 80096e8:	4682      	mov	sl, r0
 80096ea:	4299      	cmp	r1, r3
 80096ec:	460f      	mov	r7, r1
 80096ee:	460e      	mov	r6, r1
 80096f0:	f340 82e5 	ble.w	8009cbe <__ieee754_pow+0x956>
 80096f4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80096f8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80096fc:	4303      	orrs	r3, r0
 80096fe:	f000 81df 	beq.w	8009ac0 <__ieee754_pow+0x758>
 8009702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	f7f7 f94f 	bl	80009ac <__aeabi_dcmplt>
 800970e:	3800      	subs	r0, #0
 8009710:	bf18      	it	ne
 8009712:	2001      	movne	r0, #1
 8009714:	e72e      	b.n	8009574 <__ieee754_pow+0x20c>
 8009716:	bf00      	nop
 8009718:	60000000 	.word	0x60000000
 800971c:	3ff71547 	.word	0x3ff71547
 8009720:	f85ddf44 	.word	0xf85ddf44
 8009724:	3e54ae0b 	.word	0x3e54ae0b
 8009728:	55555555 	.word	0x55555555
 800972c:	3fd55555 	.word	0x3fd55555
 8009730:	652b82fe 	.word	0x652b82fe
 8009734:	3ff71547 	.word	0x3ff71547
 8009738:	3ff00000 	.word	0x3ff00000
 800973c:	3fd00000 	.word	0x3fd00000
 8009740:	3fe00000 	.word	0x3fe00000
 8009744:	bff00000 	.word	0xbff00000
 8009748:	408fffff 	.word	0x408fffff
 800974c:	4bd2      	ldr	r3, [pc, #840]	; (8009a98 <__ieee754_pow+0x730>)
 800974e:	2200      	movs	r2, #0
 8009750:	402b      	ands	r3, r5
 8009752:	b943      	cbnz	r3, 8009766 <__ieee754_pow+0x3fe>
 8009754:	4658      	mov	r0, fp
 8009756:	4661      	mov	r1, ip
 8009758:	4bd0      	ldr	r3, [pc, #832]	; (8009a9c <__ieee754_pow+0x734>)
 800975a:	f7f6 feb5 	bl	80004c8 <__aeabi_dmul>
 800975e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009762:	4683      	mov	fp, r0
 8009764:	460c      	mov	r4, r1
 8009766:	1523      	asrs	r3, r4, #20
 8009768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800976c:	4413      	add	r3, r2
 800976e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009770:	4bcb      	ldr	r3, [pc, #812]	; (8009aa0 <__ieee754_pow+0x738>)
 8009772:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009776:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800977a:	429c      	cmp	r4, r3
 800977c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009780:	dd08      	ble.n	8009794 <__ieee754_pow+0x42c>
 8009782:	4bc8      	ldr	r3, [pc, #800]	; (8009aa4 <__ieee754_pow+0x73c>)
 8009784:	429c      	cmp	r4, r3
 8009786:	f340 8199 	ble.w	8009abc <__ieee754_pow+0x754>
 800978a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800978c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009790:	3301      	adds	r3, #1
 8009792:	930b      	str	r3, [sp, #44]	; 0x2c
 8009794:	2600      	movs	r6, #0
 8009796:	00f3      	lsls	r3, r6, #3
 8009798:	930d      	str	r3, [sp, #52]	; 0x34
 800979a:	4bc3      	ldr	r3, [pc, #780]	; (8009aa8 <__ieee754_pow+0x740>)
 800979c:	4658      	mov	r0, fp
 800979e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097a6:	4629      	mov	r1, r5
 80097a8:	461a      	mov	r2, r3
 80097aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80097ae:	4623      	mov	r3, r4
 80097b0:	f7f6 fcd2 	bl	8000158 <__aeabi_dsub>
 80097b4:	46da      	mov	sl, fp
 80097b6:	462b      	mov	r3, r5
 80097b8:	4652      	mov	r2, sl
 80097ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80097be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097c2:	f7f6 fccb 	bl	800015c <__adddf3>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	2000      	movs	r0, #0
 80097cc:	49b7      	ldr	r1, [pc, #732]	; (8009aac <__ieee754_pow+0x744>)
 80097ce:	f7f6 ffa5 	bl	800071c <__aeabi_ddiv>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80097de:	f7f6 fe73 	bl	80004c8 <__aeabi_dmul>
 80097e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80097e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80097ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097ee:	2300      	movs	r3, #0
 80097f0:	2200      	movs	r2, #0
 80097f2:	46ab      	mov	fp, r5
 80097f4:	106d      	asrs	r5, r5, #1
 80097f6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009800:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009804:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	4614      	mov	r4, r2
 800980e:	461d      	mov	r5, r3
 8009810:	f7f6 fe5a 	bl	80004c8 <__aeabi_dmul>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800981c:	f7f6 fc9c 	bl	8000158 <__aeabi_dsub>
 8009820:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f6 fc94 	bl	8000158 <__aeabi_dsub>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4650      	mov	r0, sl
 8009836:	4659      	mov	r1, fp
 8009838:	f7f6 fc8e 	bl	8000158 <__aeabi_dsub>
 800983c:	4642      	mov	r2, r8
 800983e:	464b      	mov	r3, r9
 8009840:	f7f6 fe42 	bl	80004c8 <__aeabi_dmul>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f6 fc84 	bl	8000158 <__aeabi_dsub>
 8009850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009854:	f7f6 fe38 	bl	80004c8 <__aeabi_dmul>
 8009858:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800985c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009860:	4610      	mov	r0, r2
 8009862:	4619      	mov	r1, r3
 8009864:	f7f6 fe30 	bl	80004c8 <__aeabi_dmul>
 8009868:	a379      	add	r3, pc, #484	; (adr r3, 8009a50 <__ieee754_pow+0x6e8>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	4604      	mov	r4, r0
 8009870:	460d      	mov	r5, r1
 8009872:	f7f6 fe29 	bl	80004c8 <__aeabi_dmul>
 8009876:	a378      	add	r3, pc, #480	; (adr r3, 8009a58 <__ieee754_pow+0x6f0>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f7f6 fc6e 	bl	800015c <__adddf3>
 8009880:	4622      	mov	r2, r4
 8009882:	462b      	mov	r3, r5
 8009884:	f7f6 fe20 	bl	80004c8 <__aeabi_dmul>
 8009888:	a375      	add	r3, pc, #468	; (adr r3, 8009a60 <__ieee754_pow+0x6f8>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fc65 	bl	800015c <__adddf3>
 8009892:	4622      	mov	r2, r4
 8009894:	462b      	mov	r3, r5
 8009896:	f7f6 fe17 	bl	80004c8 <__aeabi_dmul>
 800989a:	a373      	add	r3, pc, #460	; (adr r3, 8009a68 <__ieee754_pow+0x700>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7f6 fc5c 	bl	800015c <__adddf3>
 80098a4:	4622      	mov	r2, r4
 80098a6:	462b      	mov	r3, r5
 80098a8:	f7f6 fe0e 	bl	80004c8 <__aeabi_dmul>
 80098ac:	a370      	add	r3, pc, #448	; (adr r3, 8009a70 <__ieee754_pow+0x708>)
 80098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b2:	f7f6 fc53 	bl	800015c <__adddf3>
 80098b6:	4622      	mov	r2, r4
 80098b8:	462b      	mov	r3, r5
 80098ba:	f7f6 fe05 	bl	80004c8 <__aeabi_dmul>
 80098be:	a36e      	add	r3, pc, #440	; (adr r3, 8009a78 <__ieee754_pow+0x710>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f7f6 fc4a 	bl	800015c <__adddf3>
 80098c8:	4622      	mov	r2, r4
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	462b      	mov	r3, r5
 80098d0:	4620      	mov	r0, r4
 80098d2:	4629      	mov	r1, r5
 80098d4:	f7f6 fdf8 	bl	80004c8 <__aeabi_dmul>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4630      	mov	r0, r6
 80098de:	4639      	mov	r1, r7
 80098e0:	f7f6 fdf2 	bl	80004c8 <__aeabi_dmul>
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ec:	4642      	mov	r2, r8
 80098ee:	464b      	mov	r3, r9
 80098f0:	f7f6 fc34 	bl	800015c <__adddf3>
 80098f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098f8:	f7f6 fde6 	bl	80004c8 <__aeabi_dmul>
 80098fc:	4622      	mov	r2, r4
 80098fe:	462b      	mov	r3, r5
 8009900:	f7f6 fc2c 	bl	800015c <__adddf3>
 8009904:	4642      	mov	r2, r8
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	464b      	mov	r3, r9
 800990c:	4640      	mov	r0, r8
 800990e:	4649      	mov	r1, r9
 8009910:	f7f6 fdda 	bl	80004c8 <__aeabi_dmul>
 8009914:	2200      	movs	r2, #0
 8009916:	4b66      	ldr	r3, [pc, #408]	; (8009ab0 <__ieee754_pow+0x748>)
 8009918:	4682      	mov	sl, r0
 800991a:	468b      	mov	fp, r1
 800991c:	f7f6 fc1e 	bl	800015c <__adddf3>
 8009920:	4632      	mov	r2, r6
 8009922:	463b      	mov	r3, r7
 8009924:	f7f6 fc1a 	bl	800015c <__adddf3>
 8009928:	2400      	movs	r4, #0
 800992a:	460d      	mov	r5, r1
 800992c:	4622      	mov	r2, r4
 800992e:	460b      	mov	r3, r1
 8009930:	4640      	mov	r0, r8
 8009932:	4649      	mov	r1, r9
 8009934:	f7f6 fdc8 	bl	80004c8 <__aeabi_dmul>
 8009938:	2200      	movs	r2, #0
 800993a:	4680      	mov	r8, r0
 800993c:	4689      	mov	r9, r1
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	4b5b      	ldr	r3, [pc, #364]	; (8009ab0 <__ieee754_pow+0x748>)
 8009944:	f7f6 fc08 	bl	8000158 <__aeabi_dsub>
 8009948:	4652      	mov	r2, sl
 800994a:	465b      	mov	r3, fp
 800994c:	f7f6 fc04 	bl	8000158 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f6 fbfe 	bl	8000158 <__aeabi_dsub>
 800995c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009960:	f7f6 fdb2 	bl	80004c8 <__aeabi_dmul>
 8009964:	4622      	mov	r2, r4
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800996e:	462b      	mov	r3, r5
 8009970:	f7f6 fdaa 	bl	80004c8 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fbee 	bl	800015c <__adddf3>
 8009980:	2400      	movs	r4, #0
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4640      	mov	r0, r8
 800998c:	4649      	mov	r1, r9
 800998e:	f7f6 fbe5 	bl	800015c <__adddf3>
 8009992:	a33b      	add	r3, pc, #236	; (adr r3, 8009a80 <__ieee754_pow+0x718>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	4620      	mov	r0, r4
 800999a:	460d      	mov	r5, r1
 800999c:	f7f6 fd94 	bl	80004c8 <__aeabi_dmul>
 80099a0:	4642      	mov	r2, r8
 80099a2:	464b      	mov	r3, r9
 80099a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099a8:	4620      	mov	r0, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	f7f6 fbd4 	bl	8000158 <__aeabi_dsub>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f6 fbce 	bl	8000158 <__aeabi_dsub>
 80099bc:	a332      	add	r3, pc, #200	; (adr r3, 8009a88 <__ieee754_pow+0x720>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fd81 	bl	80004c8 <__aeabi_dmul>
 80099c6:	a332      	add	r3, pc, #200	; (adr r3, 8009a90 <__ieee754_pow+0x728>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	4620      	mov	r0, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	f7f6 fd78 	bl	80004c8 <__aeabi_dmul>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fbbc 	bl	800015c <__adddf3>
 80099e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099e6:	4b33      	ldr	r3, [pc, #204]	; (8009ab4 <__ieee754_pow+0x74c>)
 80099e8:	f04f 0a00 	mov.w	sl, #0
 80099ec:	4413      	add	r3, r2
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fbb3 	bl	800015c <__adddf3>
 80099f6:	4680      	mov	r8, r0
 80099f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80099fa:	4689      	mov	r9, r1
 80099fc:	f7f6 fcfa 	bl	80003f4 <__aeabi_i2d>
 8009a00:	4604      	mov	r4, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a06:	4b2c      	ldr	r3, [pc, #176]	; (8009ab8 <__ieee754_pow+0x750>)
 8009a08:	4413      	add	r3, r2
 8009a0a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a0e:	4642      	mov	r2, r8
 8009a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a14:	464b      	mov	r3, r9
 8009a16:	f7f6 fba1 	bl	800015c <__adddf3>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	f7f6 fb9d 	bl	800015c <__adddf3>
 8009a22:	4622      	mov	r2, r4
 8009a24:	462b      	mov	r3, r5
 8009a26:	f7f6 fb99 	bl	800015c <__adddf3>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	4650      	mov	r0, sl
 8009a30:	468b      	mov	fp, r1
 8009a32:	f7f6 fb91 	bl	8000158 <__aeabi_dsub>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	f7f6 fb8d 	bl	8000158 <__aeabi_dsub>
 8009a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a42:	f7f6 fb89 	bl	8000158 <__aeabi_dsub>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	e60d      	b.n	800966c <__ieee754_pow+0x304>
 8009a50:	4a454eef 	.word	0x4a454eef
 8009a54:	3fca7e28 	.word	0x3fca7e28
 8009a58:	93c9db65 	.word	0x93c9db65
 8009a5c:	3fcd864a 	.word	0x3fcd864a
 8009a60:	a91d4101 	.word	0xa91d4101
 8009a64:	3fd17460 	.word	0x3fd17460
 8009a68:	518f264d 	.word	0x518f264d
 8009a6c:	3fd55555 	.word	0x3fd55555
 8009a70:	db6fabff 	.word	0xdb6fabff
 8009a74:	3fdb6db6 	.word	0x3fdb6db6
 8009a78:	33333303 	.word	0x33333303
 8009a7c:	3fe33333 	.word	0x3fe33333
 8009a80:	e0000000 	.word	0xe0000000
 8009a84:	3feec709 	.word	0x3feec709
 8009a88:	dc3a03fd 	.word	0xdc3a03fd
 8009a8c:	3feec709 	.word	0x3feec709
 8009a90:	145b01f5 	.word	0x145b01f5
 8009a94:	be3e2fe0 	.word	0xbe3e2fe0
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	43400000 	.word	0x43400000
 8009aa0:	0003988e 	.word	0x0003988e
 8009aa4:	000bb679 	.word	0x000bb679
 8009aa8:	0800a0a0 	.word	0x0800a0a0
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	40080000 	.word	0x40080000
 8009ab4:	0800a0c0 	.word	0x0800a0c0
 8009ab8:	0800a0b0 	.word	0x0800a0b0
 8009abc:	2601      	movs	r6, #1
 8009abe:	e66a      	b.n	8009796 <__ieee754_pow+0x42e>
 8009ac0:	a39d      	add	r3, pc, #628	; (adr r3, 8009d38 <__ieee754_pow+0x9d0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f6 fb47 	bl	800015c <__adddf3>
 8009ace:	4622      	mov	r2, r4
 8009ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad4:	462b      	mov	r3, r5
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fb3d 	bl	8000158 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae6:	f7f6 ff7f 	bl	80009e8 <__aeabi_dcmpgt>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f47f ae09 	bne.w	8009702 <__ieee754_pow+0x39a>
 8009af0:	4aa3      	ldr	r2, [pc, #652]	; (8009d80 <__ieee754_pow+0xa18>)
 8009af2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009af6:	4293      	cmp	r3, r2
 8009af8:	f340 8101 	ble.w	8009cfe <__ieee754_pow+0x996>
 8009afc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b00:	2000      	movs	r0, #0
 8009b02:	151b      	asrs	r3, r3, #20
 8009b04:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b08:	fa4a f303 	asr.w	r3, sl, r3
 8009b0c:	4433      	add	r3, r6
 8009b0e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009b12:	4f9c      	ldr	r7, [pc, #624]	; (8009d84 <__ieee754_pow+0xa1c>)
 8009b14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b18:	4117      	asrs	r7, r2
 8009b1a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009b1e:	ea23 0107 	bic.w	r1, r3, r7
 8009b22:	f1c2 0214 	rsb	r2, r2, #20
 8009b26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	fa4a fa02 	asr.w	sl, sl, r2
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	4602      	mov	r2, r0
 8009b34:	4629      	mov	r1, r5
 8009b36:	4620      	mov	r0, r4
 8009b38:	bfb8      	it	lt
 8009b3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b3e:	f7f6 fb0b 	bl	8000158 <__aeabi_dsub>
 8009b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	464b      	mov	r3, r9
 8009b50:	f7f6 fb04 	bl	800015c <__adddf3>
 8009b54:	a37a      	add	r3, pc, #488	; (adr r3, 8009d40 <__ieee754_pow+0x9d8>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	f7f6 fcb3 	bl	80004c8 <__aeabi_dmul>
 8009b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7f6 faf3 	bl	8000158 <__aeabi_dsub>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 faed 	bl	8000158 <__aeabi_dsub>
 8009b7e:	a372      	add	r3, pc, #456	; (adr r3, 8009d48 <__ieee754_pow+0x9e0>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 fca0 	bl	80004c8 <__aeabi_dmul>
 8009b88:	a371      	add	r3, pc, #452	; (adr r3, 8009d50 <__ieee754_pow+0x9e8>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	4680      	mov	r8, r0
 8009b90:	4689      	mov	r9, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fc97 	bl	80004c8 <__aeabi_dmul>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	f7f6 fadb 	bl	800015c <__adddf3>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	460d      	mov	r5, r1
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fad3 	bl	800015c <__adddf3>
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	463b      	mov	r3, r7
 8009bba:	4680      	mov	r8, r0
 8009bbc:	4689      	mov	r9, r1
 8009bbe:	f7f6 facb 	bl	8000158 <__aeabi_dsub>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 fac5 	bl	8000158 <__aeabi_dsub>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	464b      	mov	r3, r9
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fc75 	bl	80004c8 <__aeabi_dmul>
 8009bde:	a35e      	add	r3, pc, #376	; (adr r3, 8009d58 <__ieee754_pow+0x9f0>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	4604      	mov	r4, r0
 8009be6:	460d      	mov	r5, r1
 8009be8:	f7f6 fc6e 	bl	80004c8 <__aeabi_dmul>
 8009bec:	a35c      	add	r3, pc, #368	; (adr r3, 8009d60 <__ieee754_pow+0x9f8>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f7f6 fab1 	bl	8000158 <__aeabi_dsub>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f7f6 fc65 	bl	80004c8 <__aeabi_dmul>
 8009bfe:	a35a      	add	r3, pc, #360	; (adr r3, 8009d68 <__ieee754_pow+0xa00>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 faaa 	bl	800015c <__adddf3>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	462b      	mov	r3, r5
 8009c0c:	f7f6 fc5c 	bl	80004c8 <__aeabi_dmul>
 8009c10:	a357      	add	r3, pc, #348	; (adr r3, 8009d70 <__ieee754_pow+0xa08>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 fa9f 	bl	8000158 <__aeabi_dsub>
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	f7f6 fc53 	bl	80004c8 <__aeabi_dmul>
 8009c22:	a355      	add	r3, pc, #340	; (adr r3, 8009d78 <__ieee754_pow+0xa10>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fa98 	bl	800015c <__adddf3>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	f7f6 fc4a 	bl	80004c8 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 fa8c 	bl	8000158 <__aeabi_dsub>
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 fc3c 	bl	80004c8 <__aeabi_dmul>
 8009c50:	2200      	movs	r2, #0
 8009c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fa7b 	bl	8000158 <__aeabi_dsub>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6a:	f7f6 fd57 	bl	800071c <__aeabi_ddiv>
 8009c6e:	4632      	mov	r2, r6
 8009c70:	4604      	mov	r4, r0
 8009c72:	460d      	mov	r5, r1
 8009c74:	463b      	mov	r3, r7
 8009c76:	4640      	mov	r0, r8
 8009c78:	4649      	mov	r1, r9
 8009c7a:	f7f6 fc25 	bl	80004c8 <__aeabi_dmul>
 8009c7e:	4632      	mov	r2, r6
 8009c80:	463b      	mov	r3, r7
 8009c82:	f7f6 fa6b 	bl	800015c <__adddf3>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fa63 	bl	8000158 <__aeabi_dsub>
 8009c92:	4642      	mov	r2, r8
 8009c94:	464b      	mov	r3, r9
 8009c96:	f7f6 fa5f 	bl	8000158 <__aeabi_dsub>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	4939      	ldr	r1, [pc, #228]	; (8009d88 <__ieee754_pow+0xa20>)
 8009ca2:	f7f6 fa59 	bl	8000158 <__aeabi_dsub>
 8009ca6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009caa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009cae:	da29      	bge.n	8009d04 <__ieee754_pow+0x99c>
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	f000 f955 	bl	8009f60 <scalbn>
 8009cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cba:	f7ff bbfe 	b.w	80094ba <__ieee754_pow+0x152>
 8009cbe:	4b33      	ldr	r3, [pc, #204]	; (8009d8c <__ieee754_pow+0xa24>)
 8009cc0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009cc4:	429f      	cmp	r7, r3
 8009cc6:	f77f af13 	ble.w	8009af0 <__ieee754_pow+0x788>
 8009cca:	4b31      	ldr	r3, [pc, #196]	; (8009d90 <__ieee754_pow+0xa28>)
 8009ccc:	440b      	add	r3, r1
 8009cce:	4303      	orrs	r3, r0
 8009cd0:	d009      	beq.n	8009ce6 <__ieee754_pow+0x97e>
 8009cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f7f6 fe67 	bl	80009ac <__aeabi_dcmplt>
 8009cde:	3800      	subs	r0, #0
 8009ce0:	bf18      	it	ne
 8009ce2:	2001      	movne	r0, #1
 8009ce4:	e453      	b.n	800958e <__ieee754_pow+0x226>
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	f7f6 fa35 	bl	8000158 <__aeabi_dsub>
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	f7f6 fe6f 	bl	80009d4 <__aeabi_dcmpge>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f43f aefa 	beq.w	8009af0 <__ieee754_pow+0x788>
 8009cfc:	e7e9      	b.n	8009cd2 <__ieee754_pow+0x96a>
 8009cfe:	f04f 0a00 	mov.w	sl, #0
 8009d02:	e720      	b.n	8009b46 <__ieee754_pow+0x7de>
 8009d04:	4621      	mov	r1, r4
 8009d06:	e7d6      	b.n	8009cb6 <__ieee754_pow+0x94e>
 8009d08:	f04f 0b00 	mov.w	fp, #0
 8009d0c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009d88 <__ieee754_pow+0xa20>
 8009d10:	f7ff bbba 	b.w	8009488 <__ieee754_pow+0x120>
 8009d14:	f04f 0b00 	mov.w	fp, #0
 8009d18:	f04f 0c00 	mov.w	ip, #0
 8009d1c:	f7ff bbb4 	b.w	8009488 <__ieee754_pow+0x120>
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7ff bb3d 	b.w	80093a2 <__ieee754_pow+0x3a>
 8009d28:	9200      	str	r2, [sp, #0]
 8009d2a:	f7ff bb89 	b.w	8009440 <__ieee754_pow+0xd8>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f7ff bb73 	b.w	800941a <__ieee754_pow+0xb2>
 8009d34:	f3af 8000 	nop.w
 8009d38:	652b82fe 	.word	0x652b82fe
 8009d3c:	3c971547 	.word	0x3c971547
 8009d40:	00000000 	.word	0x00000000
 8009d44:	3fe62e43 	.word	0x3fe62e43
 8009d48:	fefa39ef 	.word	0xfefa39ef
 8009d4c:	3fe62e42 	.word	0x3fe62e42
 8009d50:	0ca86c39 	.word	0x0ca86c39
 8009d54:	be205c61 	.word	0xbe205c61
 8009d58:	72bea4d0 	.word	0x72bea4d0
 8009d5c:	3e663769 	.word	0x3e663769
 8009d60:	c5d26bf1 	.word	0xc5d26bf1
 8009d64:	3ebbbd41 	.word	0x3ebbbd41
 8009d68:	af25de2c 	.word	0xaf25de2c
 8009d6c:	3f11566a 	.word	0x3f11566a
 8009d70:	16bebd93 	.word	0x16bebd93
 8009d74:	3f66c16c 	.word	0x3f66c16c
 8009d78:	5555553e 	.word	0x5555553e
 8009d7c:	3fc55555 	.word	0x3fc55555
 8009d80:	3fe00000 	.word	0x3fe00000
 8009d84:	000fffff 	.word	0x000fffff
 8009d88:	3ff00000 	.word	0x3ff00000
 8009d8c:	4090cbff 	.word	0x4090cbff
 8009d90:	3f6f3400 	.word	0x3f6f3400

08009d94 <__ieee754_sqrt>:
 8009d94:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009ef0 <__ieee754_sqrt+0x15c>
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009da0:	4606      	mov	r6, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	460c      	mov	r4, r1
 8009da6:	460a      	mov	r2, r1
 8009da8:	4607      	mov	r7, r0
 8009daa:	4603      	mov	r3, r0
 8009dac:	d10f      	bne.n	8009dce <__ieee754_sqrt+0x3a>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	f7f6 fb89 	bl	80004c8 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4630      	mov	r0, r6
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 f9cd 	bl	800015c <__adddf3>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4629      	mov	r1, r5
 8009dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	dc0e      	bgt.n	8009df0 <__ieee754_sqrt+0x5c>
 8009dd2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009dd6:	ea5c 0707 	orrs.w	r7, ip, r7
 8009dda:	d0f4      	beq.n	8009dc6 <__ieee754_sqrt+0x32>
 8009ddc:	b141      	cbz	r1, 8009df0 <__ieee754_sqrt+0x5c>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	f7f6 f9b9 	bl	8000158 <__aeabi_dsub>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	f7f6 fc97 	bl	800071c <__aeabi_ddiv>
 8009dee:	e7e8      	b.n	8009dc2 <__ieee754_sqrt+0x2e>
 8009df0:	1521      	asrs	r1, r4, #20
 8009df2:	d075      	beq.n	8009ee0 <__ieee754_sqrt+0x14c>
 8009df4:	07cc      	lsls	r4, r1, #31
 8009df6:	f04f 0400 	mov.w	r4, #0
 8009dfa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009dfe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009e02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e06:	bf5e      	ittt	pl
 8009e08:	0fd9      	lsrpl	r1, r3, #31
 8009e0a:	005b      	lslpl	r3, r3, #1
 8009e0c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009e10:	0fd9      	lsrs	r1, r3, #31
 8009e12:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009e16:	2516      	movs	r5, #22
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e1e:	107f      	asrs	r7, r7, #1
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	1846      	adds	r6, r0, r1
 8009e24:	4296      	cmp	r6, r2
 8009e26:	bfde      	ittt	le
 8009e28:	1b92      	suble	r2, r2, r6
 8009e2a:	1870      	addle	r0, r6, r1
 8009e2c:	1864      	addle	r4, r4, r1
 8009e2e:	0052      	lsls	r2, r2, #1
 8009e30:	3d01      	subs	r5, #1
 8009e32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e3e:	d1f0      	bne.n	8009e22 <__ieee754_sqrt+0x8e>
 8009e40:	4629      	mov	r1, r5
 8009e42:	f04f 0e20 	mov.w	lr, #32
 8009e46:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e4a:	4282      	cmp	r2, r0
 8009e4c:	eb06 0c05 	add.w	ip, r6, r5
 8009e50:	dc02      	bgt.n	8009e58 <__ieee754_sqrt+0xc4>
 8009e52:	d113      	bne.n	8009e7c <__ieee754_sqrt+0xe8>
 8009e54:	459c      	cmp	ip, r3
 8009e56:	d811      	bhi.n	8009e7c <__ieee754_sqrt+0xe8>
 8009e58:	f1bc 0f00 	cmp.w	ip, #0
 8009e5c:	eb0c 0506 	add.w	r5, ip, r6
 8009e60:	da43      	bge.n	8009eea <__ieee754_sqrt+0x156>
 8009e62:	2d00      	cmp	r5, #0
 8009e64:	db41      	blt.n	8009eea <__ieee754_sqrt+0x156>
 8009e66:	f100 0801 	add.w	r8, r0, #1
 8009e6a:	1a12      	subs	r2, r2, r0
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	459c      	cmp	ip, r3
 8009e70:	bf88      	it	hi
 8009e72:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009e76:	eba3 030c 	sub.w	r3, r3, ip
 8009e7a:	4431      	add	r1, r6
 8009e7c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009e80:	f1be 0e01 	subs.w	lr, lr, #1
 8009e84:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009e88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e90:	d1db      	bne.n	8009e4a <__ieee754_sqrt+0xb6>
 8009e92:	4313      	orrs	r3, r2
 8009e94:	d006      	beq.n	8009ea4 <__ieee754_sqrt+0x110>
 8009e96:	1c48      	adds	r0, r1, #1
 8009e98:	bf0b      	itete	eq
 8009e9a:	4671      	moveq	r1, lr
 8009e9c:	3101      	addne	r1, #1
 8009e9e:	3401      	addeq	r4, #1
 8009ea0:	f021 0101 	bicne.w	r1, r1, #1
 8009ea4:	1063      	asrs	r3, r4, #1
 8009ea6:	0849      	lsrs	r1, r1, #1
 8009ea8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009eac:	07e2      	lsls	r2, r4, #31
 8009eae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009eb2:	bf48      	it	mi
 8009eb4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009eb8:	460e      	mov	r6, r1
 8009eba:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009ebe:	e782      	b.n	8009dc6 <__ieee754_sqrt+0x32>
 8009ec0:	0ada      	lsrs	r2, r3, #11
 8009ec2:	3815      	subs	r0, #21
 8009ec4:	055b      	lsls	r3, r3, #21
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d0fa      	beq.n	8009ec0 <__ieee754_sqrt+0x12c>
 8009eca:	02d5      	lsls	r5, r2, #11
 8009ecc:	d50a      	bpl.n	8009ee4 <__ieee754_sqrt+0x150>
 8009ece:	f1c1 0420 	rsb	r4, r1, #32
 8009ed2:	fa23 f404 	lsr.w	r4, r3, r4
 8009ed6:	1e4d      	subs	r5, r1, #1
 8009ed8:	408b      	lsls	r3, r1
 8009eda:	4322      	orrs	r2, r4
 8009edc:	1b41      	subs	r1, r0, r5
 8009ede:	e789      	b.n	8009df4 <__ieee754_sqrt+0x60>
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	e7f0      	b.n	8009ec6 <__ieee754_sqrt+0x132>
 8009ee4:	0052      	lsls	r2, r2, #1
 8009ee6:	3101      	adds	r1, #1
 8009ee8:	e7ef      	b.n	8009eca <__ieee754_sqrt+0x136>
 8009eea:	4680      	mov	r8, r0
 8009eec:	e7bd      	b.n	8009e6a <__ieee754_sqrt+0xd6>
 8009eee:	bf00      	nop
 8009ef0:	7ff00000 	.word	0x7ff00000

08009ef4 <with_errno>:
 8009ef4:	b570      	push	{r4, r5, r6, lr}
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	4616      	mov	r6, r2
 8009efc:	f7ff f88e 	bl	800901c <__errno>
 8009f00:	4629      	mov	r1, r5
 8009f02:	6006      	str	r6, [r0, #0]
 8009f04:	4620      	mov	r0, r4
 8009f06:	bd70      	pop	{r4, r5, r6, pc}

08009f08 <xflow>:
 8009f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0a:	4615      	mov	r5, r2
 8009f0c:	461c      	mov	r4, r3
 8009f0e:	b180      	cbz	r0, 8009f32 <xflow+0x2a>
 8009f10:	4610      	mov	r0, r2
 8009f12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f16:	e9cd 0100 	strd	r0, r1, [sp]
 8009f1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f1e:	4628      	mov	r0, r5
 8009f20:	4621      	mov	r1, r4
 8009f22:	f7f6 fad1 	bl	80004c8 <__aeabi_dmul>
 8009f26:	2222      	movs	r2, #34	; 0x22
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2e:	f7ff bfe1 	b.w	8009ef4 <with_errno>
 8009f32:	4610      	mov	r0, r2
 8009f34:	4619      	mov	r1, r3
 8009f36:	e7ee      	b.n	8009f16 <xflow+0xe>

08009f38 <__math_uflow>:
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f3e:	f7ff bfe3 	b.w	8009f08 <xflow>

08009f42 <__math_oflow>:
 8009f42:	2200      	movs	r2, #0
 8009f44:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009f48:	f7ff bfde 	b.w	8009f08 <xflow>

08009f4c <fabs>:
 8009f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009f50:	4770      	bx	lr

08009f52 <finite>:
 8009f52:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009f56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f5a:	0fc0      	lsrs	r0, r0, #31
 8009f5c:	4770      	bx	lr
	...

08009f60 <scalbn>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	4617      	mov	r7, r2
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	b996      	cbnz	r6, 8009f96 <scalbn+0x36>
 8009f70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f74:	4303      	orrs	r3, r0
 8009f76:	d039      	beq.n	8009fec <scalbn+0x8c>
 8009f78:	4b33      	ldr	r3, [pc, #204]	; (800a048 <scalbn+0xe8>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f7f6 faa4 	bl	80004c8 <__aeabi_dmul>
 8009f80:	4b32      	ldr	r3, [pc, #200]	; (800a04c <scalbn+0xec>)
 8009f82:	4604      	mov	r4, r0
 8009f84:	429f      	cmp	r7, r3
 8009f86:	460d      	mov	r5, r1
 8009f88:	da0f      	bge.n	8009faa <scalbn+0x4a>
 8009f8a:	a32b      	add	r3, pc, #172	; (adr r3, 800a038 <scalbn+0xd8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 fa9a 	bl	80004c8 <__aeabi_dmul>
 8009f94:	e006      	b.n	8009fa4 <scalbn+0x44>
 8009f96:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009f9a:	4296      	cmp	r6, r2
 8009f9c:	d10a      	bne.n	8009fb4 <scalbn+0x54>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	f7f6 f8dc 	bl	800015c <__adddf3>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	e020      	b.n	8009fec <scalbn+0x8c>
 8009faa:	460b      	mov	r3, r1
 8009fac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009fb0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009fb4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009fb8:	19b9      	adds	r1, r7, r6
 8009fba:	4291      	cmp	r1, r2
 8009fbc:	dd0e      	ble.n	8009fdc <scalbn+0x7c>
 8009fbe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009fc2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009fc6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009fca:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009fce:	4820      	ldr	r0, [pc, #128]	; (800a050 <scalbn+0xf0>)
 8009fd0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009fd4:	a31a      	add	r3, pc, #104	; (adr r3, 800a040 <scalbn+0xe0>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	e7d9      	b.n	8009f90 <scalbn+0x30>
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	dd08      	ble.n	8009ff2 <scalbn+0x92>
 8009fe0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fe8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009ff6:	da12      	bge.n	800a01e <scalbn+0xbe>
 8009ff8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ffc:	429f      	cmp	r7, r3
 8009ffe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a002:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a006:	dcdc      	bgt.n	8009fc2 <scalbn+0x62>
 800a008:	a30b      	add	r3, pc, #44	; (adr r3, 800a038 <scalbn+0xd8>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a012:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a016:	480f      	ldr	r0, [pc, #60]	; (800a054 <scalbn+0xf4>)
 800a018:	f041 011f 	orr.w	r1, r1, #31
 800a01c:	e7b8      	b.n	8009f90 <scalbn+0x30>
 800a01e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a022:	3136      	adds	r1, #54	; 0x36
 800a024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a028:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a02c:	4620      	mov	r0, r4
 800a02e:	4629      	mov	r1, r5
 800a030:	2200      	movs	r2, #0
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <scalbn+0xf8>)
 800a034:	e7ac      	b.n	8009f90 <scalbn+0x30>
 800a036:	bf00      	nop
 800a038:	c2f8f359 	.word	0xc2f8f359
 800a03c:	01a56e1f 	.word	0x01a56e1f
 800a040:	8800759c 	.word	0x8800759c
 800a044:	7e37e43c 	.word	0x7e37e43c
 800a048:	43500000 	.word	0x43500000
 800a04c:	ffff3cb0 	.word	0xffff3cb0
 800a050:	8800759c 	.word	0x8800759c
 800a054:	c2f8f359 	.word	0xc2f8f359
 800a058:	3c900000 	.word	0x3c900000

0800a05c <_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	bf00      	nop
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr

0800a068 <_fini>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr
