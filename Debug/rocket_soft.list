
rocket_soft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a0d8  0800a0d8  0001a0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a130  0800a130  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a138  0800a138  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000007c  0800a1bc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800a1bc  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001291a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a4  00000000  00000000  000329bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00035268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00036448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ef3  00000000  00000000  00037538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b15  00000000  00000000  0005042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb19  00000000  00000000  00064f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005358  00000000  00000000  000f3aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0bc 	.word	0x0800a0bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800a0bc 	.word	0x0800a0bc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_ldivmod>:
 8001070:	b97b      	cbnz	r3, 8001092 <__aeabi_ldivmod+0x22>
 8001072:	b972      	cbnz	r2, 8001092 <__aeabi_ldivmod+0x22>
 8001074:	2900      	cmp	r1, #0
 8001076:	bfbe      	ittt	lt
 8001078:	2000      	movlt	r0, #0
 800107a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800107e:	e006      	blt.n	800108e <__aeabi_ldivmod+0x1e>
 8001080:	bf08      	it	eq
 8001082:	2800      	cmpeq	r0, #0
 8001084:	bf1c      	itt	ne
 8001086:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800108a:	f04f 30ff 	movne.w	r0, #4294967295
 800108e:	f000 b9a9 	b.w	80013e4 <__aeabi_idiv0>
 8001092:	f1ad 0c08 	sub.w	ip, sp, #8
 8001096:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109a:	2900      	cmp	r1, #0
 800109c:	db09      	blt.n	80010b2 <__aeabi_ldivmod+0x42>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1a      	blt.n	80010d8 <__aeabi_ldivmod+0x68>
 80010a2:	f000 f835 	bl	8001110 <__udivmoddi4>
 80010a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db1b      	blt.n	80010f4 <__aeabi_ldivmod+0x84>
 80010bc:	f000 f828 	bl	8001110 <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d6:	4770      	bx	lr
 80010d8:	4252      	negs	r2, r2
 80010da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010de:	f000 f817 	bl	8001110 <__udivmoddi4>
 80010e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ea:	b004      	add	sp, #16
 80010ec:	4240      	negs	r0, r0
 80010ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f2:	4770      	bx	lr
 80010f4:	4252      	negs	r2, r2
 80010f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fa:	f000 f809 	bl	8001110 <__udivmoddi4>
 80010fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001106:	b004      	add	sp, #16
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	4770      	bx	lr

08001110 <__udivmoddi4>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	9e08      	ldr	r6, [sp, #32]
 8001116:	460d      	mov	r5, r1
 8001118:	4604      	mov	r4, r0
 800111a:	4688      	mov	r8, r1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d14d      	bne.n	80011bc <__udivmoddi4+0xac>
 8001120:	428a      	cmp	r2, r1
 8001122:	4694      	mov	ip, r2
 8001124:	d968      	bls.n	80011f8 <__udivmoddi4+0xe8>
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b152      	cbz	r2, 8001142 <__udivmoddi4+0x32>
 800112c:	fa01 f302 	lsl.w	r3, r1, r2
 8001130:	f1c2 0120 	rsb	r1, r2, #32
 8001134:	fa20 f101 	lsr.w	r1, r0, r1
 8001138:	fa0c fc02 	lsl.w	ip, ip, r2
 800113c:	ea41 0803 	orr.w	r8, r1, r3
 8001140:	4094      	lsls	r4, r2
 8001142:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001146:	fbb8 f7f1 	udiv	r7, r8, r1
 800114a:	fa1f fe8c 	uxth.w	lr, ip
 800114e:	fb01 8817 	mls	r8, r1, r7, r8
 8001152:	fb07 f00e 	mul.w	r0, r7, lr
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	d90a      	bls.n	8001176 <__udivmoddi4+0x66>
 8001160:	eb1c 0303 	adds.w	r3, ip, r3
 8001164:	f107 35ff 	add.w	r5, r7, #4294967295
 8001168:	f080 811e 	bcs.w	80013a8 <__udivmoddi4+0x298>
 800116c:	4298      	cmp	r0, r3
 800116e:	f240 811b 	bls.w	80013a8 <__udivmoddi4+0x298>
 8001172:	3f02      	subs	r7, #2
 8001174:	4463      	add	r3, ip
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	fbb3 f0f1 	udiv	r0, r3, r1
 800117c:	fb01 3310 	mls	r3, r1, r0, r3
 8001180:	fb00 fe0e 	mul.w	lr, r0, lr
 8001184:	b2a4      	uxth	r4, r4
 8001186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800118a:	45a6      	cmp	lr, r4
 800118c:	d90a      	bls.n	80011a4 <__udivmoddi4+0x94>
 800118e:	eb1c 0404 	adds.w	r4, ip, r4
 8001192:	f100 33ff 	add.w	r3, r0, #4294967295
 8001196:	f080 8109 	bcs.w	80013ac <__udivmoddi4+0x29c>
 800119a:	45a6      	cmp	lr, r4
 800119c:	f240 8106 	bls.w	80013ac <__udivmoddi4+0x29c>
 80011a0:	4464      	add	r4, ip
 80011a2:	3802      	subs	r0, #2
 80011a4:	2100      	movs	r1, #0
 80011a6:	eba4 040e 	sub.w	r4, r4, lr
 80011aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ae:	b11e      	cbz	r6, 80011b8 <__udivmoddi4+0xa8>
 80011b0:	2300      	movs	r3, #0
 80011b2:	40d4      	lsrs	r4, r2
 80011b4:	e9c6 4300 	strd	r4, r3, [r6]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	428b      	cmp	r3, r1
 80011be:	d908      	bls.n	80011d2 <__udivmoddi4+0xc2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	f000 80ee 	beq.w	80013a2 <__udivmoddi4+0x292>
 80011c6:	2100      	movs	r1, #0
 80011c8:	e9c6 0500 	strd	r0, r5, [r6]
 80011cc:	4608      	mov	r0, r1
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	fab3 f183 	clz	r1, r3
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d14a      	bne.n	8001270 <__udivmoddi4+0x160>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d302      	bcc.n	80011e4 <__udivmoddi4+0xd4>
 80011de:	4282      	cmp	r2, r0
 80011e0:	f200 80fc 	bhi.w	80013dc <__udivmoddi4+0x2cc>
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb65 0303 	sbc.w	r3, r5, r3
 80011ea:	2001      	movs	r0, #1
 80011ec:	4698      	mov	r8, r3
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d0e2      	beq.n	80011b8 <__udivmoddi4+0xa8>
 80011f2:	e9c6 4800 	strd	r4, r8, [r6]
 80011f6:	e7df      	b.n	80011b8 <__udivmoddi4+0xa8>
 80011f8:	b902      	cbnz	r2, 80011fc <__udivmoddi4+0xec>
 80011fa:	deff      	udf	#255	; 0xff
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	2a00      	cmp	r2, #0
 8001202:	f040 8091 	bne.w	8001328 <__udivmoddi4+0x218>
 8001206:	eba1 000c 	sub.w	r0, r1, ip
 800120a:	2101      	movs	r1, #1
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb0 f3f7 	udiv	r3, r0, r7
 8001218:	fb07 0013 	mls	r0, r7, r3, r0
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001222:	fb0e f003 	mul.w	r0, lr, r3
 8001226:	42a8      	cmp	r0, r5
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x12c>
 800122a:	eb1c 0505 	adds.w	r5, ip, r5
 800122e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x12a>
 8001234:	42a8      	cmp	r0, r5
 8001236:	f200 80ce 	bhi.w	80013d6 <__udivmoddi4+0x2c6>
 800123a:	4643      	mov	r3, r8
 800123c:	1a2d      	subs	r5, r5, r0
 800123e:	fbb5 f0f7 	udiv	r0, r5, r7
 8001242:	fb07 5510 	mls	r5, r7, r0, r5
 8001246:	fb0e fe00 	mul.w	lr, lr, r0
 800124a:	b2a4      	uxth	r4, r4
 800124c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001250:	45a6      	cmp	lr, r4
 8001252:	d908      	bls.n	8001266 <__udivmoddi4+0x156>
 8001254:	eb1c 0404 	adds.w	r4, ip, r4
 8001258:	f100 35ff 	add.w	r5, r0, #4294967295
 800125c:	d202      	bcs.n	8001264 <__udivmoddi4+0x154>
 800125e:	45a6      	cmp	lr, r4
 8001260:	f200 80b6 	bhi.w	80013d0 <__udivmoddi4+0x2c0>
 8001264:	4628      	mov	r0, r5
 8001266:	eba4 040e 	sub.w	r4, r4, lr
 800126a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800126e:	e79e      	b.n	80011ae <__udivmoddi4+0x9e>
 8001270:	f1c1 0720 	rsb	r7, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 fc07 	lsr.w	ip, r2, r7
 800127a:	ea4c 0c03 	orr.w	ip, ip, r3
 800127e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001282:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001286:	fbba f8f9 	udiv	r8, sl, r9
 800128a:	fa20 f307 	lsr.w	r3, r0, r7
 800128e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001292:	408d      	lsls	r5, r1
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	431d      	orrs	r5, r3
 800129a:	fa00 f301 	lsl.w	r3, r0, r1
 800129e:	fb08 f00e 	mul.w	r0, r8, lr
 80012a2:	0c2c      	lsrs	r4, r5, #16
 80012a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90b      	bls.n	80012c8 <__udivmoddi4+0x1b8>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80012b8:	f080 8088 	bcs.w	80013cc <__udivmoddi4+0x2bc>
 80012bc:	42a0      	cmp	r0, r4
 80012be:	f240 8085 	bls.w	80013cc <__udivmoddi4+0x2bc>
 80012c2:	f1a8 0802 	sub.w	r8, r8, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	1a24      	subs	r4, r4, r0
 80012ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ce:	fb09 4410 	mls	r4, r9, r0, r4
 80012d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80012d6:	b2ad      	uxth	r5, r5
 80012d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012dc:	45a6      	cmp	lr, r4
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x1e2>
 80012e0:	eb1c 0404 	adds.w	r4, ip, r4
 80012e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e8:	d26c      	bcs.n	80013c4 <__udivmoddi4+0x2b4>
 80012ea:	45a6      	cmp	lr, r4
 80012ec:	d96a      	bls.n	80013c4 <__udivmoddi4+0x2b4>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012f6:	fba0 9502 	umull	r9, r5, r0, r2
 80012fa:	eba4 040e 	sub.w	r4, r4, lr
 80012fe:	42ac      	cmp	r4, r5
 8001300:	46c8      	mov	r8, r9
 8001302:	46ae      	mov	lr, r5
 8001304:	d356      	bcc.n	80013b4 <__udivmoddi4+0x2a4>
 8001306:	d053      	beq.n	80013b0 <__udivmoddi4+0x2a0>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d069      	beq.n	80013e0 <__udivmoddi4+0x2d0>
 800130c:	ebb3 0208 	subs.w	r2, r3, r8
 8001310:	eb64 040e 	sbc.w	r4, r4, lr
 8001314:	fa22 f301 	lsr.w	r3, r2, r1
 8001318:	fa04 f707 	lsl.w	r7, r4, r7
 800131c:	431f      	orrs	r7, r3
 800131e:	40cc      	lsrs	r4, r1
 8001320:	e9c6 7400 	strd	r7, r4, [r6]
 8001324:	2100      	movs	r1, #0
 8001326:	e747      	b.n	80011b8 <__udivmoddi4+0xa8>
 8001328:	fa0c fc02 	lsl.w	ip, ip, r2
 800132c:	f1c2 0120 	rsb	r1, r2, #32
 8001330:	fa25 f301 	lsr.w	r3, r5, r1
 8001334:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001338:	fa20 f101 	lsr.w	r1, r0, r1
 800133c:	4095      	lsls	r5, r2
 800133e:	430d      	orrs	r5, r1
 8001340:	fbb3 f1f7 	udiv	r1, r3, r7
 8001344:	fb07 3311 	mls	r3, r7, r1, r3
 8001348:	fa1f fe8c 	uxth.w	lr, ip
 800134c:	0c28      	lsrs	r0, r5, #16
 800134e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001352:	fb01 f30e 	mul.w	r3, r1, lr
 8001356:	4283      	cmp	r3, r0
 8001358:	fa04 f402 	lsl.w	r4, r4, r2
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x260>
 800135e:	eb1c 0000 	adds.w	r0, ip, r0
 8001362:	f101 38ff 	add.w	r8, r1, #4294967295
 8001366:	d22f      	bcs.n	80013c8 <__udivmoddi4+0x2b8>
 8001368:	4283      	cmp	r3, r0
 800136a:	d92d      	bls.n	80013c8 <__udivmoddi4+0x2b8>
 800136c:	3902      	subs	r1, #2
 800136e:	4460      	add	r0, ip
 8001370:	1ac0      	subs	r0, r0, r3
 8001372:	fbb0 f3f7 	udiv	r3, r0, r7
 8001376:	fb07 0013 	mls	r0, r7, r3, r0
 800137a:	b2ad      	uxth	r5, r5
 800137c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001380:	fb03 f00e 	mul.w	r0, r3, lr
 8001384:	42a8      	cmp	r0, r5
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x28a>
 8001388:	eb1c 0505 	adds.w	r5, ip, r5
 800138c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001390:	d216      	bcs.n	80013c0 <__udivmoddi4+0x2b0>
 8001392:	42a8      	cmp	r0, r5
 8001394:	d914      	bls.n	80013c0 <__udivmoddi4+0x2b0>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	1a28      	subs	r0, r5, r0
 800139c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013a0:	e738      	b.n	8001214 <__udivmoddi4+0x104>
 80013a2:	4631      	mov	r1, r6
 80013a4:	4630      	mov	r0, r6
 80013a6:	e707      	b.n	80011b8 <__udivmoddi4+0xa8>
 80013a8:	462f      	mov	r7, r5
 80013aa:	e6e4      	b.n	8001176 <__udivmoddi4+0x66>
 80013ac:	4618      	mov	r0, r3
 80013ae:	e6f9      	b.n	80011a4 <__udivmoddi4+0x94>
 80013b0:	454b      	cmp	r3, r9
 80013b2:	d2a9      	bcs.n	8001308 <__udivmoddi4+0x1f8>
 80013b4:	ebb9 0802 	subs.w	r8, r9, r2
 80013b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013bc:	3801      	subs	r0, #1
 80013be:	e7a3      	b.n	8001308 <__udivmoddi4+0x1f8>
 80013c0:	4643      	mov	r3, r8
 80013c2:	e7ea      	b.n	800139a <__udivmoddi4+0x28a>
 80013c4:	4628      	mov	r0, r5
 80013c6:	e794      	b.n	80012f2 <__udivmoddi4+0x1e2>
 80013c8:	4641      	mov	r1, r8
 80013ca:	e7d1      	b.n	8001370 <__udivmoddi4+0x260>
 80013cc:	46d0      	mov	r8, sl
 80013ce:	e77b      	b.n	80012c8 <__udivmoddi4+0x1b8>
 80013d0:	4464      	add	r4, ip
 80013d2:	3802      	subs	r0, #2
 80013d4:	e747      	b.n	8001266 <__udivmoddi4+0x156>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	4465      	add	r5, ip
 80013da:	e72f      	b.n	800123c <__udivmoddi4+0x12c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e706      	b.n	80011ee <__udivmoddi4+0xde>
 80013e0:	4631      	mov	r1, r6
 80013e2:	e6e9      	b.n	80011b8 <__udivmoddi4+0xa8>

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <HAL_TIM_PeriodElapsedCallback>:
uint8_t press_receiv = 0;
int MPU_Count = 0;


// INTERRUPÇAO CONFIGURADA PARA 5 m/s (200Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim4.Instance){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d11d      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
    		MPU_Count = 0;
    		data_bar = 0x01;
		*/

			// Recebe dados pela SERIAL para SOFTWARE IN THE LOOP
			if (data_received_count == 0) {
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x2e>
				HAL_UART_Transmit_IT(&huart2, rx_byte, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800140a:	f007 f9e4 	bl	80087d6 <HAL_UART_Transmit_IT>
				data_received_count = 1;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
				data_UART = 0x01;
				data_received_count++;
    	}
	}
}
 8001414:	e010      	b.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
			else if (data_received_count != 0){
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00c      	beq.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x50>
				HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
 800141e:	2210      	movs	r2, #16
 8001420:	490b      	ldr	r1, [pc, #44]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001424:	f007 fa1b 	bl	800885e <HAL_UART_Receive_IT>
				data_UART = 0x01;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
				data_received_count++;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000314 	.word	0x20000314
 8001444:	200000c8 	.word	0x200000c8
 8001448:	20000000 	.word	0x20000000
 800144c:	2000035c 	.word	0x2000035c
 8001450:	200000d8 	.word	0x200000d8
 8001454:	200000cc 	.word	0x200000cc

08001458 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == hi2c1.Instance){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b74      	ldr	r3, [pc, #464]	; (8001638 <HAL_I2C_MemRxCpltCallback+0x1e0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d141      	bne.n	80014f0 <HAL_I2C_MemRxCpltCallback+0x98>
    		acc_data.Ax = (int16_t)(rec_data[0] << 8 | rec_data[1]);
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b71      	ldr	r3, [pc, #452]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001480:	801a      	strh	r2, [r3, #0]
    		acc_data.Ay = (int16_t)(rec_data[2] << 8 | rec_data[3]);
 8001482:	4b6e      	ldr	r3, [pc, #440]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b6c      	ldr	r3, [pc, #432]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001496:	805a      	strh	r2, [r3, #2]
    		acc_data.Az = (int16_t)(rec_data[4] << 8 | rec_data[5]);
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014a2:	795b      	ldrb	r3, [r3, #5]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 80014ac:	809a      	strh	r2, [r3, #4]
    		gy_data.Gx = (int16_t)(rec_data[8] << 8  | rec_data[9]);
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014b0:	7a1b      	ldrb	r3, [r3, #8]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014b8:	7a5b      	ldrb	r3, [r3, #9]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21a      	sxth	r2, r3
 80014c0:	4b60      	ldr	r3, [pc, #384]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014c2:	801a      	strh	r2, [r3, #0]
    		gy_data.Gy = (int16_t)(rec_data[10] << 8 | rec_data[11]);
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014c6:	7a9b      	ldrb	r3, [r3, #10]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014ce:	7adb      	ldrb	r3, [r3, #11]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014d8:	805a      	strh	r2, [r3, #2]
    		gy_data.Gz = (int16_t)(rec_data[12] << 8 | rec_data[13]);
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_I2C_MemRxCpltCallback+0x1e4>)
 80014e4:	7b5b      	ldrb	r3, [r3, #13]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b55      	ldr	r3, [pc, #340]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 80014ee:	809a      	strh	r2, [r3, #4]
    		/* To debug
    		transf_MPU6050_1();
    		*/
    }

    if (hi2c->Instance == hi2c2.Instance) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8098 	bne.w	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    	if(data_accel == 0x01){
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d141      	bne.n	800158a <HAL_I2C_MemRxCpltCallback+0x132>
    		acc_data.Ax2 = (int16_t)(rec_data2[0] << 8 | rec_data2[1]);
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 800151a:	80da      	strh	r2, [r3, #6]
    		acc_data.Ay2 = (int16_t)(rec_data2[2] << 8 | rec_data2[3]);
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001530:	811a      	strh	r2, [r3, #8]
    		acc_data.Az2 = (int16_t)(rec_data2[4] << 8 | rec_data2[5]);
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800153c:	795b      	ldrb	r3, [r3, #5]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8001546:	815a      	strh	r2, [r3, #10]
    		gy_data.Gx2 = (int16_t)(rec_data2[8] << 8  | rec_data2[9]);
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800154a:	7a1b      	ldrb	r3, [r3, #8]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001552:	7a5b      	ldrb	r3, [r3, #9]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 800155c:	80da      	strh	r2, [r3, #6]
    		gy_data.Gy2 = (int16_t)(rec_data2[10] << 8 | rec_data2[11]);
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001560:	7a9b      	ldrb	r3, [r3, #10]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001568:	7adb      	ldrb	r3, [r3, #11]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 8001572:	811a      	strh	r2, [r3, #8]
    		gy_data.Gz2 = (int16_t)(rec_data2[12] << 8 | rec_data2[13]);
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 800157e:	7b5b      	ldrb	r3, [r3, #13]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_I2C_MemRxCpltCallback+0x1ec>)
 8001588:	815a      	strh	r2, [r3, #10]
    		/* To debug
    		 transf_MPU6050_2();
    		*/
    	}
    	if(data_bar == 0x01){
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d14d      	bne.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    		pRaw = (Data[0]<<12)|(Data[1]<<4)|(Data[2]>>4);
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	031a      	lsls	r2, r3, #12
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4313      	orrs	r3, r2
 80015a0:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015a2:	7892      	ldrb	r2, [r2, #2]
 80015a4:	0912      	lsrs	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	4313      	orrs	r3, r2
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 80015ac:	6013      	str	r3, [r2, #0]
    		tRaw = (Data[3]<<12)|(Data[4]<<4)|(Data[5]>>4);
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015b0:	78db      	ldrb	r3, [r3, #3]
 80015b2:	031a      	lsls	r2, r3, #12
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_I2C_MemRxCpltCallback+0x200>)
 80015be:	7952      	ldrb	r2, [r2, #5]
 80015c0:	0912      	lsrs	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	4313      	orrs	r3, r2
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015c8:	6013      	str	r3, [r2, #0]

    		data_bar = 0x00;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

    		if (data_bar == 0x00){
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d123      	bne.n	8001620 <HAL_I2C_MemRxCpltCallback+0x1c8>
    			if (tRaw != 0x800000){
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015e0:	d008      	beq.n	80015f4 <HAL_I2C_MemRxCpltCallback+0x19c>
    				bmp_data.temperature = (bmp280_compensate_T_int32(tRaw));  // x/100.0 temp
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_I2C_MemRxCpltCallback+0x208>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fb2a 	bl	8001c40 <bmp280_compensate_T_int32>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 80015f0:	6053      	str	r3, [r2, #4]
 80015f2:	e002      	b.n	80015fa <HAL_I2C_MemRxCpltCallback+0x1a2>
    			}
    			else{
    				bmp_data.temperature = 0; // value in case temp measurement was disabled
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
    			}
    			if (pRaw != 0x800000){
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001602:	d009      	beq.n	8001618 <HAL_I2C_MemRxCpltCallback+0x1c0>
    				// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
    				// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
    				bmp_data.pressure = (bmp280_compensate_P_int32(pRaw));
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MemRxCpltCallback+0x204>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fb59 	bl	8001cc0 <bmp280_compensate_P_int32>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001614:	601a      	str	r2, [r3, #0]
    	/* To debug
    	transf_BMP280();
    	*/
    }
  }
}
 8001616:	e00a      	b.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    				bmp_data.pressure = 0; // value in case temp measurement was disabled
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	e006      	b.n	800162e <HAL_I2C_MemRxCpltCallback+0x1d6>
    			bmp_data.temperature = bmp_data.pressure = 0;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_I2C_MemRxCpltCallback+0x20c>)
 800162c:	6053      	str	r3, [r2, #4]
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000214 	.word	0x20000214
 800163c:	200000a8 	.word	0x200000a8
 8001640:	20000100 	.word	0x20000100
 8001644:	2000010c 	.word	0x2000010c
 8001648:	20000268 	.word	0x20000268
 800164c:	2000009e 	.word	0x2000009e
 8001650:	200000b8 	.word	0x200000b8
 8001654:	2000009f 	.word	0x2000009f
 8001658:	20000098 	.word	0x20000098
 800165c:	200000a4 	.word	0x200000a4
 8001660:	200000a0 	.word	0x200000a0
 8001664:	20000118 	.word	0x20000118

08001668 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	0000      	movs	r0, r0
 800167c:	0000      	movs	r0, r0
	...

08001680 <HAL_UART_RxCpltCallback>:

// SOFTWARE IN THE LOOP
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b54      	ldr	r3, [pc, #336]	; (80017e0 <HAL_UART_RxCpltCallback+0x160>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8099 	bne.w	80017c8 <HAL_UART_RxCpltCallback+0x148>
		if(data_UART == 0x01) {
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_UART_RxCpltCallback+0x164>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	f040 8091 	bne.w	80017c2 <HAL_UART_RxCpltCallback+0x142>
			data_hex = (rx_buffer[0] << 24) | (rx_buffer[1] << 16) | (rx_buffer[2] << 8) | rx_buffer[3];
 80016a0:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016b8:	78d2      	ldrb	r2, [r2, #3]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016c0:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016c8:	6013      	str	r3, [r2, #0]
			simulated_data.accel_x = data_float;
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a49      	ldr	r2, [pc, #292]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 80016d0:	6013      	str	r3, [r2, #0]

			data_hex = (rx_buffer[4] << 24) | (rx_buffer[5] << 16) | (rx_buffer[6] << 8) | rx_buffer[7];
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	061a      	lsls	r2, r3, #24
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016da:	795b      	ldrb	r3, [r3, #5]
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	4313      	orrs	r3, r2
 80016e8:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 80016ea:	79d2      	ldrb	r2, [r2, #7]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016f2:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016fa:	6013      	str	r3, [r2, #0]
			simulated_data.accel_y = data_float;
 80016fc:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001702:	6053      	str	r3, [r2, #4]

			data_hex = (rx_buffer[8] << 24) | (rx_buffer[9] << 16) | (rx_buffer[10] << 8) | rx_buffer[11];
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001706:	7a1b      	ldrb	r3, [r3, #8]
 8001708:	061a      	lsls	r2, r3, #24
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	431a      	orrs	r2, r3
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001714:	7a9b      	ldrb	r3, [r3, #10]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4313      	orrs	r3, r2
 800171a:	4a33      	ldr	r2, [pc, #204]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800171c:	7ad2      	ldrb	r2, [r2, #11]
 800171e:	4313      	orrs	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001724:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 800172c:	6013      	str	r3, [r2, #0]
			simulated_data.accel_z = data_float;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001734:	6093      	str	r3, [r2, #8]

			data_hex = (rx_buffer[12] << 24) | (rx_buffer[13] << 16) | (rx_buffer[14] << 8) | rx_buffer[15];
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001738:	7b1b      	ldrb	r3, [r3, #12]
 800173a:	061a      	lsls	r2, r3, #24
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800173e:	7b5b      	ldrb	r3, [r3, #13]
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 8001746:	7b9b      	ldrb	r3, [r3, #14]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	4313      	orrs	r3, r2
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_UART_RxCpltCallback+0x168>)
 800174e:	7bd2      	ldrb	r2, [r2, #15]
 8001750:	4313      	orrs	r3, r2
 8001752:	461a      	mov	r2, r3
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 8001756:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_UART_RxCpltCallback+0x16c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 800175e:	6013      	str	r3, [r2, #0]
			simulated_data.pressao = data_float;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_UART_RxCpltCallback+0x170>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 8001766:	60d3      	str	r3, [r2, #12]

			simulated_data.altitude = 44330.0*(1.0 - pow((simulated_data.pressao/101325), 0.1903));
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_UART_RxCpltCallback+0x178>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb6c 	bl	8000e4c <__aeabi_fdiv>
 8001774:	4603      	mov	r3, r0
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe4e 	bl	8000418 <__aeabi_f2d>
 800177c:	a314      	add	r3, pc, #80	; (adr r3, 80017d0 <HAL_UART_RxCpltCallback+0x150>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f007 fdb7 	bl	80092f4 <pow>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	491b      	ldr	r1, [pc, #108]	; (80017fc <HAL_UART_RxCpltCallback+0x17c>)
 8001790:	f7fe fce2 	bl	8000158 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	a30e      	add	r3, pc, #56	; (adr r3, 80017d8 <HAL_UART_RxCpltCallback+0x158>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fe91 	bl	80004c8 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f93b 	bl	8000a28 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_UART_RxCpltCallback+0x174>)
 80017b6:	6113      	str	r3, [r2, #16]
			calculate_EMA();
 80017b8:	f001 fba2 	bl	8002f00 <calculate_EMA>
			press_receiv = 1;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_UART_RxCpltCallback+0x180>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
		}
		data_UART = 0x00;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_UART_RxCpltCallback+0x164>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	1a36e2eb 	.word	0x1a36e2eb
 80017d4:	3fc85bc0 	.word	0x3fc85bc0
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40e5a540 	.word	0x40e5a540
 80017e0:	2000035c 	.word	0x2000035c
 80017e4:	200000cc 	.word	0x200000cc
 80017e8:	200000d8 	.word	0x200000d8
 80017ec:	200000d0 	.word	0x200000d0
 80017f0:	200000d4 	.word	0x200000d4
 80017f4:	200000e8 	.word	0x200000e8
 80017f8:	47c5e680 	.word	0x47c5e680
 80017fc:	3ff00000 	.word	0x3ff00000
 8001800:	200000fc 	.word	0x200000fc

08001804 <MPU6050_Config>:
extern I2C_HandleTypeDef hi2c2;

AccelData acc_data;
GyroData gy_data;

void MPU6050_Config(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af04      	add	r7, sp, #16

    uint8_t check;
    uint8_t data;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);	// WHO_AM_I ~ 6050
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	2275      	movs	r2, #117	; 0x75
 800181c:	21d0      	movs	r1, #208	; 0xd0
 800181e:	4823      	ldr	r0, [pc, #140]	; (80018ac <MPU6050_Config+0xa8>)
 8001820:	f002 fd18 	bl	8004254 <HAL_I2C_Mem_Read>

    if (check == 104){
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b68      	cmp	r3, #104	; 0x68
 8001828:	d13b      	bne.n	80018a2 <MPU6050_Config+0x9e>
    	// dispositivo está presente
        data = 0; 	 	 // registro de gerenciamento de energia 0x6B devemos escrever todos os 0s para ativar o sensor
 800182a:	2300      	movs	r3, #0
 800182c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	1dbb      	adds	r3, r7, #6
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	226b      	movs	r2, #107	; 0x6b
 8001840:	21d0      	movs	r1, #208	; 0xd0
 8001842:	481a      	ldr	r0, [pc, #104]	; (80018ac <MPU6050_Config+0xa8>)
 8001844:	f002 fc0c 	bl	8004060 <HAL_I2C_Mem_Write>

        data = 0x07;	 // define DATA RATE de 1KHz escrevendo no registrador SMPLRT_DIV
 8001848:	2307      	movs	r3, #7
 800184a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2301      	movs	r3, #1
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	1dbb      	adds	r3, r7, #6
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	2219      	movs	r2, #25
 800185e:	21d0      	movs	r1, #208	; 0xd0
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <MPU6050_Config+0xa8>)
 8001862:	f002 fbfd 	bl	8004060 <HAL_I2C_Mem_Write>

        data = 0x00;	 // define a configuração do acelerômetro e giroscópio em ACCEL_CONFIG e GYRO_CONFIG
 8001866:	2300      	movs	r3, #0
 8001868:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2301      	movs	r3, #1
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	2219      	movs	r2, #25
 800187c:	21d0      	movs	r1, #208	; 0xd0
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <MPU6050_Config+0xa8>)
 8001880:	f002 fbee 	bl	8004060 <HAL_I2C_Mem_Write>

        data = 0x00;
 8001884:	2300      	movs	r3, #0
 8001886:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2301      	movs	r3, #1
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	1dbb      	adds	r3, r7, #6
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	221b      	movs	r2, #27
 800189a:	21d0      	movs	r1, #208	; 0xd0
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <MPU6050_Config+0xa8>)
 800189e:	f002 fbdf 	bl	8004060 <HAL_I2C_Mem_Write>
    }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000214 	.word	0x20000214

080018b0 <MPU6050_2_Config>:

void MPU6050_2_Config(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af04      	add	r7, sp, #16

	uint8_t check2;
	uint8_t data2;

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check2, 1, 1000); 	// WHO_AM_I ~ 6050
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2301      	movs	r3, #1
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	1dfb      	adds	r3, r7, #7
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	2275      	movs	r2, #117	; 0x75
 80018c8:	21d0      	movs	r1, #208	; 0xd0
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <MPU6050_2_Config+0xa8>)
 80018cc:	f002 fcc2 	bl	8004254 <HAL_I2C_Mem_Read>

	if (check2 == 104){
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b68      	cmp	r3, #104	; 0x68
 80018d4:	d13b      	bne.n	800194e <MPU6050_2_Config+0x9e>
		// dispositivo está presente
		data2 = 0;		 // registro de gerenciamento de energia 0x6B devemos escrever todos os 0s para ativar o sensor
 80018d6:	2300      	movs	r3, #0
 80018d8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data2, 1, 1000);
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	1dbb      	adds	r3, r7, #6
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	226b      	movs	r2, #107	; 0x6b
 80018ec:	21d0      	movs	r1, #208	; 0xd0
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <MPU6050_2_Config+0xa8>)
 80018f0:	f002 fbb6 	bl	8004060 <HAL_I2C_Mem_Write>

		data2 = 0x07;	 // define DATA RATE de 1KHz escrevendo no registrador SMPLRT_DIV
 80018f4:	2307      	movs	r3, #7
 80018f6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data2, 1, 1000);
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2301      	movs	r3, #1
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2219      	movs	r2, #25
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	4812      	ldr	r0, [pc, #72]	; (8001958 <MPU6050_2_Config+0xa8>)
 800190e:	f002 fba7 	bl	8004060 <HAL_I2C_Mem_Write>

		data2 = 0x00;    // define a configuração do acelerômetro e giroscópio em ACCEL_CONFIG e GYRO_CONFIG
 8001912:	2300      	movs	r3, #0
 8001914:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data2, 1, 1000);
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	2219      	movs	r2, #25
 8001928:	21d0      	movs	r1, #208	; 0xd0
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <MPU6050_2_Config+0xa8>)
 800192c:	f002 fb98 	bl	8004060 <HAL_I2C_Mem_Write>

		data2 = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data2, 1, 1000);
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	2301      	movs	r3, #1
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	221b      	movs	r2, #27
 8001946:	21d0      	movs	r1, #208	; 0xd0
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MPU6050_2_Config+0xa8>)
 800194a:	f002 fb89 	bl	8004060 <HAL_I2C_Mem_Write>
	}
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000268 	.word	0x20000268

0800195c <dataRead>:
uint8_t chipID;
float pressureSeaLevel = 101325;

// Leitura de corte, dados armazenados na memória do sensor e utilizados para calculos de novos valores.
void dataRead(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af04      	add	r7, sp, #16
	// Lê NVM de 0x88 a 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, 0x88, 1, trimdata, 24, 1000);
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2318      	movs	r3, #24
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <dataRead+0x134>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	2288      	movs	r2, #136	; 0x88
 8001974:	21ec      	movs	r1, #236	; 0xec
 8001976:	4847      	ldr	r0, [pc, #284]	; (8001a94 <dataRead+0x138>)
 8001978:	f002 fc6c 	bl	8004254 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1] << 8) | trimdata[0];
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <dataRead+0x134>)
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21a      	sxth	r2, r3
 8001984:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <dataRead+0x134>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b21b      	sxth	r3, r3
 800198a:	4313      	orrs	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <dataRead+0x13c>)
 8001992:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3] << 8) | trimdata[2];
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <dataRead+0x134>)
 8001996:	78db      	ldrb	r3, [r3, #3]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <dataRead+0x134>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <dataRead+0x140>)
 80019a8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5] << 8) | trimdata[4];
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <dataRead+0x134>)
 80019ac:	795b      	ldrb	r3, [r3, #5]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <dataRead+0x134>)
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <dataRead+0x144>)
 80019be:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7] << 8) | trimdata[5];
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <dataRead+0x134>)
 80019c2:	79db      	ldrb	r3, [r3, #7]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <dataRead+0x134>)
 80019ca:	795b      	ldrb	r3, [r3, #5]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <dataRead+0x148>)
 80019d6:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9] << 8) | trimdata[6];
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <dataRead+0x134>)
 80019da:	7a5b      	ldrb	r3, [r3, #9]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21a      	sxth	r2, r3
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <dataRead+0x134>)
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <dataRead+0x14c>)
 80019ec:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11] << 8) | trimdata[10];
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <dataRead+0x134>)
 80019f0:	7adb      	ldrb	r3, [r3, #11]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <dataRead+0x134>)
 80019f8:	7a9b      	ldrb	r3, [r3, #10]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <dataRead+0x150>)
 8001a02:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13] << 8) | trimdata[12];
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <dataRead+0x134>)
 8001a06:	7b5b      	ldrb	r3, [r3, #13]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <dataRead+0x134>)
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <dataRead+0x154>)
 8001a18:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15] << 8) | trimdata[14];
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <dataRead+0x134>)
 8001a1c:	7bdb      	ldrb	r3, [r3, #15]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <dataRead+0x134>)
 8001a24:	7b9b      	ldrb	r3, [r3, #14]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <dataRead+0x158>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17] << 8) | trimdata[16];
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <dataRead+0x134>)
 8001a32:	7c5b      	ldrb	r3, [r3, #17]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <dataRead+0x134>)
 8001a3a:	7c1b      	ldrb	r3, [r3, #16]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <dataRead+0x15c>)
 8001a44:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19] << 8) | trimdata[18];
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <dataRead+0x134>)
 8001a48:	7cdb      	ldrb	r3, [r3, #19]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <dataRead+0x134>)
 8001a50:	7c9b      	ldrb	r3, [r3, #18]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <dataRead+0x160>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21] << 8) | trimdata[20];
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <dataRead+0x134>)
 8001a5e:	7d5b      	ldrb	r3, [r3, #21]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <dataRead+0x134>)
 8001a66:	7d1b      	ldrb	r3, [r3, #20]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <dataRead+0x164>)
 8001a70:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23] << 8) | trimdata[22];
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <dataRead+0x134>)
 8001a74:	7ddb      	ldrb	r3, [r3, #23]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <dataRead+0x134>)
 8001a7c:	7d9b      	ldrb	r3, [r3, #22]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <dataRead+0x168>)
 8001a86:	801a      	strh	r2, [r3, #0]

}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000128 	.word	0x20000128
 8001a94:	20000268 	.word	0x20000268
 8001a98:	20000140 	.word	0x20000140
 8001a9c:	20000144 	.word	0x20000144
 8001aa0:	20000146 	.word	0x20000146
 8001aa4:	20000142 	.word	0x20000142
 8001aa8:	20000148 	.word	0x20000148
 8001aac:	2000014a 	.word	0x2000014a
 8001ab0:	2000014c 	.word	0x2000014c
 8001ab4:	2000014e 	.word	0x2000014e
 8001ab8:	20000150 	.word	0x20000150
 8001abc:	20000152 	.word	0x20000152
 8001ac0:	20000154 	.word	0x20000154
 8001ac4:	20000156 	.word	0x20000156

08001ac8 <BMP280_Config>:

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	4603      	mov	r3, r0
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	717b      	strb	r3, [r7, #5]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, ID_REG, 1, &chipID, 1, 1000);
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <BMP280_Config+0x170>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	22d0      	movs	r2, #208	; 0xd0
 8001af8:	21ec      	movs	r1, #236	; 0xec
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <BMP280_Config+0x174>)
 8001afc:	f002 fbaa 	bl	8004254 <HAL_I2C_Mem_Read>

	if (chipID == 0x58) {
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <BMP280_Config+0x170>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b58      	cmp	r3, #88	; 0x58
 8001b06:	f040 8092 	bne.w	8001c2e <BMP280_Config+0x166>
		// Lê os parâmetros do Trimming
		dataRead();
 8001b0a:	f7ff ff27 	bl	800195c <dataRead>

		uint8_t datatowrite = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
		uint8_t datacheck = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73bb      	strb	r3, [r7, #14]

		// Reinicializa o dispositivo
		datatowrite = 0xB6;  // reinicia a sequência
 8001b16:	23b6      	movs	r3, #182	; 0xb6
 8001b18:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	f107 030f 	add.w	r3, r7, #15
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	22e0      	movs	r2, #224	; 0xe0
 8001b2e:	21ec      	movs	r1, #236	; 0xec
 8001b30:	4842      	ldr	r0, [pc, #264]	; (8001c3c <BMP280_Config+0x174>)
 8001b32:	f002 fa95 	bl	8004060 <HAL_I2C_Mem_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <BMP280_Config+0x7a>
		{
			return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	e075      	b.n	8001c2e <BMP280_Config+0x166>
		}

		HAL_Delay (100);
 8001b42:	2064      	movs	r0, #100	; 0x64
 8001b44:	f001 fda6 	bl	8003694 <HAL_Delay>

		// grava o tempo de espera e o coeff do filtro IIR em 0xF5
		datatowrite = (t_sb <<5) |(filter << 2);
 8001b48:	793b      	ldrb	r3, [r7, #4]
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	b25a      	sxtb	r2, r3
 8001b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 030f 	add.w	r3, r7, #15
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	22f5      	movs	r2, #245	; 0xf5
 8001b72:	21ec      	movs	r1, #236	; 0xec
 8001b74:	4831      	ldr	r0, [pc, #196]	; (8001c3c <BMP280_Config+0x174>)
 8001b76:	f002 fa73 	bl	8004060 <HAL_I2C_Mem_Write>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <BMP280_Config+0xbe>
		{
			return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	e053      	b.n	8001c2e <BMP280_Config+0x166>
		}
		HAL_Delay (100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f001 fd84 	bl	8003694 <HAL_Delay>
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030e 	add.w	r3, r7, #14
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	22f5      	movs	r2, #245	; 0xf5
 8001ba0:	21ec      	movs	r1, #236	; 0xec
 8001ba2:	4826      	ldr	r0, [pc, #152]	; (8001c3c <BMP280_Config+0x174>)
 8001ba4:	f002 fb56 	bl	8004254 <HAL_I2C_Mem_Read>
		if (datacheck != datatowrite)
 8001ba8:	7bba      	ldrb	r2, [r7, #14]
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d002      	beq.n	8001bb6 <BMP280_Config+0xee>
		{
			return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e03b      	b.n	8001c2e <BMP280_Config+0x166>
		}

		// grava a sobreamostragem de pressão e temperatura junto com o modo para 0xF4
		datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25a      	sxtb	r2, r3
 8001bc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
		if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f107 030f 	add.w	r3, r7, #15
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	22f4      	movs	r2, #244	; 0xf4
 8001be6:	21ec      	movs	r1, #236	; 0xec
 8001be8:	4814      	ldr	r0, [pc, #80]	; (8001c3c <BMP280_Config+0x174>)
 8001bea:	f002 fa39 	bl	8004060 <HAL_I2C_Mem_Write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <BMP280_Config+0x132>
		{
			return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	e019      	b.n	8001c2e <BMP280_Config+0x166>
		}
		HAL_Delay (100);
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	f001 fd4a 	bl	8003694 <HAL_Delay>
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADD, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f107 030e 	add.w	r3, r7, #14
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	22f4      	movs	r2, #244	; 0xf4
 8001c14:	21ec      	movs	r1, #236	; 0xec
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <BMP280_Config+0x174>)
 8001c18:	f002 fb1c 	bl	8004254 <HAL_I2C_Mem_Read>
		if (datacheck != datatowrite)
 8001c1c:	7bba      	ldrb	r2, [r7, #14]
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d002      	beq.n	8001c2a <BMP280_Config+0x162>
		{
			return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
 8001c28:	e001      	b.n	8001c2e <BMP280_Config+0x166>
		}

		return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e7ff      	b.n	8001c2e <BMP280_Config+0x166>
	}
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000158 	.word	0x20000158
 8001c3c:	20000268 	.word	0x20000268

08001c40 <bmp280_compensate_T_int32>:

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2)) >> 11;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	10da      	asrs	r2, r3, #3
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <bmp280_compensate_T_int32+0x74>)
 8001c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	12db      	asrs	r3, r3, #11
 8001c60:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1))) >> 12)*((int32_t)dig_T3)) >> 14;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	111b      	asrs	r3, r3, #4
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	1112      	asrs	r2, r2, #4
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <bmp280_compensate_T_int32+0x70>)
 8001c72:	8809      	ldrh	r1, [r1, #0]
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	131b      	asrs	r3, r3, #12
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <bmp280_compensate_T_int32+0x78>)
 8001c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	139b      	asrs	r3, r3, #14
 8001c88:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <bmp280_compensate_T_int32+0x7c>)
 8001c92:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <bmp280_compensate_T_int32+0x7c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3380      	adds	r3, #128	; 0x80
 8001ca0:	121b      	asrs	r3, r3, #8
 8001ca2:	60fb      	str	r3, [r7, #12]
	return T;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000140 	.word	0x20000140
 8001cb4:	20000144 	.word	0x20000144
 8001cb8:	20000146 	.word	0x20000146
 8001cbc:	20000124 	.word	0x20000124

08001cc0 <bmp280_compensate_P_int32>:

uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b0ca      	sub	sp, #296	; 0x128
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = (((int64_t)t_fine) - 128000);
 8001ccc:	4bae      	ldr	r3, [pc, #696]	; (8001f88 <bmp280_compensate_P_int32+0x2c8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	17da      	asrs	r2, r3, #31
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001cda:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001cde:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001ce2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cea:	fb03 f102 	mul.w	r1, r3, r2
 8001cee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001cf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	18ca      	adds	r2, r1, r3
 8001cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d00:	fba3 8903 	umull	r8, r9, r3, r3
 8001d04:	eb02 0309 	add.w	r3, r2, r9
 8001d08:	4699      	mov	r9, r3
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <bmp280_compensate_P_int32+0x2cc>)
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	17da      	asrs	r2, r3, #31
 8001d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d1c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d20:	4603      	mov	r3, r0
 8001d22:	fb03 f209 	mul.w	r2, r3, r9
 8001d26:	460b      	mov	r3, r1
 8001d28:	fb08 f303 	mul.w	r3, r8, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4602      	mov	r2, r0
 8001d30:	fba8 2102 	umull	r2, r1, r8, r2
 8001d34:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001d38:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001d3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d40:	4413      	add	r3, r2
 8001d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d46:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001d4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001d4e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 +((var1*(int64_t)dig_P5)<<17);
 8001d52:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <bmp280_compensate_P_int32+0x2d0>)
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	17da      	asrs	r2, r3, #31
 8001d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d60:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d68:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	fb02 f203 	mul.w	r2, r2, r3
 8001d72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d76:	4621      	mov	r1, r4
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	441a      	add	r2, r3
 8001d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d82:	4621      	mov	r1, r4
 8001d84:	fba3 3101 	umull	r3, r1, r3, r1
 8001d88:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d94:	18d3      	adds	r3, r2, r3
 8001d96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001da6:	462b      	mov	r3, r5
 8001da8:	0459      	lsls	r1, r3, #17
 8001daa:	4622      	mov	r2, r4
 8001dac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001db0:	4623      	mov	r3, r4
 8001db2:	0458      	lsls	r0, r3, #17
 8001db4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001db8:	1814      	adds	r4, r2, r0
 8001dba:	643c      	str	r4, [r7, #64]	; 0x40
 8001dbc:	414b      	adcs	r3, r1
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001dc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <bmp280_compensate_P_int32+0x2d4>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	17da      	asrs	r2, r3, #31
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	2000      	movs	r0, #0
 8001dea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001dee:	1814      	adds	r4, r2, r0
 8001df0:	63bc      	str	r4, [r7, #56]	; 0x38
 8001df2:	414b      	adcs	r3, r1
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001dfa:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001dfe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e06:	fb03 f102 	mul.w	r1, r3, r2
 8001e0a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	18ca      	adds	r2, r1, r3
 8001e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e1c:	fba3 3103 	umull	r3, r1, r3, r3
 8001e20:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <bmp280_compensate_P_int32+0x2d8>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	17da      	asrs	r2, r3, #31
 8001e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e44:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001e48:	4622      	mov	r2, r4
 8001e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e4e:	4641      	mov	r1, r8
 8001e50:	fb01 f202 	mul.w	r2, r1, r2
 8001e54:	464d      	mov	r5, r9
 8001e56:	4618      	mov	r0, r3
 8001e58:	4621      	mov	r1, r4
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	fb03 f305 	mul.w	r3, r3, r5
 8001e60:	4413      	add	r3, r2
 8001e62:	4602      	mov	r2, r0
 8001e64:	4641      	mov	r1, r8
 8001e66:	fba2 2101 	umull	r2, r1, r2, r1
 8001e6a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001e6e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001e72:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001e76:	4413      	add	r3, r2
 8001e78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001e88:	4623      	mov	r3, r4
 8001e8a:	0a18      	lsrs	r0, r3, #8
 8001e8c:	462a      	mov	r2, r5
 8001e8e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e92:	462b      	mov	r3, r5
 8001e94:	1219      	asrs	r1, r3, #8
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <bmp280_compensate_P_int32+0x2dc>)
 8001e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	17da      	asrs	r2, r3, #31
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ea4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eac:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	fb02 f203 	mul.w	r2, r2, r3
 8001eb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001eba:	4644      	mov	r4, r8
 8001ebc:	fb04 f303 	mul.w	r3, r4, r3
 8001ec0:	441a      	add	r2, r3
 8001ec2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ec6:	4644      	mov	r4, r8
 8001ec8:	fba3 3404 	umull	r3, r4, r3, r4
 8001ecc:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001ed0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ed8:	18d3      	adds	r3, r2, r3
 8001eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001eea:	464c      	mov	r4, r9
 8001eec:	0323      	lsls	r3, r4, #12
 8001eee:	46c4      	mov	ip, r8
 8001ef0:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001ef4:	4644      	mov	r4, r8
 8001ef6:	0322      	lsls	r2, r4, #12
 8001ef8:	1884      	adds	r4, r0, r2
 8001efa:	633c      	str	r4, [r7, #48]	; 0x30
 8001efc:	eb41 0303 	adc.w	r3, r1, r3
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
 8001f02:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001f06:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1) >>33;
 8001f0a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f0e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001f12:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001f16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <bmp280_compensate_P_int32+0x2e0>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f26:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f2a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001f2e:	4622      	mov	r2, r4
 8001f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f34:	4641      	mov	r1, r8
 8001f36:	fb01 f202 	mul.w	r2, r1, r2
 8001f3a:	464d      	mov	r5, r9
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4603      	mov	r3, r0
 8001f42:	fb03 f305 	mul.w	r3, r3, r5
 8001f46:	4413      	add	r3, r2
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4641      	mov	r1, r8
 8001f4c:	fba2 2101 	umull	r2, r1, r2, r1
 8001f50:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001f54:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001f58:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001f6e:	4629      	mov	r1, r5
 8001f70:	104a      	asrs	r2, r1, #1
 8001f72:	4629      	mov	r1, r5
 8001f74:	17cb      	asrs	r3, r1, #31
 8001f76:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8001f7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	d110      	bne.n	8001fa4 <bmp280_compensate_P_int32+0x2e4>
			{
				return -1; //evita exceção causada por divisão por zero
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e151      	b.n	800222c <bmp280_compensate_P_int32+0x56c>
 8001f88:	20000124 	.word	0x20000124
 8001f8c:	20000150 	.word	0x20000150
 8001f90:	2000014e 	.word	0x2000014e
 8001f94:	2000014c 	.word	0x2000014c
 8001f98:	2000014a 	.word	0x2000014a
 8001f9c:	20000148 	.word	0x20000148
 8001fa0:	20000142 	.word	0x20000142
			}

	p = 1048576 - adc_P;
 8001fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fa8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001fac:	17da      	asrs	r2, r3, #31
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001fb6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31) - var2)*3125) / var1;
 8001fba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fbe:	105b      	asrs	r3, r3, #1
 8001fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fc8:	07db      	lsls	r3, r3, #31
 8001fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	1aa4      	subs	r4, r4, r2
 8001fda:	67bc      	str	r4, [r7, #120]	; 0x78
 8001fdc:	eb61 0303 	sbc.w	r3, r1, r3
 8001fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fe2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	1891      	adds	r1, r2, r2
 8001fec:	6239      	str	r1, [r7, #32]
 8001fee:	415b      	adcs	r3, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	1851      	adds	r1, r2, r1
 8001ffa:	61b9      	str	r1, [r7, #24]
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	414b      	adcs	r3, r1
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800200e:	4649      	mov	r1, r9
 8002010:	018b      	lsls	r3, r1, #6
 8002012:	4641      	mov	r1, r8
 8002014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002018:	4641      	mov	r1, r8
 800201a:	018a      	lsls	r2, r1, #6
 800201c:	4641      	mov	r1, r8
 800201e:	1889      	adds	r1, r1, r2
 8002020:	6139      	str	r1, [r7, #16]
 8002022:	4649      	mov	r1, r9
 8002024:	eb43 0101 	adc.w	r1, r3, r1
 8002028:	6179      	str	r1, [r7, #20]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002036:	4649      	mov	r1, r9
 8002038:	008b      	lsls	r3, r1, #2
 800203a:	46c4      	mov	ip, r8
 800203c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002040:	4641      	mov	r1, r8
 8002042:	008a      	lsls	r2, r1, #2
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	4603      	mov	r3, r0
 800204a:	4622      	mov	r2, r4
 800204c:	189b      	adds	r3, r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	460b      	mov	r3, r1
 8002052:	462a      	mov	r2, r5
 8002054:	eb42 0303 	adc.w	r3, r2, r3
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002066:	4649      	mov	r1, r9
 8002068:	008b      	lsls	r3, r1, #2
 800206a:	46c4      	mov	ip, r8
 800206c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002070:	4641      	mov	r1, r8
 8002072:	008a      	lsls	r2, r1, #2
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	4603      	mov	r3, r0
 800207a:	4622      	mov	r2, r4
 800207c:	189b      	adds	r3, r3, r2
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
 8002080:	462b      	mov	r3, r5
 8002082:	460a      	mov	r2, r1
 8002084:	eb42 0303 	adc.w	r3, r2, r3
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
 800208a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800208e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002092:	f7fe ffed 	bl	8001070 <__aeabi_ldivmod>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <bmp280_compensate_P_int32+0x578>)
 80020a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0b50      	lsrs	r0, r2, #13
 80020ba:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80020be:	1359      	asrs	r1, r3, #13
 80020c0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80020c4:	462b      	mov	r3, r5
 80020c6:	fb00 f203 	mul.w	r2, r0, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	fb03 f301 	mul.w	r3, r3, r1
 80020d0:	4413      	add	r3, r2
 80020d2:	4622      	mov	r2, r4
 80020d4:	fba2 2100 	umull	r2, r1, r2, r0
 80020d8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80020dc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80020e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020e4:	4413      	add	r3, r2
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80020ea:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80020ee:	f04f 0000 	mov.w	r0, #0
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	0b50      	lsrs	r0, r2, #13
 80020f8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80020fc:	1359      	asrs	r1, r3, #13
 80020fe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002102:	462b      	mov	r3, r5
 8002104:	fb00 f203 	mul.w	r2, r0, r3
 8002108:	4623      	mov	r3, r4
 800210a:	fb03 f301 	mul.w	r3, r3, r1
 800210e:	4413      	add	r3, r2
 8002110:	4622      	mov	r2, r4
 8002112:	fba2 2100 	umull	r2, r1, r2, r0
 8002116:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800211a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800211e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002122:	4413      	add	r3, r2
 8002124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002134:	4621      	mov	r1, r4
 8002136:	0e4a      	lsrs	r2, r1, #25
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	460c      	mov	r4, r1
 800213e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002142:	164b      	asrs	r3, r1, #25
 8002144:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8002148:	4b3c      	ldr	r3, [pc, #240]	; (800223c <bmp280_compensate_P_int32+0x57c>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	b21b      	sxth	r3, r3
 8002150:	17da      	asrs	r2, r3, #31
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
 8002154:	667a      	str	r2, [r7, #100]	; 0x64
 8002156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800215a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800215e:	462a      	mov	r2, r5
 8002160:	fb02 f203 	mul.w	r2, r2, r3
 8002164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002168:	4621      	mov	r1, r4
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002174:	4621      	mov	r1, r4
 8002176:	fba2 2101 	umull	r2, r1, r2, r1
 800217a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800217e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002182:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002186:	4413      	add	r3, r2
 8002188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002198:	4621      	mov	r1, r4
 800219a:	0cca      	lsrs	r2, r1, #19
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	460c      	mov	r4, r1
 80021a2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80021a6:	14cb      	asrs	r3, r1, #19
 80021a8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 80021ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80021b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021b4:	1884      	adds	r4, r0, r2
 80021b6:	65bc      	str	r4, [r7, #88]	; 0x58
 80021b8:	eb41 0303 	adc.w	r3, r1, r3
 80021bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80021c6:	4621      	mov	r1, r4
 80021c8:	1889      	adds	r1, r1, r2
 80021ca:	6539      	str	r1, [r7, #80]	; 0x50
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb43 0101 	adc.w	r1, r3, r1
 80021d2:	6579      	str	r1, [r7, #84]	; 0x54
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80021e0:	4623      	mov	r3, r4
 80021e2:	0a18      	lsrs	r0, r3, #8
 80021e4:	462a      	mov	r2, r5
 80021e6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80021ea:	462b      	mov	r3, r5
 80021ec:	1219      	asrs	r1, r3, #8
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <bmp280_compensate_P_int32+0x580>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	17da      	asrs	r2, r3, #31
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002208:	464c      	mov	r4, r9
 800220a:	0123      	lsls	r3, r4, #4
 800220c:	46c4      	mov	ip, r8
 800220e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8002212:	4644      	mov	r4, r8
 8002214:	0122      	lsls	r2, r4, #4
 8002216:	1884      	adds	r4, r0, r2
 8002218:	603c      	str	r4, [r7, #0]
 800221a:	eb41 0303 	adc.w	r3, r1, r3
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002224:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8002228:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800222c:	4618      	mov	r0, r3
 800222e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002238:	20000156 	.word	0x20000156
 800223c:	20000154 	.word	0x20000154
 8002240:	20000152 	.word	0x20000152

08002244 <HAL_SPI_TxCpltCallback>:
uint32_t receiv_fromFRAM[4];
uint8_t data_receive[16];
float transf_float[4];


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_SPI_TxCpltCallback+0x78>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12c      	bne.n	80022ae <HAL_SPI_TxCpltCallback+0x6a>
        if (hspi->Instance->CR1 & SPI_CR1_SPE) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <HAL_SPI_TxCpltCallback+0x6a>
 	  	  switch(FRAM_state)
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d01d      	beq.n	80022a6 <HAL_SPI_TxCpltCallback+0x62>
 800226a:	2b09      	cmp	r3, #9
 800226c:	dc21      	bgt.n	80022b2 <HAL_SPI_TxCpltCallback+0x6e>
 800226e:	2b05      	cmp	r3, #5
 8002270:	d002      	beq.n	8002278 <HAL_SPI_TxCpltCallback+0x34>
 8002272:	2b07      	cmp	r3, #7
 8002274:	d009      	beq.n	800228a <HAL_SPI_TxCpltCallback+0x46>
 	  		break;
 	  		case WAIT_FRAM_READ_COMMAND:
 	  			FRAM_state = FRAM_READ;
 	  		break;
 	  		default:
 	  			break;
 8002276:	e01c      	b.n	80022b2 <HAL_SPI_TxCpltCallback+0x6e>
 	  			FRAM_state = FRAM_WRITE;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 800227a:	2206      	movs	r2, #6
 800227c:	701a      	strb	r2, [r3, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	2101      	movs	r1, #1
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <HAL_SPI_TxCpltCallback+0x80>)
 8002284:	f001 fd8f 	bl	8003da6 <HAL_GPIO_WritePin>
 	  		break;
 8002288:	e014      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			FRAM_state = FRAM_IDLE;
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 	  			contador_FRAM += 1;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_SPI_TxCpltCallback+0x84>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_SPI_TxCpltCallback+0x84>)
 8002298:	6013      	str	r3, [r2, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2101      	movs	r1, #1
 800229e:	4809      	ldr	r0, [pc, #36]	; (80022c4 <HAL_SPI_TxCpltCallback+0x80>)
 80022a0:	f001 fd81 	bl	8003da6 <HAL_GPIO_WritePin>
 	  		break;
 80022a4:	e006      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			FRAM_state = FRAM_READ;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_SPI_TxCpltCallback+0x7c>)
 80022a8:	220a      	movs	r2, #10
 80022aa:	701a      	strb	r2, [r3, #0]
 	  		break;
 80022ac:	e002      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  	}
      }
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <HAL_SPI_TxCpltCallback+0x70>
 	  			break;
 80022b2:	bf00      	nop
   }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200002bc 	.word	0x200002bc
 80022c0:	20000159 	.word	0x20000159
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	200001e0 	.word	0x200001e0

080022cc <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <HAL_SPI_RxCpltCallback+0x104>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d173      	bne.n	80023c4 <HAL_SPI_RxCpltCallback+0xf8>
        if (hspi->Instance->CR1 & SPI_CR1_SPE) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_SPI_RxCpltCallback+0xf8>
        	switch(FRAM_state)
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_RxCpltCallback+0x2c>
 80022f2:	2b0b      	cmp	r3, #11
 80022f4:	d009      	beq.n	800230a <HAL_SPI_RxCpltCallback+0x3e>
	  		    transf_float[3] = *(float*)&receiv_fromFRAM[3];
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 	  			FRAM_state = FRAM_IDLE;
 	  		break;
 	  		default:
 	  			break;
 80022f6:	e066      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
 	  			FRAM_state = FRAM_IDLE;
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	2101      	movs	r1, #1
 8002302:	4835      	ldr	r0, [pc, #212]	; (80023d8 <HAL_SPI_RxCpltCallback+0x10c>)
 8002304:	f001 fd4f 	bl	8003da6 <HAL_GPIO_WritePin>
 	  		break;
 8002308:	e05d      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
	  		    receiv_fromFRAM[0] = (data_receive[3] << 24) | (data_receive[2] << 16) | (data_receive[1] << 8) | data_receive[0];
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800230c:	78db      	ldrb	r3, [r3, #3]
 800230e:	061a      	lsls	r2, r3, #24
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	4313      	orrs	r3, r2
 8002320:	4a2e      	ldr	r2, [pc, #184]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	461a      	mov	r2, r3
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800232a:	601a      	str	r2, [r3, #0]
	  		    transf_float[0] = *(float*)&receiv_fromFRAM[0];
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 8002332:	6013      	str	r3, [r2, #0]
	  		    receiv_fromFRAM[1] = (data_receive[7] << 24) | (data_receive[6] << 16) | (data_receive[5] << 8) | data_receive[4];
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002336:	79db      	ldrb	r3, [r3, #7]
 8002338:	061a      	lsls	r2, r3, #24
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800233c:	799b      	ldrb	r3, [r3, #6]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	431a      	orrs	r2, r3
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002344:	795b      	ldrb	r3, [r3, #5]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4313      	orrs	r3, r2
 800234a:	4a24      	ldr	r2, [pc, #144]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800234c:	7912      	ldrb	r2, [r2, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 8002354:	605a      	str	r2, [r3, #4]
	  		    transf_float[1] = *(float*)&receiv_fromFRAM[1];
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_SPI_RxCpltCallback+0x11c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 800235c:	6053      	str	r3, [r2, #4]
	  		    receiv_fromFRAM[2] = (data_receive[11] << 24) | (data_receive[10] << 16) | (data_receive[9] << 8) | data_receive[8];
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002360:	7adb      	ldrb	r3, [r3, #11]
 8002362:	061a      	lsls	r2, r3, #24
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002366:	7a9b      	ldrb	r3, [r3, #10]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800236e:	7a5b      	ldrb	r3, [r3, #9]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4313      	orrs	r3, r2
 8002374:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002376:	7a12      	ldrb	r2, [r2, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	461a      	mov	r2, r3
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 800237e:	609a      	str	r2, [r3, #8]
	  		    transf_float[2] = *(float*)&receiv_fromFRAM[2];
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_SPI_RxCpltCallback+0x120>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 8002386:	6093      	str	r3, [r2, #8]
	  		    receiv_fromFRAM[3] = (data_receive[15] << 24) | (data_receive[14] << 16) | (data_receive[13] << 8) | data_receive[12];
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 800238a:	7bdb      	ldrb	r3, [r3, #15]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002390:	7b9b      	ldrb	r3, [r3, #14]
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 8002398:	7b5b      	ldrb	r3, [r3, #13]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	4313      	orrs	r3, r2
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_SPI_RxCpltCallback+0x110>)
 80023a0:	7b12      	ldrb	r2, [r2, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_SPI_RxCpltCallback+0x114>)
 80023a8:	60da      	str	r2, [r3, #12]
	  		    transf_float[3] = *(float*)&receiv_fromFRAM[3];
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_SPI_RxCpltCallback+0x124>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_SPI_RxCpltCallback+0x118>)
 80023b0:	60d3      	str	r3, [r2, #12]
 	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	2101      	movs	r1, #1
 80023b6:	4808      	ldr	r0, [pc, #32]	; (80023d8 <HAL_SPI_RxCpltCallback+0x10c>)
 80023b8:	f001 fcf5 	bl	8003da6 <HAL_GPIO_WritePin>
 	  			FRAM_state = FRAM_IDLE;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_SPI_RxCpltCallback+0x108>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
 	  		break;
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_RxCpltCallback+0xfa>
      }
   }
 80023c4:	bf00      	nop
}
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200002bc 	.word	0x200002bc
 80023d4:	20000159 	.word	0x20000159
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	200001f4 	.word	0x200001f4
 80023e0:	200001e4 	.word	0x200001e4
 80023e4:	20000204 	.word	0x20000204
 80023e8:	200001e8 	.word	0x200001e8
 80023ec:	200001ec 	.word	0x200001ec
 80023f0:	200001f0 	.word	0x200001f0

080023f4 <FRAMset_config>:

void FRAMset_config(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2101      	movs	r1, #1
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <FRAMset_config+0x64>)
 8002400:	f001 fcd1 	bl	8003da6 <HAL_GPIO_WritePin>
	uint8_t cmd[2] = {0x06, 0x00};
 8002404:	2306      	movs	r3, #6
 8002406:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&cmd, 1 ,1000);
 8002408:	1d39      	adds	r1, r7, #4
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	2201      	movs	r2, #1
 8002410:	4812      	ldr	r0, [pc, #72]	; (800245c <FRAMset_config+0x68>)
 8002412:	f004 fe41 	bl	8007098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2101      	movs	r1, #1
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FRAMset_config+0x64>)
 800241c:	f001 fcc3 	bl	8003da6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002420:	2001      	movs	r0, #1
 8002422:	f001 f937 	bl	8003694 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	480b      	ldr	r0, [pc, #44]	; (8002458 <FRAMset_config+0x64>)
 800242c:	f001 fcbb 	bl	8003da6 <HAL_GPIO_WritePin>
	cmd[0] = 0x01;
 8002430:	2301      	movs	r3, #1
 8002432:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x80;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&cmd, 2, 1000);
 8002438:	1d39      	adds	r1, r7, #4
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	2202      	movs	r2, #2
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <FRAMset_config+0x68>)
 8002442:	f004 fe29 	bl	8007098 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2101      	movs	r1, #1
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <FRAMset_config+0x64>)
 800244c:	f001 fcab 	bl	8003da6 <HAL_GPIO_WritePin>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010c00 	.word	0x40010c00
 800245c:	200002bc 	.word	0x200002bc

08002460 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <FRAM_ID>:

void FRAM_ID(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2101      	movs	r1, #1
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <FRAM_ID+0x28>)
 800247e:	f001 fc92 	bl	8003da6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDIDI, 1);
 8002482:	2201      	movs	r2, #1
 8002484:	4906      	ldr	r1, [pc, #24]	; (80024a0 <FRAM_ID+0x2c>)
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <FRAM_ID+0x30>)
 8002488:	f004 ff42 	bl	8007310 <HAL_SPI_Transmit_IT>
    HAL_SPI_Receive_IT(&hspi1, bytes_ID, 4);
 800248c:	2204      	movs	r2, #4
 800248e:	4906      	ldr	r1, [pc, #24]	; (80024a8 <FRAM_ID+0x34>)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <FRAM_ID+0x30>)
 8002492:	f004 ffc7 	bl	8007424 <HAL_SPI_Receive_IT>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	20000003 	.word	0x20000003
 80024a4:	200002bc 	.word	0x200002bc
 80024a8:	2000015c 	.word	0x2000015c

080024ac <FRAM_enablewrite>:


void FRAM_enablewrite(void){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2101      	movs	r1, #1
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <FRAM_enablewrite+0x1c>)
 80024b6:	f001 fc76 	bl	8003da6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 80024ba:	2201      	movs	r2, #1
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <FRAM_enablewrite+0x20>)
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <FRAM_enablewrite+0x24>)
 80024c0:	f004 ff26 	bl	8007310 <HAL_SPI_Transmit_IT>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40010c00 	.word	0x40010c00
 80024cc:	20000002 	.word	0x20000002
 80024d0:	200002bc 	.word	0x200002bc

080024d4 <FRAM_Write>:

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
    HAL_SPI_Transmit_IT(&hspi1, msg, 3);
}

void FRAM_Write(uint16_t address, uint8_t *data, uint16_t size){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]

	uint8_t addr_high = (address >> 8 ) & 0xFF;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	72fb      	strb	r3, [r7, #11]
    uint8_t addr_low = address & 0xFF;
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	72bb      	strb	r3, [r7, #10]

    msg[0] = WRITE;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <FRAM_Write+0x78>)
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <FRAM_Write+0x7c>)
 80024f6:	701a      	strb	r2, [r3, #0]
    msg[1] = addr_high;
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <FRAM_Write+0x7c>)
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	7053      	strb	r3, [r2, #1]
    msg[2] = addr_low;
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <FRAM_Write+0x7c>)
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	7093      	strb	r3, [r2, #2]

    for (int i = 0; i < size ; i++){
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e00a      	b.n	8002520 <FRAM_Write+0x4c>
    	msg[i+3] = data[i];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3303      	adds	r3, #3
 8002514:	7811      	ldrb	r1, [r2, #0]
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <FRAM_Write+0x7c>)
 8002518:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < size ; i++){
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf0      	blt.n	800250a <FRAM_Write+0x36>
    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2101      	movs	r1, #1
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <FRAM_Write+0x80>)
 800252e:	f001 fc3a 	bl	8003da6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(&hspi1, msg, 3+size);
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	3303      	adds	r3, #3
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	4905      	ldr	r1, [pc, #20]	; (8002550 <FRAM_Write+0x7c>)
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <FRAM_Write+0x84>)
 800253e:	f004 fee7 	bl	8007310 <HAL_SPI_Transmit_IT>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000001 	.word	0x20000001
 8002550:	20000160 	.word	0x20000160
 8002554:	40010c00 	.word	0x40010c00
 8002558:	200002bc 	.word	0x200002bc
 800255c:	00000000 	.word	0x00000000

08002560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002566:	f001 f833 	bl	80035d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800256a:	f000 faf7 	bl	8002b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256e:	f000 fc45 	bl	8002dfc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002572:	f000 fb95 	bl	8002ca0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002576:	f000 fc17 	bl	8002da8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800257a:	f000 fb35 	bl	8002be8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800257e:	f000 fb61 	bl	8002c44 <MX_I2C2_Init>
  MX_TIM4_Init();
 8002582:	f000 fbc3 	bl	8002d0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZAÇÀO DOS PINOS DE ACIONAMENTO E MONITORAMENTO DE CARGA
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); 			// ACIONA CARGA 1 = 0
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258c:	4892      	ldr	r0, [pc, #584]	; (80027d8 <main+0x278>)
 800258e:	f001 fc0a 	bl	8003da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); 			// ACIONA CARGA 2 = 0
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002598:	488f      	ldr	r0, [pc, #572]	; (80027d8 <main+0x278>)
 800259a:	f001 fc04 	bl	8003da6 <HAL_GPIO_WritePin>
  GPIO_PinState pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); 	// Lê o estado do pino GPIO14 para carga 1; RESET = 0V -> HA CARGA
 800259e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a2:	488e      	ldr	r0, [pc, #568]	; (80027dc <main+0x27c>)
 80025a4:	f001 fbe8 	bl	8003d78 <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	717b      	strb	r3, [r7, #5]
  GPIO_PinState pin_state2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); 	// Lê o estado do pino GPIO15 para carga 2; RESET = 0V -> HA CARGA
 80025ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025b0:	488a      	ldr	r0, [pc, #552]	; (80027dc <main+0x27c>)
 80025b2:	f001 fbe1 	bl	8003d78 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	713b      	strb	r3, [r7, #4]

  // INICIALIZAÇÃO DE SENSORES
  MPU6050_Config();
 80025ba:	f7ff f923 	bl	8001804 <MPU6050_Config>
  MPU6050_2_Config();
 80025be:	f7ff f977 	bl	80018b0 <MPU6050_2_Config>
  BMP280_Config(OSRS_2, OSRS_16, MODE_NORMAL, T_SB_0p5, IIR_16);
 80025c2:	2304      	movs	r3, #4
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	2203      	movs	r2, #3
 80025ca:	2105      	movs	r1, #5
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7ff fa7b 	bl	8001ac8 <BMP280_Config>

  // INICIALIZÇÃO DO ESTADO E INDICADORES DE PRÉ LANÇAMENTO
  current_state = PAUSADO;
 80025d2:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <main+0x280>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
  EstadoAltitude = ESTADO_INICIAL;
 80025d8:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <main+0x284>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]

  GPIO_PinState pin_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); 		// BUTTON
 80025de:	2101      	movs	r1, #1
 80025e0:	487e      	ldr	r0, [pc, #504]	; (80027dc <main+0x27c>)
 80025e2:	f001 fbc9 	bl	8003d78 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 	GPIO_PIN_RESET);  	// LED VERDE -> ESTADO LANÇADO
 80025ea:	2200      	movs	r2, #0
 80025ec:	2120      	movs	r1, #32
 80025ee:	487a      	ldr	r0, [pc, #488]	; (80027d8 <main+0x278>)
 80025f0:	f001 fbd9 	bl	8003da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 	GPIO_PIN_RESET); 	// LED VERMELHO -> PAUSADO
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fa:	4877      	ldr	r0, [pc, #476]	; (80027d8 <main+0x278>)
 80025fc:	f001 fbd3 	bl	8003da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// LED AMARELO -> ESTADO AGUARDANDO LANÇAMENTO
 8002600:	2200      	movs	r2, #0
 8002602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002606:	4875      	ldr	r0, [pc, #468]	; (80027dc <main+0x27c>)
 8002608:	f001 fbcd 	bl	8003da6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 	GPIO_PIN_RESET); 	// BUZER
 800260c:	2200      	movs	r2, #0
 800260e:	2102      	movs	r1, #2
 8002610:	4872      	ldr	r0, [pc, #456]	; (80027dc <main+0x27c>)
 8002612:	f001 fbc8 	bl	8003da6 <HAL_GPIO_WritePin>

  // INICIALIZAÇÃO DAS INTERRUPÇÕES
  HAL_TIM_Base_Start_IT(&htim4);
 8002616:	4874      	ldr	r0, [pc, #464]	; (80027e8 <main+0x288>)
 8002618:	f005 fce6 	bl	8007fe8 <HAL_TIM_Base_Start_IT>

  // INICIALIZAÇÃO FRAM
  FRAM_state = FRAM_PAUSED;
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <main+0x28c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
  FRAMset_config();
 8002622:	f7ff fee7 	bl	80023f4 <FRAMset_config>
  uint16_t FRAM_address = 0x0000;
 8002626:	2300      	movs	r3, #0
 8002628:	80fb      	strh	r3, [r7, #6]

  data_vehicle.pressMIN = 100000;
 800262a:	4b71      	ldr	r3, [pc, #452]	; (80027f0 <main+0x290>)
 800262c:	4a71      	ldr	r2, [pc, #452]	; (80027f4 <main+0x294>)
 800262e:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

 while (1)
 {
	 pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002634:	4869      	ldr	r0, [pc, #420]	; (80027dc <main+0x27c>)
 8002636:	f001 fb9f 	bl	8003d78 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	717b      	strb	r3, [r7, #5]
	 pin_state2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800263e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002642:	4866      	ldr	r0, [pc, #408]	; (80027dc <main+0x27c>)
 8002644:	f001 fb98 	bl	8003d78 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	713b      	strb	r3, [r7, #4]
	 pin_button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800264c:	2101      	movs	r1, #1
 800264e:	4863      	ldr	r0, [pc, #396]	; (80027dc <main+0x27c>)
 8002650:	f001 fb92 	bl	8003d78 <HAL_GPIO_ReadPin>
 8002654:	4603      	mov	r3, r0
 8002656:	70fb      	strb	r3, [r7, #3]
	 //data_vehicle.accelTemp = data_vehicle.accel;



     // Verifica a tendência da aceleraçao
	 data_vehicle.accel = ema_receive.EMA_z;
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <main+0x298>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a64      	ldr	r2, [pc, #400]	; (80027f0 <main+0x290>)
 800265e:	6013      	str	r3, [r2, #0]
	 data_vehicle.accelTemp = ema_receive.EMA_z;
 8002660:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <main+0x298>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a62      	ldr	r2, [pc, #392]	; (80027f0 <main+0x290>)
 8002666:	6093      	str	r3, [r2, #8]
     diffAceleracao = data_vehicle.accel - data_vehicle.accel_anterior;
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <main+0x290>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <main+0x290>)
 800266e:	6852      	ldr	r2, [r2, #4]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fa2c 	bl	8000ad0 <__aeabi_fsub>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <main+0x29c>)
 800267e:	601a      	str	r2, [r3, #0]

     if (data_vehicle.accel > -0.1 && data_vehicle.accel < 0.1) {
 8002680:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <main+0x290>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fec7 	bl	8000418 <__aeabi_f2d>
 800268a:	a34f      	add	r3, pc, #316	; (adr r3, 80027c8 <main+0x268>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fe f9aa 	bl	80009e8 <__aeabi_dcmpgt>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <main+0x15c>
 800269a:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <main+0x290>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd feba 	bl	8000418 <__aeabi_f2d>
 80026a4:	a34a      	add	r3, pc, #296	; (adr r3, 80027d0 <main+0x270>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fe f97f 	bl	80009ac <__aeabi_dcmplt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <main+0x15c>
    	 EstadoAceleracao = ACCEL_NEAR_ZERO;
 80026b4:	4b52      	ldr	r3, [pc, #328]	; (8002800 <main+0x2a0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e037      	b.n	800272c <main+0x1cc>
     } else if ( -1.5 < data_vehicle.accel && data_vehicle.accel < -1) {
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <main+0x290>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4950      	ldr	r1, [pc, #320]	; (8002804 <main+0x2a4>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fcca 	bl	800105c <__aeabi_fcmpgt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <main+0x188>
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <main+0x290>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	494d      	ldr	r1, [pc, #308]	; (8002808 <main+0x2a8>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fca3 	bl	8001020 <__aeabi_fcmplt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <main+0x188>
    	 EstadoAceleracao = ACCEL_NEAR_G;
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <main+0x2a0>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e021      	b.n	800272c <main+0x1cc>
     } else if (data_vehicle.accel > 1) {
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <main+0x290>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fcb3 	bl	800105c <__aeabi_fcmpgt>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <main+0x1a4>
    	 EstadoAceleracao = ACCEL_HIGH_POSITIVE;
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <main+0x2a0>)
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e013      	b.n	800272c <main+0x1cc>
     } else if (diffAceleracao < -0.1) {
 8002704:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <main+0x29c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe85 	bl	8000418 <__aeabi_f2d>
 800270e:	a32e      	add	r3, pc, #184	; (adr r3, 80027c8 <main+0x268>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fe f94a 	bl	80009ac <__aeabi_dcmplt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <main+0x1c6>
    	 EstadoAceleracao = ACCEL_HIGH_NEGATIVE;
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <main+0x2a0>)
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e002      	b.n	800272c <main+0x1cc>
     } else {
    	 EstadoAceleracao = ACCEL_LOW_NEGATIVE;
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <main+0x2a0>)
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
     }


     // Verifica a tendência da altitude
     if (press_receiv == 1){
 800272c:	4b37      	ldr	r3, [pc, #220]	; (800280c <main+0x2ac>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	f040 8092 	bne.w	800285a <main+0x2fa>
    	 press_receiv = 0;
 8002736:	4b35      	ldr	r3, [pc, #212]	; (800280c <main+0x2ac>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
    	 data_vehicle.pressao = ema_receive.EMA_press;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <main+0x298>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <main+0x290>)
 8002742:	60d3      	str	r3, [r2, #12]
    	 data_vehicle.pressTemp = data_vehicle.pressao;
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <main+0x290>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <main+0x290>)
 800274a:	6153      	str	r3, [r2, #20]

    	 if ( data_vehicle.pressao < data_vehicle.pressao_anterior){
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <main+0x290>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <main+0x290>)
 8002752:	6912      	ldr	r2, [r2, #16]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fc62 	bl	8001020 <__aeabi_fcmplt>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <main+0x228>
    		 if (contSubida < 20)
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <main+0x2b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b13      	cmp	r3, #19
 8002768:	dc04      	bgt.n	8002774 <main+0x214>
    			 contSubida++;
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <main+0x2b0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <main+0x2b0>)
 8002772:	6013      	str	r3, [r2, #0]
    		 if (contDescida > 0)
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <main+0x2b4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	dd6a      	ble.n	8002852 <main+0x2f2>
    			 contDescida--;
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <main+0x2b4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	4a24      	ldr	r2, [pc, #144]	; (8002814 <main+0x2b4>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e064      	b.n	8002852 <main+0x2f2>
    	 } else if ( data_vehicle.pressao > data_vehicle.pressao_anterior) {
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <main+0x290>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <main+0x290>)
 800278e:	6912      	ldr	r2, [r2, #16]
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc62 	bl	800105c <__aeabi_fcmpgt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03c      	beq.n	8002818 <main+0x2b8>
    		 if (contDescida < 20)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <main+0x2b4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b13      	cmp	r3, #19
 80027a4:	dc04      	bgt.n	80027b0 <main+0x250>
    			 contDescida++;
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <main+0x2b4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <main+0x2b4>)
 80027ae:	6013      	str	r3, [r2, #0]
    		 if (contSubida > 0 )
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <main+0x2b0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dd4c      	ble.n	8002852 <main+0x2f2>
    			 contSubida--;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <main+0x2b0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <main+0x2b0>)
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e046      	b.n	8002852 <main+0x2f2>
 80027c4:	f3af 8000 	nop.w
 80027c8:	9999999a 	.word	0x9999999a
 80027cc:	bfb99999 	.word	0xbfb99999
 80027d0:	9999999a 	.word	0x9999999a
 80027d4:	3fb99999 	.word	0x3fb99999
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	40010800 	.word	0x40010800
 80027e0:	200003bc 	.word	0x200003bc
 80027e4:	200003bd 	.word	0x200003bd
 80027e8:	20000314 	.word	0x20000314
 80027ec:	20000159 	.word	0x20000159
 80027f0:	200003a0 	.word	0x200003a0
 80027f4:	47c35000 	.word	0x47c35000
 80027f8:	200003cc 	.word	0x200003cc
 80027fc:	200003c8 	.word	0x200003c8
 8002800:	200003be 	.word	0x200003be
 8002804:	bfc00000 	.word	0xbfc00000
 8002808:	bf800000 	.word	0xbf800000
 800280c:	200000fc 	.word	0x200000fc
 8002810:	200003c0 	.word	0x200003c0
 8002814:	200003c4 	.word	0x200003c4
    	 } else if (data_vehicle.pressao == data_vehicle.pressao_anterior){
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <main+0x50c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a93      	ldr	r2, [pc, #588]	; (8002a6c <main+0x50c>)
 800281e:	6912      	ldr	r2, [r2, #16]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fbf2 	bl	800100c <__aeabi_fcmpeq>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d011      	beq.n	8002852 <main+0x2f2>
    		 if (contDescida > 0)
 800282e:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <main+0x510>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	dd04      	ble.n	8002840 <main+0x2e0>
    		     contDescida--;
 8002836:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <main+0x510>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	4a8c      	ldr	r2, [pc, #560]	; (8002a70 <main+0x510>)
 800283e:	6013      	str	r3, [r2, #0]
    		 if (contSubida > 0 )
 8002840:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <main+0x514>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	dd04      	ble.n	8002852 <main+0x2f2>
    			 contSubida--;
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <main+0x514>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	4a89      	ldr	r2, [pc, #548]	; (8002a74 <main+0x514>)
 8002850:	6013      	str	r3, [r2, #0]
    	 }
    	 data_vehicle.pressao_anterior = data_vehicle.pressTemp;
 8002852:	4b86      	ldr	r3, [pc, #536]	; (8002a6c <main+0x50c>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4a85      	ldr	r2, [pc, #532]	; (8002a6c <main+0x50c>)
 8002858:	6113      	str	r3, [r2, #16]
     }


     // MAQUINA DE ESTADOS PARA VERIFICAÇAO DA ALTITUDE
     switch (EstadoAltitude) {
 800285a:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <main+0x518>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d864      	bhi.n	800292c <main+0x3cc>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <main+0x308>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	08002879 	.word	0x08002879
 800286c:	080028b1 	.word	0x080028b1
 8002870:	080028d7 	.word	0x080028d7
 8002874:	080028ff 	.word	0x080028ff
         case ESTADO_INICIAL:
             if (contSubida >= NUM_AMOSTRAS) {
 8002878:	4b7e      	ldr	r3, [pc, #504]	; (8002a74 <main+0x514>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b13      	cmp	r3, #19
 800287e:	dd03      	ble.n	8002888 <main+0x328>
            	 EstadoAltitude = ESTADO_SUBIDA;
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <main+0x518>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
             } else if (contDescida >= NUM_AMOSTRAS) {
            	 EstadoAltitude = ESTADO_DESCIDA;
             } else if (contSubida == 0 && contDescida == 0) {
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
             }
             break;
 8002886:	e04a      	b.n	800291e <main+0x3be>
             } else if (contDescida >= NUM_AMOSTRAS) {
 8002888:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <main+0x510>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b13      	cmp	r3, #19
 800288e:	dd03      	ble.n	8002898 <main+0x338>
            	 EstadoAltitude = ESTADO_DESCIDA;
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <main+0x518>)
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
             break;
 8002896:	e042      	b.n	800291e <main+0x3be>
             } else if (contSubida == 0 && contDescida == 0) {
 8002898:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <main+0x514>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d13e      	bne.n	800291e <main+0x3be>
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <main+0x510>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d13a      	bne.n	800291e <main+0x3be>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 80028a8:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <main+0x518>)
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
             break;
 80028ae:	e036      	b.n	800291e <main+0x3be>

         case ESTADO_SUBIDA:
             if (contDescida >= NUM_AMOSTRAS) {
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <main+0x510>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b13      	cmp	r3, #19
 80028b6:	dd03      	ble.n	80028c0 <main+0x360>
            	 EstadoAltitude = ESTADO_DESCIDA;
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <main+0x518>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e00a      	b.n	80028d6 <main+0x376>
             } else if (contSubida == 0 && contDescida == 0) {
 80028c0:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <main+0x514>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d12c      	bne.n	8002922 <main+0x3c2>
 80028c8:	4b69      	ldr	r3, [pc, #420]	; (8002a70 <main+0x510>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d128      	bne.n	8002922 <main+0x3c2>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 80028d0:	4b69      	ldr	r3, [pc, #420]	; (8002a78 <main+0x518>)
 80028d2:	2203      	movs	r2, #3
 80028d4:	701a      	strb	r2, [r3, #0]
             }else
             break;

         case ESTADO_DESCIDA:
             if (contSubida >= NUM_AMOSTRAS) {
 80028d6:	4b67      	ldr	r3, [pc, #412]	; (8002a74 <main+0x514>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b13      	cmp	r3, #19
 80028dc:	dd03      	ble.n	80028e6 <main+0x386>
            	 EstadoAltitude = ESTADO_SUBIDA;
 80028de:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <main+0x518>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
             } else if (contSubida == 0 && contDescida == 0) {
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
             }
             break;
 80028e4:	e01f      	b.n	8002926 <main+0x3c6>
             } else if (contSubida == 0 && contDescida == 0) {
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <main+0x514>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11b      	bne.n	8002926 <main+0x3c6>
 80028ee:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <main+0x510>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d117      	bne.n	8002926 <main+0x3c6>
            	 EstadoAltitude = ESTADO_ESTACIONARIO;
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <main+0x518>)
 80028f8:	2203      	movs	r2, #3
 80028fa:	701a      	strb	r2, [r3, #0]
             break;
 80028fc:	e013      	b.n	8002926 <main+0x3c6>

         case ESTADO_ESTACIONARIO:
             if (contSubida >= NUM_AMOSTRAS - 5 ) {
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <main+0x514>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b0e      	cmp	r3, #14
 8002904:	dd03      	ble.n	800290e <main+0x3ae>
            	 EstadoAltitude = ESTADO_SUBIDA;
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <main+0x518>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
             } else if (contDescida >= NUM_AMOSTRAS + 5) {
            	 EstadoAltitude = ESTADO_DESCIDA;
             }
             break;
 800290c:	e00d      	b.n	800292a <main+0x3ca>
             } else if (contDescida >= NUM_AMOSTRAS + 5) {
 800290e:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <main+0x510>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b18      	cmp	r3, #24
 8002914:	dd09      	ble.n	800292a <main+0x3ca>
            	 EstadoAltitude = ESTADO_DESCIDA;
 8002916:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <main+0x518>)
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
             break;
 800291c:	e005      	b.n	800292a <main+0x3ca>
             break;
 800291e:	bf00      	nop
 8002920:	e004      	b.n	800292c <main+0x3cc>
     }
     data_vehicle.accel_anterior = data_vehicle.accelTemp;
 8002922:	bf00      	nop
 8002924:	e002      	b.n	800292c <main+0x3cc>
             break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <main+0x3cc>
             break;
 800292a:	bf00      	nop
     data_vehicle.accel_anterior = data_vehicle.accelTemp;
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <main+0x50c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a4e      	ldr	r2, [pc, #312]	; (8002a6c <main+0x50c>)
 8002932:	6053      	str	r3, [r2, #4]


	// MAQUINA DE ESTADOS DO FOGUETE
	switch (current_state){
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <main+0x51c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b06      	cmp	r3, #6
 800293a:	f200 80ca 	bhi.w	8002ad2 <main+0x572>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <main+0x3e4>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002961 	.word	0x08002961
 8002948:	08002999 	.word	0x08002999
 800294c:	080029e7 	.word	0x080029e7
 8002950:	08002ad3 	.word	0x08002ad3
 8002954:	08002a37 	.word	0x08002a37
 8002958:	08002ad3 	.word	0x08002ad3
 800295c:	08002ad3 	.word	0x08002ad3
		case PAUSADO:
			if (pin_state1 == GPIO_PIN_RESET && pin_state2 == GPIO_PIN_RESET && pin_button == GPIO_PIN_SET ){
 8002960:	797b      	ldrb	r3, [r7, #5]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10e      	bne.n	8002984 <main+0x424>
 8002966:	793b      	ldrb	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <main+0x424>
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <main+0x424>
				current_state = AGUARDANDO_LANCAMENTO;
 8002972:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <main+0x51c>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
				FRAM_state = FRAM_IDLE;
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <main+0x520>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
				FRAM_ID();
 800297e:	f7ff fd79 	bl	8002474 <FRAM_ID>
			}
			else {
				current_state = PAUSADO;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// LED VERMELHO para indicar PAUSA
			}
		break;
 8002982:	e0ad      	b.n	8002ae0 <main+0x580>
				current_state = PAUSADO;
 8002984:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <main+0x51c>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); 	// LED VERMELHO para indicar PAUSA
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002990:	483c      	ldr	r0, [pc, #240]	; (8002a84 <main+0x524>)
 8002992:	f001 fa08 	bl	8003da6 <HAL_GPIO_WritePin>
		break;
 8002996:	e0a3      	b.n	8002ae0 <main+0x580>
		case AGUARDANDO_LANCAMENTO:
			if (EstadoAceleracao == ACCEL_HIGH_POSITIVE){
 8002998:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <main+0x528>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d103      	bne.n	80029a8 <main+0x448>
				current_state = LANCADO;
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <main+0x51c>)
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// DESLIGA LED VERMELHO
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 	// BUZZER INDICA AGUARDANDO LANÇAMENTO
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); 	// LED AMARELO INDICAÇÃO AGUARDANDO LANÇAMENTO
				current_state = AGUARDANDO_LANCAMENTO;
			}
		break;
 80029a6:	e096      	b.n	8002ad6 <main+0x576>
			else if (EstadoAceleracao == ACCEL_NEAR_ZERO && EstadoAltitude == ESTADO_ESTACIONARIO){
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <main+0x528>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 8092 	bne.w	8002ad6 <main+0x576>
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <main+0x518>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	f040 808d 	bne.w	8002ad6 <main+0x576>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); 	// DESLIGA LED VERMELHO
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c2:	4830      	ldr	r0, [pc, #192]	; (8002a84 <main+0x524>)
 80029c4:	f001 f9ef 	bl	8003da6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); 	// BUZZER INDICA AGUARDANDO LANÇAMENTO
 80029c8:	2201      	movs	r2, #1
 80029ca:	2102      	movs	r1, #2
 80029cc:	482f      	ldr	r0, [pc, #188]	; (8002a8c <main+0x52c>)
 80029ce:	f001 f9ea 	bl	8003da6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); 	// LED AMARELO INDICAÇÃO AGUARDANDO LANÇAMENTO
 80029d2:	2201      	movs	r2, #1
 80029d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d8:	482c      	ldr	r0, [pc, #176]	; (8002a8c <main+0x52c>)
 80029da:	f001 f9e4 	bl	8003da6 <HAL_GPIO_WritePin>
				current_state = AGUARDANDO_LANCAMENTO;
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <main+0x51c>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
		break;
 80029e4:	e077      	b.n	8002ad6 <main+0x576>
		case LANCADO:
			if (EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_HIGH_POSITIVE){
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <main+0x518>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d117      	bne.n	8002a1e <main+0x4be>
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <main+0x528>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d113      	bne.n	8002a1e <main+0x4be>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);	// DESLIGA BUZZER
 80029f6:	2200      	movs	r2, #0
 80029f8:	2102      	movs	r1, #2
 80029fa:	4824      	ldr	r0, [pc, #144]	; (8002a8c <main+0x52c>)
 80029fc:	f001 f9d3 	bl	8003da6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// DESLIGA LED AMARELO
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a06:	4821      	ldr	r0, [pc, #132]	; (8002a8c <main+0x52c>)
 8002a08:	f001 f9cd 	bl	8003da6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET); 		// LIGA LED VERDE DE LANÇADO
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2120      	movs	r1, #32
 8002a10:	481c      	ldr	r0, [pc, #112]	; (8002a84 <main+0x524>)
 8002a12:	f001 f9c8 	bl	8003da6 <HAL_GPIO_WritePin>
	          	current_state = LANCADO;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <main+0x51c>)
 8002a18:	2202      	movs	r2, #2
 8002a1a:	701a      	strb	r2, [r3, #0]
			}
			else if(EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_LOW_NEGATIVE){
				current_state = DETECCAO_APOGEU ;
			}

			break;
 8002a1c:	e05d      	b.n	8002ada <main+0x57a>
			else if(EstadoAltitude == ESTADO_SUBIDA && EstadoAceleracao == ACCEL_LOW_NEGATIVE){
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <main+0x518>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d159      	bne.n	8002ada <main+0x57a>
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <main+0x528>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d155      	bne.n	8002ada <main+0x57a>
				current_state = DETECCAO_APOGEU ;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <main+0x51c>)
 8002a30:	2204      	movs	r2, #4
 8002a32:	701a      	strb	r2, [r3, #0]
			break;
 8002a34:	e051      	b.n	8002ada <main+0x57a>
	     case DETECCAO_APOGEU:
	          if (EstadoAceleracao == ACCEL_NEAR_G && EstadoAltitude == ESTADO_DESCIDA ){
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <main+0x528>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d128      	bne.n	8002a90 <main+0x530>
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <main+0x518>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d124      	bne.n	8002a90 <main+0x530>
	        	  if(data_vehicle.pressMIN > data_vehicle.pressao)
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <main+0x50c>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <main+0x50c>)
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fb03 	bl	800105c <__aeabi_fcmpgt>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <main+0x504>
	        		  data_vehicle.pressMIN =  data_vehicle.pressao ;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <main+0x50c>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <main+0x50c>)
 8002a62:	6193      	str	r3, [r2, #24]
	        	  current_state = DETECCAO_APOGEU;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <main+0x51c>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]
	        	  current_state = PARAQUEDAS_ACIONADO;
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // ACIONA CARGA 2 = 1; paraquedas on
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); // DESLIGA O LED VERDE
	          }
	         break;
 8002a6a:	e038      	b.n	8002ade <main+0x57e>
 8002a6c:	200003a0 	.word	0x200003a0
 8002a70:	200003c4 	.word	0x200003c4
 8002a74:	200003c0 	.word	0x200003c0
 8002a78:	200003bd 	.word	0x200003bd
 8002a7c:	200003bc 	.word	0x200003bc
 8002a80:	20000159 	.word	0x20000159
 8002a84:	40010c00 	.word	0x40010c00
 8002a88:	200003be 	.word	0x200003be
 8002a8c:	40010800 	.word	0x40010800
	          else if ((EstadoAceleracao == ACCEL_LOW_NEGATIVE || EstadoAceleracao == ACCEL_HIGH_NEGATIVE) && EstadoAltitude ==  ESTADO_DESCIDA){
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <main+0x5e4>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d003      	beq.n	8002aa0 <main+0x540>
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <main+0x5e4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d11e      	bne.n	8002ade <main+0x57e>
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <main+0x5e8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d11a      	bne.n	8002ade <main+0x57e>
	        	  current_state = PARAQUEDAS_ACIONADO;
 8002aa8:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <main+0x5ec>)
 8002aaa:	2206      	movs	r2, #6
 8002aac:	701a      	strb	r2, [r3, #0]
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // ACIONA CARGA 1 = 1;
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab4:	4826      	ldr	r0, [pc, #152]	; (8002b50 <main+0x5f0>)
 8002ab6:	f001 f976 	bl	8003da6 <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // ACIONA CARGA 2 = 1; paraquedas on
 8002aba:	2201      	movs	r2, #1
 8002abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac0:	4823      	ldr	r0, [pc, #140]	; (8002b50 <main+0x5f0>)
 8002ac2:	f001 f970 	bl	8003da6 <HAL_GPIO_WritePin>
	        	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); // DESLIGA O LED VERDE
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2120      	movs	r1, #32
 8002aca:	4821      	ldr	r0, [pc, #132]	; (8002b50 <main+0x5f0>)
 8002acc:	f001 f96b 	bl	8003da6 <HAL_GPIO_WritePin>
	         break;
 8002ad0:	e005      	b.n	8002ade <main+0x57e>
	     case PARAQUEDAS_ACIONADO:

	    	 break;
	  	default:
	  		 break;
 8002ad2:	bf00      	nop
 8002ad4:	e004      	b.n	8002ae0 <main+0x580>
		break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <main+0x580>
			break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <main+0x580>
	         break;
 8002ade:	bf00      	nop
	  }


	// MAQUINA DE ESTADOS DA FRAM
	switch(FRAM_state){
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <main+0x5f4>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d82a      	bhi.n	8002b3e <main+0x5de>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <main+0x590>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b3f 	.word	0x08002b3f
 8002af4:	08002b3f 	.word	0x08002b3f
 8002af8:	08002b0d 	.word	0x08002b0d
 8002afc:	08002b3f 	.word	0x08002b3f
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b3f 	.word	0x08002b3f
 8002b08:	08002b25 	.word	0x08002b25
		case FRAM_PAUSED:

		break;
	  	case FRAM_READ_ID:
	  		FRAM_state = WAIT_FRAM_READ_ID;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <main+0x5f4>)
 8002b0e:	2203      	movs	r2, #3
 8002b10:	701a      	strb	r2, [r3, #0]
	  		FRAM_ID();
 8002b12:	f7ff fcaf 	bl	8002474 <FRAM_ID>
	  		break;
 8002b16:	e013      	b.n	8002b40 <main+0x5e0>
		case ENABLE_WRITE:
			FRAM_state = WAIT_ENABLE_WRITE;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <main+0x5f4>)
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	701a      	strb	r2, [r3, #0]
			FRAM_enablewrite();
 8002b1e:	f7ff fcc5 	bl	80024ac <FRAM_enablewrite>
	  		break;
 8002b22:	e00d      	b.n	8002b40 <main+0x5e0>
		case FRAM_WRITE:
			FRAM_state = WAIT_FRAM_WRITE;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <main+0x5f4>)
 8002b26:	2207      	movs	r2, #7
 8002b28:	701a      	strb	r2, [r3, #0]
			FRAM_Write(FRAM_address, send_FRAM, 16);
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <main+0x5f8>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fccf 	bl	80024d4 <FRAM_Write>
			FRAM_address += 0x10;					// Incrementa a cada 16 bytes
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	3310      	adds	r3, #16
 8002b3a:	80fb      	strh	r3, [r7, #6]
	  		break;
 8002b3c:	e000      	b.n	8002b40 <main+0x5e0>
			FRAM_state = ENABLE_WRITE;

		break;
*/
		default:
			break;
 8002b3e:	bf00      	nop
	 pin_state1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8002b40:	e576      	b.n	8002630 <main+0xd0>
 8002b42:	bf00      	nop
 8002b44:	200003be 	.word	0x200003be
 8002b48:	200003bd 	.word	0x200003bd
 8002b4c:	200003bc 	.word	0x200003bc
 8002b50:	40010c00 	.word	0x40010c00
 8002b54:	20000159 	.word	0x20000159
 8002b58:	200003dc 	.word	0x200003dc

08002b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b62:	f107 0318 	add.w	r3, r7, #24
 8002b66:	2228      	movs	r2, #40	; 0x28
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f006 fac0 	bl	80090f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b90:	2302      	movs	r3, #2
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba0:	f107 0318 	add.w	r3, r7, #24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fdd9 	bl	800675c <HAL_RCC_OscConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002bb0:	f000 f9a0 	bl	8002ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 f846 	bl	8006c60 <HAL_RCC_ClockConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002bda:	f000 f98b 	bl	8002ef4 <Error_Handler>
  }
}
 8002bde:	bf00      	nop
 8002be0:	3740      	adds	r7, #64	; 0x40
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <MX_I2C1_Init+0x54>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002bf4:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <MX_I2C1_Init+0x58>)
 8002bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <MX_I2C1_Init+0x50>)
 8002c26:	f001 f8d7 	bl	8003dd8 <HAL_I2C_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c30:	f000 f960 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000214 	.word	0x20000214
 8002c3c:	40005400 	.word	0x40005400
 8002c40:	000186a0 	.word	0x000186a0

08002c44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <MX_I2C2_Init+0x54>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <MX_I2C2_Init+0x58>)
 8002c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <MX_I2C2_Init+0x50>)
 8002c82:	f001 f8a9 	bl	8003dd8 <HAL_I2C_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c8c:	f000 f932 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000268 	.word	0x20000268
 8002c98:	40005800 	.word	0x40005800
 8002c9c:	000186a0 	.word	0x000186a0

08002ca0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cd4:	2228      	movs	r2, #40	; 0x28
 8002cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cec:	220a      	movs	r2, #10
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf0:	4804      	ldr	r0, [pc, #16]	; (8002d04 <MX_SPI1_Init+0x64>)
 8002cf2:	f004 f94d 	bl	8006f90 <HAL_SPI_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cfc:	f000 f8fa 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200002bc 	.word	0x200002bc
 8002d08:	40013000 	.word	0x40013000

08002d0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <MX_TIM4_Init+0x98>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d30:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d3e:	2232      	movs	r2, #50	; 0x32
 8002d40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d4e:	4814      	ldr	r0, [pc, #80]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d50:	f005 f8fa 	bl	8007f48 <HAL_TIM_Base_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d5a:	f000 f8cb 	bl	8002ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d64:	f107 0308 	add.w	r3, r7, #8
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480d      	ldr	r0, [pc, #52]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d6c:	f005 fa96 	bl	800829c <HAL_TIM_ConfigClockSource>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f000 f8bd 	bl	8002ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d88:	f005 fc68 	bl	800865c <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d92:	f000 f8af 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000314 	.word	0x20000314
 8002da4:	40000800 	.word	0x40000800

08002da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <MX_USART2_UART_Init+0x50>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_USART2_UART_Init+0x4c>)
 8002de0:	f005 fcac 	bl	800873c <HAL_UART_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dea:	f000 f883 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000035c 	.word	0x2000035c
 8002df8:	40004400 	.word	0x40004400

08002dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e10:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a34      	ldr	r2, [pc, #208]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <MX_GPIO_Init+0xec>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f248 0102 	movw	r1, #32770	; 0x8002
 8002e5e:	4823      	ldr	r0, [pc, #140]	; (8002eec <MX_GPIO_Init+0xf0>)
 8002e60:	f000 ffa1 	bl	8003da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5
 8002e64:	2200      	movs	r2, #0
 8002e66:	f243 3121 	movw	r1, #13089	; 0x3321
 8002e6a:	4821      	ldr	r0, [pc, #132]	; (8002ef0 <MX_GPIO_Init+0xf4>)
 8002e6c:	f000 ff9b 	bl	8003da6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4619      	mov	r1, r3
 8002e82:	481a      	ldr	r0, [pc, #104]	; (8002eec <MX_GPIO_Init+0xf0>)
 8002e84:	f000 fdf4 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002e88:	f248 0302 	movw	r3, #32770	; 0x8002
 8002e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4812      	ldr	r0, [pc, #72]	; (8002eec <MX_GPIO_Init+0xf0>)
 8002ea2:	f000 fde5 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5
 8002ea6:	f243 3321 	movw	r3, #13089	; 0x3321
 8002eaa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <MX_GPIO_Init+0xf4>)
 8002ec0:	f000 fdd6 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ec4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <MX_GPIO_Init+0xf0>)
 8002eda:	f000 fdc9 	bl	8003a70 <HAL_GPIO_Init>

}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40010c00 	.word	0x40010c00

08002ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef8:	b672      	cpsid	i
}
 8002efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002efc:	e7fe      	b.n	8002efc <Error_Handler+0x8>
	...

08002f00 <calculate_EMA>:
float get_data[4];

static int count = 0;


void calculate_EMA(void) {
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
	// SOFTWARE IN THE LOOP
    get_data[0] = ((simulated_data.accel_x)/g);
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <calculate_EMA+0x1f4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7b      	ldr	r2, [pc, #492]	; (80030f8 <calculate_EMA+0x1f8>)
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd ff9b 	bl	8000e4c <__aeabi_fdiv>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b78      	ldr	r3, [pc, #480]	; (80030fc <calculate_EMA+0x1fc>)
 8002f1c:	601a      	str	r2, [r3, #0]
    get_data[1] = ((simulated_data.accel_y)/g);
 8002f1e:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <calculate_EMA+0x1f4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a75      	ldr	r2, [pc, #468]	; (80030f8 <calculate_EMA+0x1f8>)
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd ff8f 	bl	8000e4c <__aeabi_fdiv>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <calculate_EMA+0x1fc>)
 8002f34:	605a      	str	r2, [r3, #4]
    get_data[2] = ((simulated_data.accel_z)/g);
 8002f36:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <calculate_EMA+0x1f4>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4a6f      	ldr	r2, [pc, #444]	; (80030f8 <calculate_EMA+0x1f8>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd ff83 	bl	8000e4c <__aeabi_fdiv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <calculate_EMA+0x1fc>)
 8002f4c:	609a      	str	r2, [r3, #8]
    get_data[3] = (simulated_data.pressao);
 8002f4e:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <calculate_EMA+0x1f4>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <calculate_EMA+0x1fc>)
 8002f54:	60d3      	str	r3, [r2, #12]
    get_data[0] = (acc_data.Ax)/16384.0;
    get_data[1] = (acc_data.Ay)/16384.0;
    get_data[2] = (acc_data.Az)/16384.0;
    get_data[3] = (bmp_data.pressure)/256.0;
*/
    ema_receive.EMA_x = alpha * get_data[0] + (1 - alpha) * ema_receive.EMA_x;
 8002f56:	4b69      	ldr	r3, [pc, #420]	; (80030fc <calculate_EMA+0x1fc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a69      	ldr	r2, [pc, #420]	; (8003100 <calculate_EMA+0x200>)
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd febf 	bl	8000ce4 <__aeabi_fmul>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461c      	mov	r4, r3
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <calculate_EMA+0x200>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f74:	f7fd fdac 	bl	8000ad0 <__aeabi_fsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <calculate_EMA+0x204>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7fd feae 	bl	8000ce4 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7fd fda1 	bl	8000ad4 <__addsf3>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <calculate_EMA+0x204>)
 8002f98:	601a      	str	r2, [r3, #0]
    ema_receive.EMA_y = alpha * get_data[1] + (1 - alpha) * ema_receive.EMA_y;
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <calculate_EMA+0x1fc>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a58      	ldr	r2, [pc, #352]	; (8003100 <calculate_EMA+0x200>)
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fe9d 	bl	8000ce4 <__aeabi_fmul>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461c      	mov	r4, r3
 8002fae:	4b54      	ldr	r3, [pc, #336]	; (8003100 <calculate_EMA+0x200>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002fb8:	f7fd fd8a 	bl	8000ad0 <__aeabi_fsub>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <calculate_EMA+0x204>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7fd fe8c 	bl	8000ce4 <__aeabi_fmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7fd fd7f 	bl	8000ad4 <__addsf3>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <calculate_EMA+0x204>)
 8002fdc:	605a      	str	r2, [r3, #4]
    ema_receive.EMA_z = alpha * get_data[2] + (1 - alpha) * ema_receive.EMA_z;
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <calculate_EMA+0x1fc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a47      	ldr	r2, [pc, #284]	; (8003100 <calculate_EMA+0x200>)
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fe7b 	bl	8000ce4 <__aeabi_fmul>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <calculate_EMA+0x200>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ffc:	f7fd fd68 	bl	8000ad0 <__aeabi_fsub>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <calculate_EMA+0x204>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fe6a 	bl	8000ce4 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	4619      	mov	r1, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f7fd fd5d 	bl	8000ad4 <__addsf3>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <calculate_EMA+0x204>)
 8003020:	609a      	str	r2, [r3, #8]
    ema_receive.EMA_press = alpha * get_data[3] + (1 - alpha) * ema_receive.EMA_press;
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <calculate_EMA+0x1fc>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <calculate_EMA+0x200>)
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fe59 	bl	8000ce4 <__aeabi_fmul>
 8003032:	4603      	mov	r3, r0
 8003034:	461c      	mov	r4, r3
 8003036:	4b32      	ldr	r3, [pc, #200]	; (8003100 <calculate_EMA+0x200>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003040:	f7fd fd46 	bl	8000ad0 <__aeabi_fsub>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <calculate_EMA+0x204>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7fd fe48 	bl	8000ce4 <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f7fd fd3b 	bl	8000ad4 <__addsf3>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <calculate_EMA+0x204>)
 8003064:	60da      	str	r2, [r3, #12]

    count++;
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <calculate_EMA+0x208>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a26      	ldr	r2, [pc, #152]	; (8003108 <calculate_EMA+0x208>)
 800306e:	6013      	str	r3, [r2, #0]
    if (count == 10) {  	// Verifica se o contador atingiu 10 para gravar EMA na FRAM
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <calculate_EMA+0x208>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d138      	bne.n	80030ea <calculate_EMA+0x1ea>
    	count = 0;
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <calculate_EMA+0x208>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

    	// Atualiza os valores de data_transf com os últimos valores de EMA
    	float *data_transf = malloc(4 * sizeof(float));
 800307e:	2010      	movs	r0, #16
 8003080:	f006 f826 	bl	80090d0 <malloc>
 8003084:	4603      	mov	r3, r0
 8003086:	607b      	str	r3, [r7, #4]
    	data_transf[0] =  ema_receive.EMA_x;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <calculate_EMA+0x204>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	601a      	str	r2, [r3, #0]
    	data_transf[1] =  ema_receive.EMA_y;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <calculate_EMA+0x204>)
 8003096:	6852      	ldr	r2, [r2, #4]
 8003098:	601a      	str	r2, [r3, #0]
    	data_transf[2] =  ema_receive.EMA_z;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3308      	adds	r3, #8
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <calculate_EMA+0x204>)
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	601a      	str	r2, [r3, #0]
    	data_transf[3] =  ema_receive.EMA_press;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	330c      	adds	r3, #12
 80030a8:	4a16      	ldr	r2, [pc, #88]	; (8003104 <calculate_EMA+0x204>)
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3

        // float to 8 bits -> 4 bytes
    	memcpy(send_FRAM, &data_transf[0], sizeof(data_transf[0]));
 80030b4:	4b15      	ldr	r3, [pc, #84]	; (800310c <calculate_EMA+0x20c>)
 80030b6:	601a      	str	r2, [r3, #0]
    	memcpy(send_FRAM + sizeof(data_transf[0]), &data_transf[1], sizeof(data_transf[1]));
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <calculate_EMA+0x210>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6013      	str	r3, [r2, #0]
    	memcpy(send_FRAM + 2 * sizeof(data_transf[0]), &data_transf[2], sizeof(data_transf[2]));
 80030c2:	4a14      	ldr	r2, [pc, #80]	; (8003114 <calculate_EMA+0x214>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3308      	adds	r3, #8
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6013      	str	r3, [r2, #0]
    	memcpy(send_FRAM + 3 * sizeof(data_transf[0]), &data_transf[3], sizeof(data_transf[3]));
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <calculate_EMA+0x218>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	330c      	adds	r3, #12
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6013      	str	r3, [r2, #0]

    	// Libera a memória alocada por send_FRAM
    	free(data_transf);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f006 f802 	bl	80090e0 <free>

    	// Envia os dados para gravaçao na FRAM
    	if (FRAM_state == FRAM_IDLE){
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <calculate_EMA+0x21c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <calculate_EMA+0x1ea>
    		FRAM_state = ENABLE_WRITE;
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <calculate_EMA+0x21c>)
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200000e8 	.word	0x200000e8
 80030f8:	20000004 	.word	0x20000004
 80030fc:	200003ec 	.word	0x200003ec
 8003100:	20000008 	.word	0x20000008
 8003104:	200003cc 	.word	0x200003cc
 8003108:	200003fc 	.word	0x200003fc
 800310c:	200003dc 	.word	0x200003dc
 8003110:	200003e0 	.word	0x200003e0
 8003114:	200003e4 	.word	0x200003e4
 8003118:	200003e8 	.word	0x200003e8
 800311c:	20000159 	.word	0x20000159

08003120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_MspInit+0x5c>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_MspInit+0x5c>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6193      	str	r3, [r2, #24]
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_MspInit+0x5c>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_MspInit+0x5c>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_MspInit+0x5c>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_MspInit+0x5c>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_MspInit+0x60>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_MspInit+0x60>)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000

08003184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0318 	add.w	r3, r7, #24
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3b      	ldr	r2, [pc, #236]	; (800328c <HAL_I2C_MspInit+0x108>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d134      	bne.n	800320e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a39      	ldr	r2, [pc, #228]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6193      	str	r3, [r2, #24]
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031bc:	23c0      	movs	r3, #192	; 0xc0
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c0:	2312      	movs	r3, #18
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c4:	2303      	movs	r3, #3
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c8:	f107 0318 	add.w	r3, r7, #24
 80031cc:	4619      	mov	r1, r3
 80031ce:	4831      	ldr	r0, [pc, #196]	; (8003294 <HAL_I2C_MspInit+0x110>)
 80031d0:	f000 fc4e 	bl	8003a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031de:	61d3      	str	r3, [r2, #28]
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2101      	movs	r1, #1
 80031f0:	201f      	movs	r0, #31
 80031f2:	f000 fb4a 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031f6:	201f      	movs	r0, #31
 80031f8:	f000 fb63 	bl	80038c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	2020      	movs	r0, #32
 8003202:	f000 fb42 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003206:	2020      	movs	r0, #32
 8003208:	f000 fb5b 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800320c:	e039      	b.n	8003282 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_I2C_MspInit+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d134      	bne.n	8003282 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6193      	str	r3, [r2, #24]
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003230:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003236:	2312      	movs	r3, #18
 8003238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0318 	add.w	r3, r7, #24
 8003242:	4619      	mov	r1, r3
 8003244:	4813      	ldr	r0, [pc, #76]	; (8003294 <HAL_I2C_MspInit+0x110>)
 8003246:	f000 fc13 	bl	8003a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a10      	ldr	r2, [pc, #64]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 8003250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003254:	61d3      	str	r3, [r2, #28]
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_I2C_MspInit+0x10c>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	2021      	movs	r0, #33	; 0x21
 8003268:	f000 fb0f 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800326c:	2021      	movs	r0, #33	; 0x21
 800326e:	f000 fb28 	bl	80038c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2022      	movs	r0, #34	; 0x22
 8003278:	f000 fb07 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800327c:	2022      	movs	r0, #34	; 0x22
 800327e:	f000 fb20 	bl	80038c2 <HAL_NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	3728      	adds	r7, #40	; 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40005400 	.word	0x40005400
 8003290:	40021000 	.word	0x40021000
 8003294:	40010c00 	.word	0x40010c00
 8003298:	40005800 	.word	0x40005800

0800329c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_SPI_MspInit+0x98>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d137      	bne.n	800332c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_SPI_MspInit+0x9c>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80032ec:	23a0      	movs	r3, #160	; 0xa0
 80032ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	4619      	mov	r1, r3
 80032fe:	480f      	ldr	r0, [pc, #60]	; (800333c <HAL_SPI_MspInit+0xa0>)
 8003300:	f000 fbb6 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	4619      	mov	r1, r3
 8003316:	4809      	ldr	r0, [pc, #36]	; (800333c <HAL_SPI_MspInit+0xa0>)
 8003318:	f000 fbaa 	bl	8003a70 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	2023      	movs	r0, #35	; 0x23
 8003322:	f000 fab2 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003326:	2023      	movs	r0, #35	; 0x23
 8003328:	f000 facb 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013000 	.word	0x40013000
 8003338:	40021000 	.word	0x40021000
 800333c:	40010800 	.word	0x40010800

08003340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_TIM_Base_MspInit+0x44>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d113      	bne.n	800337a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_TIM_Base_MspInit+0x48>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <HAL_TIM_Base_MspInit+0x48>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	61d3      	str	r3, [r2, #28]
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_TIM_Base_MspInit+0x48>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	201e      	movs	r0, #30
 8003370:	f000 fa8b 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003374:	201e      	movs	r0, #30
 8003376:	f000 faa4 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40000800 	.word	0x40000800
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_UART_MspInit+0x98>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d137      	bne.n	800341c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ac:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b6:	61d3      	str	r3, [r2, #28]
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	4a17      	ldr	r2, [pc, #92]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6193      	str	r3, [r2, #24]
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_UART_MspInit+0x9c>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033dc:	2304      	movs	r3, #4
 80033de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	f107 0310 	add.w	r3, r7, #16
 80033ec:	4619      	mov	r1, r3
 80033ee:	480f      	ldr	r0, [pc, #60]	; (800342c <HAL_UART_MspInit+0xa0>)
 80033f0:	f000 fb3e 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033f4:	2308      	movs	r3, #8
 80033f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	4619      	mov	r1, r3
 8003406:	4809      	ldr	r0, [pc, #36]	; (800342c <HAL_UART_MspInit+0xa0>)
 8003408:	f000 fb32 	bl	8003a70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	2026      	movs	r0, #38	; 0x26
 8003412:	f000 fa3a 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003416:	2026      	movs	r0, #38	; 0x26
 8003418:	f000 fa53 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800341c:	bf00      	nop
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40004400 	.word	0x40004400
 8003428:	40021000 	.word	0x40021000
 800342c:	40010800 	.word	0x40010800

08003430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003434:	e7fe      	b.n	8003434 <NMI_Handler+0x4>

08003436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343a:	e7fe      	b.n	800343a <HardFault_Handler+0x4>

0800343c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003440:	e7fe      	b.n	8003440 <MemManage_Handler+0x4>

08003442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003446:	e7fe      	b.n	8003446 <BusFault_Handler+0x4>

08003448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800344c:	e7fe      	b.n	800344c <UsageFault_Handler+0x4>

0800344e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003476:	f000 f8f1 	bl	800365c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <TIM4_IRQHandler+0x10>)
 8003486:	f004 fe01 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000314 	.word	0x20000314

08003494 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <I2C1_EV_IRQHandler+0x10>)
 800349a:	f001 f943 	bl	8004724 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000214 	.word	0x20000214

080034a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <I2C1_ER_IRQHandler+0x10>)
 80034ae:	f001 faaa 	bl	8004a06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000214 	.word	0x20000214

080034bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <I2C2_EV_IRQHandler+0x10>)
 80034c2:	f001 f92f 	bl	8004724 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000268 	.word	0x20000268

080034d0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <I2C2_ER_IRQHandler+0x10>)
 80034d6:	f001 fa96 	bl	8004a06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000268 	.word	0x20000268

080034e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <SPI1_IRQHandler+0x10>)
 80034ea:	f004 f8cd 	bl	8007688 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200002bc 	.word	0x200002bc

080034f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <USART2_IRQHandler+0x10>)
 80034fe:	f005 f9df 	bl	80088c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000035c 	.word	0x2000035c

0800350c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <_sbrk+0x5c>)
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <_sbrk+0x60>)
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <_sbrk+0x64>)
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <_sbrk+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <_sbrk+0x64>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d207      	bcs.n	800354c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800353c:	f005 fd9e 	bl	800907c <__errno>
 8003540:	4603      	mov	r3, r0
 8003542:	220c      	movs	r2, #12
 8003544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e009      	b.n	8003560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <_sbrk+0x64>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <_sbrk+0x64>)
 800355c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20005000 	.word	0x20005000
 800356c:	00000400 	.word	0x00000400
 8003570:	20000400 	.word	0x20000400
 8003574:	20000418 	.word	0x20000418

08003578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480c      	ldr	r0, [pc, #48]	; (80035b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003586:	490d      	ldr	r1, [pc, #52]	; (80035bc <LoopFillZerobss+0x16>)
                ldr r2, =_sidata
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800359c:	4c0a      	ldr	r4, [pc, #40]	; (80035c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035aa:	f7ff ffe5 	bl	8003578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ae:	f005 fd6b 	bl	8009088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035b2:	f7fe ffd5 	bl	8002560 <main>
  bx lr
 80035b6:	4770      	bx	lr
  ldr r0, =_sdata
 80035b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035bc:	2000007c 	.word	0x2000007c
                ldr r2, =_sidata
 80035c0:	0800a140 	.word	0x0800a140
  ldr r2, =_sbss
 80035c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80035c8:	20000418 	.word	0x20000418

080035cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035cc:	e7fe      	b.n	80035cc <ADC1_2_IRQHandler>
	...

080035d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_Init+0x28>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_Init+0x28>)
 80035da:	f043 0310 	orr.w	r3, r3, #16
 80035de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e0:	2003      	movs	r0, #3
 80035e2:	f000 f947 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f808 	bl	80035fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035ec:	f7ff fd98 	bl	8003120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40022000 	.word	0x40022000

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_InitTick+0x54>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_InitTick+0x58>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4619      	mov	r1, r3
 800360e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003612:	fbb3 f3f1 	udiv	r3, r3, r1
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f95f 	bl	80038de <HAL_SYSTICK_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e00e      	b.n	8003648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d80a      	bhi.n	8003646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003630:	2200      	movs	r2, #0
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f000 f927 	bl	800388a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800363c:	4a06      	ldr	r2, [pc, #24]	; (8003658 <HAL_InitTick+0x5c>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000000c 	.word	0x2000000c
 8003654:	20000014 	.word	0x20000014
 8003658:	20000010 	.word	0x20000010

0800365c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_IncTick+0x1c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_IncTick+0x20>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4413      	add	r3, r2
 800366c:	4a03      	ldr	r2, [pc, #12]	; (800367c <HAL_IncTick+0x20>)
 800366e:	6013      	str	r3, [r2, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	20000014 	.word	0x20000014
 800367c:	20000404 	.word	0x20000404

08003680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b02      	ldr	r3, [pc, #8]	; (8003690 <HAL_GetTick+0x10>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	20000404 	.word	0x20000404

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff fff0 	bl	8003680 <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffe0 	bl	8003680 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000014 	.word	0x20000014

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <__NVIC_EnableIRQ+0x34>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	; (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	; (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003840:	d301      	bcc.n	8003846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003842:	2301      	movs	r3, #1
 8003844:	e00f      	b.n	8003866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <SysTick_Config+0x40>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384e:	210f      	movs	r1, #15
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f7ff ff90 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Config+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <SysTick_Config+0x40>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff2d 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	4603      	mov	r3, r0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800389c:	f7ff ff42 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7ff ff90 	bl	80037cc <NVIC_EncodePriority>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff5f 	bl	8003778 <__NVIC_SetPriority>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff35 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffa2 	bl	8003830 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003908:	2b02      	cmp	r3, #2
 800390a:	d008      	beq.n	800391e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2204      	movs	r2, #4
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e020      	b.n	8003960 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 020e 	bic.w	r2, r2, #14
 800392c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800397e:	2b02      	cmp	r3, #2
 8003980:	d005      	beq.n	800398e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
 800398c:	e051      	b.n	8003a32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 020e 	bic.w	r2, r2, #14
 800399c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_DMA_Abort_IT+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d029      	beq.n	8003a0c <HAL_DMA_Abort_IT+0xa0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <HAL_DMA_Abort_IT+0xd4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_Abort_IT+0x9c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_DMA_Abort_IT+0xd8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01a      	beq.n	8003a02 <HAL_DMA_Abort_IT+0x96>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_DMA_Abort_IT+0xdc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d012      	beq.n	80039fc <HAL_DMA_Abort_IT+0x90>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_DMA_Abort_IT+0xe0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00a      	beq.n	80039f6 <HAL_DMA_Abort_IT+0x8a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_DMA_Abort_IT+0xe4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d102      	bne.n	80039f0 <HAL_DMA_Abort_IT+0x84>
 80039ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039ee:	e00e      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 80039f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f4:	e00b      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 80039f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039fa:	e008      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 80039fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a00:	e005      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 8003a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a06:	e002      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_Abort_IT+0xa2>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <HAL_DMA_Abort_IT+0xe8>)
 8003a10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
    } 
  }
  return status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40020008 	.word	0x40020008
 8003a40:	4002001c 	.word	0x4002001c
 8003a44:	40020030 	.word	0x40020030
 8003a48:	40020044 	.word	0x40020044
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	4002006c 	.word	0x4002006c
 8003a54:	40020000 	.word	0x40020000

08003a58 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	; 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e169      	b.n	8003d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a84:	2201      	movs	r2, #1
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 8158 	bne.w	8003d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a9a      	ldr	r2, [pc, #616]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d05e      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003aac:	4a98      	ldr	r2, [pc, #608]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d875      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ab2:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d058      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ab8:	4a96      	ldr	r2, [pc, #600]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d86f      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003abe:	4a96      	ldr	r2, [pc, #600]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d052      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ac4:	4a94      	ldr	r2, [pc, #592]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d869      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aca:	4a94      	ldr	r2, [pc, #592]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04c      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ad0:	4a92      	ldr	r2, [pc, #584]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d863      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ad6:	4a92      	ldr	r2, [pc, #584]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d046      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003adc:	4a90      	ldr	r2, [pc, #576]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d85d      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ae2:	2b12      	cmp	r3, #18
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_GPIO_Init+0xcc>
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d859      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_GPIO_Init+0x80>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b6b 	.word	0x08003b6b
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b57 	.word	0x08003b57
 8003afc:	08003b99 	.word	0x08003b99
 8003b00:	08003b9f 	.word	0x08003b9f
 8003b04:	08003b9f 	.word	0x08003b9f
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003b9f 	.word	0x08003b9f
 8003b10:	08003b9f 	.word	0x08003b9f
 8003b14:	08003b9f 	.word	0x08003b9f
 8003b18:	08003b9f 	.word	0x08003b9f
 8003b1c:	08003b9f 	.word	0x08003b9f
 8003b20:	08003b9f 	.word	0x08003b9f
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003b9f 	.word	0x08003b9f
 8003b2c:	08003b9f 	.word	0x08003b9f
 8003b30:	08003b9f 	.word	0x08003b9f
 8003b34:	08003b4d 	.word	0x08003b4d
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	4a79      	ldr	r2, [pc, #484]	; (8003d24 <HAL_GPIO_Init+0x2b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b42:	e02c      	b.n	8003b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	623b      	str	r3, [r7, #32]
          break;
 8003b4a:	e029      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e024      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e01f      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	330c      	adds	r3, #12
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e01a      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b72:	2304      	movs	r3, #4
 8003b74:	623b      	str	r3, [r7, #32]
          break;
 8003b76:	e013      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b80:	2308      	movs	r3, #8
 8003b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	611a      	str	r2, [r3, #16]
          break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	615a      	str	r2, [r3, #20]
          break;
 8003b96:	e003      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          break;
 8003b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	d801      	bhi.n	8003baa <HAL_GPIO_Init+0x13a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_Init+0x13e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2bff      	cmp	r3, #255	; 0xff
 8003bb4:	d802      	bhi.n	8003bbc <HAL_GPIO_Init+0x14c>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x152>
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3b08      	subs	r3, #8
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	210f      	movs	r1, #15
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80b1 	beq.w	8003d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c08:	4a48      	ldr	r2, [pc, #288]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a40      	ldr	r2, [pc, #256]	; (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_GPIO_Init+0x1ec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_GPIO_Init+0x2c4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_GPIO_Init+0x1e8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <HAL_GPIO_Init+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_Init+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_GPIO_Init+0x1e0>
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e004      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	f002 0203 	and.w	r2, r2, #3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4093      	lsls	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c6e:	492f      	ldr	r1, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	492c      	ldr	r1, [pc, #176]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4928      	ldr	r1, [pc, #160]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	491e      	ldr	r1, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	4918      	ldr	r1, [pc, #96]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4914      	ldr	r1, [pc, #80]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
 8003d0c:	e021      	b.n	8003d52 <HAL_GPIO_Init+0x2e2>
 8003d0e:	bf00      	nop
 8003d10:	10320000 	.word	0x10320000
 8003d14:	10310000 	.word	0x10310000
 8003d18:	10220000 	.word	0x10220000
 8003d1c:	10210000 	.word	0x10210000
 8003d20:	10120000 	.word	0x10120000
 8003d24:	10110000 	.word	0x10110000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010800 	.word	0x40010800
 8003d34:	40010c00 	.word	0x40010c00
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4909      	ldr	r1, [pc, #36]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	3301      	adds	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f47f ae8e 	bne.w	8003a84 <HAL_GPIO_Init+0x14>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	372c      	adds	r7, #44	; 0x2c
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
 8003db2:	4613      	mov	r3, r2
 8003db4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db6:	787b      	ldrb	r3, [r7, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dc2:	e003      	b.n	8003dcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	041a      	lsls	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	611a      	str	r2, [r3, #16]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e12b      	b.n	8004042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff f9c0 	bl	8003184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f003 f862 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8003e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a81      	ldr	r2, [pc, #516]	; (800404c <HAL_I2C_Init+0x274>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d807      	bhi.n	8003e5c <HAL_I2C_Init+0x84>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_I2C_Init+0x278>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e006      	b.n	8003e6a <HAL_I2C_Init+0x92>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a7d      	ldr	r2, [pc, #500]	; (8004054 <HAL_I2C_Init+0x27c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0e7      	b.n	8004042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a78      	ldr	r2, [pc, #480]	; (8004058 <HAL_I2C_Init+0x280>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a6a      	ldr	r2, [pc, #424]	; (800404c <HAL_I2C_Init+0x274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <HAL_I2C_Init+0xd4>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e009      	b.n	8003ec0 <HAL_I2C_Init+0xe8>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_I2C_Init+0x284>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	495c      	ldr	r1, [pc, #368]	; (800404c <HAL_I2C_Init+0x274>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d819      	bhi.n	8003f14 <HAL_I2C_Init+0x13c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1e59      	subs	r1, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_I2C_Init+0x138>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e59      	subs	r1, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0e:	e051      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f10:	2304      	movs	r3, #4
 8003f12:	e04f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <HAL_I2C_Init+0x168>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1e58      	subs	r0, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e012      	b.n	8003f66 <HAL_I2C_Init+0x18e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e58      	subs	r0, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	0099      	lsls	r1, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x196>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10e      	bne.n	8003f94 <HAL_I2C_Init+0x1bc>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1e58      	subs	r0, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	440b      	add	r3, r1
 8003f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	e00f      	b.n	8003fb4 <HAL_I2C_Init+0x1dc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	6809      	ldr	r1, [r1, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6911      	ldr	r1, [r2, #16]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	000186a0 	.word	0x000186a0
 8004050:	001e847f 	.word	0x001e847f
 8004054:	003d08ff 	.word	0x003d08ff
 8004058:	431bde83 	.word	0x431bde83
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407a:	f7ff fb01 	bl	8003680 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	f040 80d9 	bne.w	8004240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2319      	movs	r3, #25
 8004094:	2201      	movs	r2, #1
 8004096:	496d      	ldr	r1, [pc, #436]	; (800424c <HAL_I2C_Mem_Write+0x1ec>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f002 f937 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0cc      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x56>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0c5      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d007      	beq.n	80040dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2221      	movs	r2, #33	; 0x21
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a4d      	ldr	r2, [pc, #308]	; (8004250 <HAL_I2C_Mem_Write+0x1f0>)
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800411e:	88f8      	ldrh	r0, [r7, #6]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f001 fec6 	bl	8005ec0 <I2C_RequestMemoryWrite>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d052      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e081      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f002 f9b8 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b04      	cmp	r3, #4
 8004154:	d107      	bne.n	8004166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06b      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11b      	bne.n	80041e0 <HAL_I2C_Mem_Write+0x180>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1aa      	bne.n	800413e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f002 f9a4 	bl	800653a <I2C_WaitOnBTFFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e016      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000

08004254 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	; 0x30
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004272:	f7ff fa05 	bl	8003680 <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 8244 	bne.w	800470e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2319      	movs	r3, #25
 800428c:	2201      	movs	r2, #1
 800428e:	4982      	ldr	r1, [pc, #520]	; (8004498 <HAL_I2C_Mem_Read+0x244>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f002 f83b 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	e237      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Mem_Read+0x5a>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e230      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d007      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2222      	movs	r2, #34	; 0x22
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a62      	ldr	r2, [pc, #392]	; (800449c <HAL_I2C_Mem_Read+0x248>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004316:	88f8      	ldrh	r0, [r7, #6]
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4603      	mov	r3, r0
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f001 fe60 	bl	8005fec <I2C_RequestMemoryRead>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1ec      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d113      	bne.n	8004366 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e1c0      	b.n	80046e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11e      	bne.n	80043ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800437e:	b672      	cpsid	i
}
 8004380:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043a8:	b662      	cpsie	i
}
 80043aa:	e035      	b.n	8004418 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d11e      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043c4:	b672      	cpsid	i
}
 80043c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043ee:	b662      	cpsie	i
}
 80043f0:	e012      	b.n	8004418 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004400:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004418:	e166      	b.n	80046e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b03      	cmp	r3, #3
 8004420:	f200 811f 	bhi.w	8004662 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b01      	cmp	r3, #1
 800442a:	d123      	bne.n	8004474 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f002 f8f5 	bl	8006620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e167      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004472:	e139      	b.n	80046e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b02      	cmp	r3, #2
 800447a:	d152      	bne.n	8004522 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2200      	movs	r2, #0
 8004484:	4906      	ldr	r1, [pc, #24]	; (80044a0 <HAL_I2C_Mem_Read+0x24c>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f001 ff40 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e13c      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
 8004496:	bf00      	nop
 8004498:	00100002 	.word	0x00100002
 800449c:	ffff0000 	.word	0xffff0000
 80044a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044a4:	b672      	cpsid	i
}
 80044a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044ea:	b662      	cpsie	i
}
 80044ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004520:	e0e2      	b.n	80046e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	2200      	movs	r2, #0
 800452a:	497b      	ldr	r1, [pc, #492]	; (8004718 <HAL_I2C_Mem_Read+0x4c4>)
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f001 feed 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0e9      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800454c:	b672      	cpsid	i
}
 800454e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004582:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_I2C_Mem_Read+0x4c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	4a65      	ldr	r2, [pc, #404]	; (8004720 <HAL_I2C_Mem_Read+0x4cc>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0a1a      	lsrs	r2, r3, #8
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00da      	lsls	r2, r3, #3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	3b01      	subs	r3, #1
 80045a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d118      	bne.n	80045da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045ca:	b662      	cpsie	i
}
 80045cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e09a      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d1d9      	bne.n	800459c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800462a:	b662      	cpsie	i
}
 800462c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004660:	e042      	b.n	80046e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f001 ffda 	bl	8006620 <I2C_WaitOnRXNEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e04c      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d118      	bne.n	80046e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f47f ae94 	bne.w	800441a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	00010004 	.word	0x00010004
 800471c:	2000000c 	.word	0x2000000c
 8004720:	14f8b589 	.word	0x14f8b589

08004724 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004744:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b10      	cmp	r3, #16
 8004752:	d003      	beq.n	800475c <HAL_I2C_EV_IRQHandler+0x38>
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	f040 80c1 	bne.w	80048de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_I2C_EV_IRQHandler+0x6e>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800477c:	d003      	beq.n	8004786 <HAL_I2C_EV_IRQHandler+0x62>
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004784:	d101      	bne.n	800478a <HAL_I2C_EV_IRQHandler+0x66>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_I2C_EV_IRQHandler+0x68>
 800478a:	2300      	movs	r3, #0
 800478c:	2b01      	cmp	r3, #1
 800478e:	f000 8132 	beq.w	80049f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x92>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	0a5b      	lsrs	r3, r3, #9
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 ffbd 	bl	8006728 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fd65 	bl	800527e <I2C_Master_SB>
 80047b4:	e092      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fdda 	bl	8005388 <I2C_Master_ADD10>
 80047d4:	e082      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0a5b      	lsrs	r3, r3, #9
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fdf3 	bl	80053da <I2C_Master_ADDR>
 80047f4:	e072      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d03b      	beq.n	800487a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004810:	f000 80f3 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	09db      	lsrs	r3, r3, #7
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00f      	beq.n	8004840 <HAL_I2C_EV_IRQHandler+0x11c>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	0a9b      	lsrs	r3, r3, #10
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_I2C_EV_IRQHandler+0x11c>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d103      	bne.n	8004840 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f9df 	bl	8004bfc <I2C_MasterTransmit_TXE>
 800483e:	e04d      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80d6 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	0a5b      	lsrs	r3, r3, #9
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80cf 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b21      	cmp	r3, #33	; 0x21
 8004860:	d103      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa66 	bl	8004d34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004868:	e0c7      	b.n	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	f040 80c4 	bne.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fad4 	bl	8004e20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004878:	e0bf      	b.n	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	f000 80b7 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00f      	beq.n	80048b8 <HAL_I2C_EV_IRQHandler+0x194>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	0a9b      	lsrs	r3, r3, #10
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <HAL_I2C_EV_IRQHandler+0x194>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fb49 	bl	8004f48 <I2C_MasterReceive_RXNE>
 80048b6:	e011      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 809a 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	0a5b      	lsrs	r3, r3, #9
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8093 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbe8 	bl	80050aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	e08e      	b.n	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80048dc:	e08d      	b.n	80049fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e007      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_I2C_EV_IRQHandler+0x20e>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	0a5b      	lsrs	r3, r3, #9
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00c      	beq.n	8004932 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 ffac 	bl	8005888 <I2C_Slave_ADDR>
 8004930:	e066      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x22e>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	0a5b      	lsrs	r3, r3, #9
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 ffe6 	bl	800591c <I2C_Slave_STOPF>
 8004950:	e056      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004952:	7bbb      	ldrb	r3, [r7, #14]
 8004954:	2b21      	cmp	r3, #33	; 0x21
 8004956:	d002      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0x23a>
 8004958:	7bbb      	ldrb	r3, [r7, #14]
 800495a:	2b29      	cmp	r3, #41	; 0x29
 800495c:	d125      	bne.n	80049aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	09db      	lsrs	r3, r3, #7
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00f      	beq.n	800498a <HAL_I2C_EV_IRQHandler+0x266>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	0a9b      	lsrs	r3, r3, #10
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_I2C_EV_IRQHandler+0x266>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fec4 	bl	8005710 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004988:	e039      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d033      	beq.n	80049fe <HAL_I2C_EV_IRQHandler+0x2da>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	0a5b      	lsrs	r3, r3, #9
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d02d      	beq.n	80049fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fef1 	bl	800578a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a8:	e029      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00f      	beq.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	0a9b      	lsrs	r3, r3, #10
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fefb 	bl	80057ca <I2C_SlaveReceive_RXNE>
 80049d4:	e014      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	0a5b      	lsrs	r3, r3, #9
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 ff29 	bl	8005846 <I2C_SlaveReceive_BTF>
 80049f4:	e004      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b08a      	sub	sp, #40	; 0x28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a28:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x5e>
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a52:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a62:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	0a5b      	lsrs	r3, r3, #9
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x88>
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	0a9b      	lsrs	r3, r3, #10
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d03f      	beq.n	8004b1a <HAL_I2C_ER_IRQHandler+0x114>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d039      	beq.n	8004b1a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004aa6:	7efb      	ldrb	r3, [r7, #27]
 8004aa8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ac0:	7ebb      	ldrb	r3, [r7, #26]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d112      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xe6>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xe6>
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d008      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b29      	cmp	r3, #41	; 0x29
 8004ad6:	d005      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xde>
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	2b28      	cmp	r3, #40	; 0x28
 8004adc:	d106      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b21      	cmp	r3, #33	; 0x21
 8004ae2:	d103      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 f849 	bl	8005b7c <I2C_Slave_AF>
 8004aea:	e016      	b.n	8004b1a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004afe:	7efb      	ldrb	r3, [r7, #27]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d002      	beq.n	8004b0a <HAL_I2C_ER_IRQHandler+0x104>
 8004b04:	7efb      	ldrb	r3, [r7, #27]
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d107      	bne.n	8004b1a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	0adb      	lsrs	r3, r3, #11
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <HAL_I2C_ER_IRQHandler+0x13e>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	f043 0308 	orr.w	r3, r3, #8
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f880 	bl	8005c5c <I2C_ITError>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d150      	bne.n	8004cc4 <I2C_MasterTransmit_TXE+0xc8>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b21      	cmp	r3, #33	; 0x21
 8004c26:	d14d      	bne.n	8004cc4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d01d      	beq.n	8004c6a <I2C_MasterTransmit_TXE+0x6e>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d01a      	beq.n	8004c6a <I2C_MasterTransmit_TXE+0x6e>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3a:	d016      	beq.n	8004c6a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c4a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2211      	movs	r2, #17
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff7e 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c68:	e060      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c78:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d107      	bne.n	8004cb4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff93 	bl	8004bd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cb2:	e03b      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff51 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc2:	e033      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b21      	cmp	r3, #33	; 0x21
 8004cc8:	d005      	beq.n	8004cd6 <I2C_MasterTransmit_TXE+0xda>
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d12d      	bne.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b22      	cmp	r3, #34	; 0x22
 8004cd4:	d12a      	bne.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cf0:	e01c      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d103      	bne.n	8004d06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f88e 	bl	8004e20 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d04:	e012      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	781a      	ldrb	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d2a:	e7ff      	b.n	8004d2c <I2C_MasterTransmit_TXE+0x130>
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b21      	cmp	r3, #33	; 0x21
 8004d4c:	d164      	bne.n	8004e18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d7c:	e04c      	b.n	8004e18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d01d      	beq.n	8004dc0 <I2C_MasterTransmit_BTF+0x8c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d01a      	beq.n	8004dc0 <I2C_MasterTransmit_BTF+0x8c>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d90:	d016      	beq.n	8004dc0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2211      	movs	r2, #17
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff fed3 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
}
 8004dbe:	e02b      	b.n	8004e18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d107      	bne.n	8004e0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff fee8 	bl	8004bd8 <HAL_I2C_MemTxCpltCallback>
}
 8004e08:	e006      	b.n	8004e18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fea6 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11d      	bne.n	8004e74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10b      	bne.n	8004e58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e56:	e073      	b.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	121b      	asrs	r3, r3, #8
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e72:	e065      	b.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d10b      	bne.n	8004e94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e92:	e055      	b.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d151      	bne.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b22      	cmp	r3, #34	; 0x22
 8004ea0:	d10d      	bne.n	8004ebe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ebc:	e040      	b.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b21      	cmp	r3, #33	; 0x21
 8004ecc:	d112      	bne.n	8004ef4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ef2:	e025      	b.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d120      	bne.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b21      	cmp	r3, #33	; 0x21
 8004f02:	d11d      	bne.n	8004f40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f12:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fe4c 	bl	8004bd8 <HAL_I2C_MemTxCpltCallback>
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	f040 80a2 	bne.w	80050a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d921      	bls.n	8004fb0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	f040 8082 	bne.w	80050a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004fae:	e078      	b.n	80050a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d074      	beq.n	80050a2 <I2C_MasterReceive_RXNE+0x15a>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d002      	beq.n	8004fc4 <I2C_MasterReceive_RXNE+0x7c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d16e      	bne.n	80050a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 faf9 	bl	80065bc <I2C_WaitOnSTOPRequestThroughIT>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d142      	bne.n	8005056 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fde:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10a      	bne.n	8005040 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fc fa0d 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 800503e:	e030      	b.n	80050a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2212      	movs	r2, #18
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fd91 	bl	8004b76 <HAL_I2C_MasterRxCpltCallback>
}
 8005054:	e025      	b.n	80050a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005064:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fc fae3 	bl	8001668 <HAL_I2C_ErrorCallback>
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d11b      	bne.n	80050fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050f8:	e0bd      	b.n	8005276 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b03      	cmp	r3, #3
 8005102:	d129      	bne.n	8005158 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005112:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b04      	cmp	r3, #4
 8005118:	d00a      	beq.n	8005130 <I2C_MasterReceive_BTF+0x86>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d007      	beq.n	8005130 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005156:	e08e      	b.n	8005276 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d176      	bne.n	8005250 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <I2C_MasterReceive_BTF+0xc4>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b10      	cmp	r3, #16
 800516c:	d108      	bne.n	8005180 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e019      	b.n	80051b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d002      	beq.n	800518c <I2C_MasterReceive_BTF+0xe2>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d108      	bne.n	800519e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e00a      	b.n	80051b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d007      	beq.n	80051b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800520e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d10a      	bne.n	800523a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc f910 	bl	8001458 <HAL_I2C_MemRxCpltCallback>
}
 8005238:	e01d      	b.n	8005276 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2212      	movs	r2, #18
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fc94 	bl	8004b76 <HAL_I2C_MasterRxCpltCallback>
}
 800524e:	e012      	b.n	8005276 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d117      	bne.n	80052c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052ac:	e067      	b.n	800537e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]
}
 80052c0:	e05d      	b.n	800537e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ca:	d133      	bne.n	8005334 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b21      	cmp	r3, #33	; 0x21
 80052d6:	d109      	bne.n	80052ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e008      	b.n	80052fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <I2C_Master_SB+0x92>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d032      	beq.n	800537e <I2C_Master_SB+0x100>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02d      	beq.n	800537e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005330:	605a      	str	r2, [r3, #4]
}
 8005332:	e024      	b.n	800537e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10e      	bne.n	800535a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	b29b      	uxth	r3, r3
 8005342:	11db      	asrs	r3, r3, #7
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f063 030f 	orn	r3, r3, #15
 8005350:	b2da      	uxtb	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]
}
 8005358:	e011      	b.n	800537e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10d      	bne.n	800537e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	b29b      	uxth	r3, r3
 8005368:	11db      	asrs	r3, r3, #7
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 0306 	and.w	r3, r3, #6
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f063 030e 	orn	r3, r3, #14
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	611a      	str	r2, [r3, #16]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	b2da      	uxtb	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <I2C_Master_ADD10+0x26>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <I2C_Master_ADD10+0x48>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053da:	b480      	push	{r7}
 80053dc:	b091      	sub	sp, #68	; 0x44
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b22      	cmp	r3, #34	; 0x22
 8005402:	f040 8174 	bne.w	80056ee <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <I2C_Master_ADDR+0x54>
 800540e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d10b      	bne.n	800542e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005416:	2300      	movs	r3, #0
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	633b      	str	r3, [r7, #48]	; 0x30
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	633b      	str	r3, [r7, #48]	; 0x30
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	e16b      	b.n	8005706 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11d      	bne.n	8005472 <I2C_Master_ADDR+0x98>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800543e:	d118      	bne.n	8005472 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005440:	2300      	movs	r3, #0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005464:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	651a      	str	r2, [r3, #80]	; 0x50
 8005470:	e149      	b.n	8005706 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d113      	bne.n	80054a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547c:	2300      	movs	r3, #0
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e120      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	f040 808a 	bne.w	80055c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054b6:	d137      	bne.n	8005528 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d113      	bne.n	8005500 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e8:	2300      	movs	r3, #0
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	e0f2      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005500:	2300      	movs	r3, #0
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e0de      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b08      	cmp	r3, #8
 800552c:	d02e      	beq.n	800558c <I2C_Master_ADDR+0x1b2>
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b20      	cmp	r3, #32
 8005532:	d02b      	beq.n	800558c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	2b12      	cmp	r3, #18
 8005538:	d102      	bne.n	8005540 <I2C_Master_ADDR+0x166>
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b01      	cmp	r3, #1
 800553e:	d125      	bne.n	800558c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00e      	beq.n	8005564 <I2C_Master_ADDR+0x18a>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	2b02      	cmp	r3, #2
 800554a:	d00b      	beq.n	8005564 <I2C_Master_ADDR+0x18a>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b10      	cmp	r3, #16
 8005550:	d008      	beq.n	8005564 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e007      	b.n	8005574 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005572:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	e0ac      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e090      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d158      	bne.n	8005680 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d021      	beq.n	8005618 <I2C_Master_ADDR+0x23e>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d01e      	beq.n	8005618 <I2C_Master_ADDR+0x23e>
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d01b      	beq.n	8005618 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e012      	b.n	800563e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005626:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d14b      	bne.n	80056e6 <I2C_Master_ADDR+0x30c>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005654:	d00b      	beq.n	800566e <I2C_Master_ADDR+0x294>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b01      	cmp	r3, #1
 800565a:	d008      	beq.n	800566e <I2C_Master_ADDR+0x294>
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b08      	cmp	r3, #8
 8005660:	d005      	beq.n	800566e <I2C_Master_ADDR+0x294>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b10      	cmp	r3, #16
 8005666:	d002      	beq.n	800566e <I2C_Master_ADDR+0x294>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b20      	cmp	r3, #32
 800566c:	d13b      	bne.n	80056e6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e032      	b.n	80056e6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800568e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569e:	d117      	bne.n	80056d0 <I2C_Master_ADDR+0x2f6>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056a6:	d00b      	beq.n	80056c0 <I2C_Master_ADDR+0x2e6>
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d008      	beq.n	80056c0 <I2C_Master_ADDR+0x2e6>
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d005      	beq.n	80056c0 <I2C_Master_ADDR+0x2e6>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d002      	beq.n	80056c0 <I2C_Master_ADDR+0x2e6>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d107      	bne.n	80056d0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056ec:	e00b      	b.n	8005706 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]
}
 8005704:	e7ff      	b.n	8005706 <I2C_Master_ADDR+0x32c>
 8005706:	bf00      	nop
 8005708:	3744      	adds	r7, #68	; 0x44
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02b      	beq.n	8005782 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d114      	bne.n	8005782 <I2C_SlaveTransmit_TXE+0x72>
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b29      	cmp	r3, #41	; 0x29
 800575c:	d111      	bne.n	8005782 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2228      	movs	r2, #40	; 0x28
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fa03 	bl	8004b88 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d011      	beq.n	80057c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d02c      	beq.n	800583e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d114      	bne.n	800583e <I2C_SlaveReceive_RXNE+0x74>
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b2a      	cmp	r3, #42	; 0x2a
 8005818:	d111      	bne.n	800583e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005828:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2222      	movs	r2, #34	; 0x22
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2228      	movs	r2, #40	; 0x28
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff f9ae 	bl	8004b9a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058a2:	2b28      	cmp	r3, #40	; 0x28
 80058a4:	d127      	bne.n	80058f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	81bb      	strh	r3, [r7, #12]
 80058d8:	e002      	b.n	80058e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058e8:	89ba      	ldrh	r2, [r7, #12]
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f95c 	bl	8004bac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058f4:	e00e      	b.n	8005914 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800593a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800593c:	2300      	movs	r3, #0
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005978:	d172      	bne.n	8005a60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b22      	cmp	r3, #34	; 0x22
 800597e:	d002      	beq.n	8005986 <I2C_Slave_STOPF+0x6a>
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b2a      	cmp	r3, #42	; 0x2a
 8005984:	d135      	bne.n	80059f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe f84a 	bl	8003a58 <HAL_DMA_GetState>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d049      	beq.n	8005a5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	4a69      	ldr	r2, [pc, #420]	; (8005b74 <I2C_Slave_STOPF+0x258>)
 80059d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd ffc8 	bl	800396c <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d03d      	beq.n	8005a5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059f0:	e035      	b.n	8005a5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe f814 	bl	8003a58 <HAL_DMA_GetState>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d014      	beq.n	8005a60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	4a4e      	ldr	r2, [pc, #312]	; (8005b74 <I2C_Slave_STOPF+0x258>)
 8005a3c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd ff92 	bl	800396c <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
 8005a5c:	e000      	b.n	8005a60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03e      	beq.n	8005ae8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d112      	bne.n	8005a9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d112      	bne.n	8005ad2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f043 0204 	orr.w	r2, r3, #4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f8b3 	bl	8005c5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005af6:	e039      	b.n	8005b6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d109      	bne.n	8005b12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2228      	movs	r2, #40	; 0x28
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff f844 	bl	8004b9a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b28      	cmp	r3, #40	; 0x28
 8005b1c:	d111      	bne.n	8005b42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <I2C_Slave_STOPF+0x25c>)
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff f843 	bl	8004bc6 <HAL_I2C_ListenCpltCallback>
}
 8005b40:	e014      	b.n	8005b6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	2b22      	cmp	r3, #34	; 0x22
 8005b48:	d002      	beq.n	8005b50 <I2C_Slave_STOPF+0x234>
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b22      	cmp	r3, #34	; 0x22
 8005b4e:	d10d      	bne.n	8005b6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff f817 	bl	8004b9a <HAL_I2C_SlaveRxCpltCallback>
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	080061bd 	.word	0x080061bd
 8005b78:	ffff0000 	.word	0xffff0000

08005b7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d002      	beq.n	8005b9e <I2C_Slave_AF+0x22>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d129      	bne.n	8005bf2 <I2C_Slave_AF+0x76>
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b28      	cmp	r3, #40	; 0x28
 8005ba2:	d126      	bne.n	8005bf2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <I2C_Slave_AF+0xdc>)
 8005ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fe ffeb 	bl	8004bc6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bf0:	e02e      	b.n	8005c50 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b21      	cmp	r3, #33	; 0x21
 8005bf6:	d126      	bne.n	8005c46 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <I2C_Slave_AF+0xdc>)
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2221      	movs	r2, #33	; 0x21
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fe ffa2 	bl	8004b88 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c44:	e004      	b.n	8005c50 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c4e:	615a      	str	r2, [r3, #20]
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	ffff0000 	.word	0xffff0000

08005c5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d002      	beq.n	8005c80 <I2C_ITError+0x24>
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d10a      	bne.n	8005c96 <I2C_ITError+0x3a>
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b22      	cmp	r3, #34	; 0x22
 8005c84:	d107      	bne.n	8005c96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c9c:	2b28      	cmp	r3, #40	; 0x28
 8005c9e:	d107      	bne.n	8005cb0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2228      	movs	r2, #40	; 0x28
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cae:	e015      	b.n	8005cdc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbe:	d00a      	beq.n	8005cd6 <I2C_ITError+0x7a>
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b60      	cmp	r3, #96	; 0x60
 8005cc4:	d007      	beq.n	8005cd6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cea:	d161      	bne.n	8005db0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d020      	beq.n	8005d4a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	4a6a      	ldr	r2, [pc, #424]	; (8005eb8 <I2C_ITError+0x25c>)
 8005d0e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fd fe29 	bl	800396c <HAL_DMA_Abort_IT>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8089 	beq.w	8005e34 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
 8005d48:	e074      	b.n	8005e34 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	4a5a      	ldr	r2, [pc, #360]	; (8005eb8 <I2C_ITError+0x25c>)
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd fe08 	bl	800396c <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d068      	beq.n	8005e34 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d10b      	bne.n	8005d88 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005daa:	4610      	mov	r0, r2
 8005dac:	4798      	blx	r3
 8005dae:	e041      	b.n	8005e34 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b60      	cmp	r3, #96	; 0x60
 8005dba:	d125      	bne.n	8005e08 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d10b      	bne.n	8005df0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fe fef2 	bl	8004bea <HAL_I2C_AbortCpltCallback>
 8005e06:	e015      	b.n	8005e34 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d10b      	bne.n	8005e2e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb fc1a 	bl	8001668 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10e      	bne.n	8005e62 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d113      	bne.n	8005eae <I2C_ITError+0x252>
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b28      	cmp	r3, #40	; 0x28
 8005e8a:	d110      	bne.n	8005eae <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <I2C_ITError+0x260>)
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe fe8c 	bl	8004bc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	080061bd 	.word	0x080061bd
 8005ebc:	ffff0000 	.word	0xffff0000

08005ec0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	817b      	strh	r3, [r7, #10]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	813b      	strh	r3, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fa08 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f10:	d103      	bne.n	8005f1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e05f      	b.n	8005fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f1e:	897b      	ldrh	r3, [r7, #10]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	492d      	ldr	r1, [pc, #180]	; (8005fe8 <I2C_RequestMemoryWrite+0x128>)
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa40 	bl	80063ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e04c      	b.n	8005fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5c:	6a39      	ldr	r1, [r7, #32]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 faaa 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00d      	beq.n	8005f86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d107      	bne.n	8005f82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e02b      	b.n	8005fde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d105      	bne.n	8005f98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f8c:	893b      	ldrh	r3, [r7, #8]
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	611a      	str	r2, [r3, #16]
 8005f96:	e021      	b.n	8005fdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	0a1b      	lsrs	r3, r3, #8
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa8:	6a39      	ldr	r1, [r7, #32]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fa84 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e005      	b.n	8005fde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd2:	893b      	ldrh	r3, [r7, #8]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	00010002 	.word	0x00010002

08005fec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	817b      	strh	r3, [r7, #10]
 8005ffe:	460b      	mov	r3, r1
 8006000:	813b      	strh	r3, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2200      	movs	r2, #0
 800602e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f96a 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	d103      	bne.n	8006056 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0aa      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800605a:	897b      	ldrh	r3, [r7, #10]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006068:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	4952      	ldr	r1, [pc, #328]	; (80061b8 <I2C_RequestMemoryRead+0x1cc>)
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f9a2 	bl	80063ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e097      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fa0c 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d107      	bne.n	80060be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e076      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d105      	bne.n	80060d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060c8:	893b      	ldrh	r3, [r7, #8]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	611a      	str	r2, [r3, #16]
 80060d2:	e021      	b.n	8006118 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	b29b      	uxth	r3, r3
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	6a39      	ldr	r1, [r7, #32]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f9e6 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00d      	beq.n	800610e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d107      	bne.n	800610a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e050      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611a:	6a39      	ldr	r1, [r7, #32]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f9cb 	bl	80064b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00d      	beq.n	8006144 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2b04      	cmp	r3, #4
 800612e:	d107      	bne.n	8006140 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e035      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006152:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	2200      	movs	r2, #0
 800615c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f8d3 	bl	800630c <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	d103      	bne.n	8006184 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e013      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006188:	897b      	ldrh	r3, [r7, #10]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	4906      	ldr	r1, [pc, #24]	; (80061b8 <I2C_RequestMemoryRead+0x1cc>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f90b 	bl	80063ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	00010002 	.word	0x00010002

080061bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061d6:	4b4b      	ldr	r3, [pc, #300]	; (8006304 <I2C_DMAAbort+0x148>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <I2C_DMAAbort+0x14c>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	0a1a      	lsrs	r2, r3, #8
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00da      	lsls	r2, r3, #3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006202:	e00a      	b.n	800621a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d0ea      	beq.n	80061f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	2200      	movs	r2, #0
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	2200      	movs	r2, #0
 8006238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006248:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	2200      	movs	r2, #0
 800625e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b60      	cmp	r3, #96	; 0x60
 800628a:	d10e      	bne.n	80062aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2200      	movs	r2, #0
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f7fe fca1 	bl	8004bea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062a8:	e027      	b.n	80062fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062b0:	2b28      	cmp	r3, #40	; 0x28
 80062b2:	d117      	bne.n	80062e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2228      	movs	r2, #40	; 0x28
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062e2:	e007      	b.n	80062f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062f4:	6978      	ldr	r0, [r7, #20]
 80062f6:	f7fb f9b7 	bl	8001668 <HAL_I2C_ErrorCallback>
}
 80062fa:	bf00      	nop
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2000000c 	.word	0x2000000c
 8006308:	14f8b589 	.word	0x14f8b589

0800630c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800631c:	e025      	b.n	800636a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d021      	beq.n	800636a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fd f9ab 	bl	8003680 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e023      	b.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10d      	bne.n	8006390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	e00c      	b.n	80063aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	43da      	mvns	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf0c      	ite	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	2300      	movne	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d0b6      	beq.n	800631e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c8:	e051      	b.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d123      	bne.n	8006422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e046      	b.n	80064b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d021      	beq.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7fd f929 	bl	8003680 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d116      	bne.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e020      	b.n	80064b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10c      	bne.n	8006492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	43da      	mvns	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	e00b      	b.n	80064aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	43da      	mvns	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d18d      	bne.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c4:	e02d      	b.n	8006522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f900 	bl	80066cc <I2C_IsAcknowledgeFailed>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e02d      	b.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d021      	beq.n	8006522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fd f8cf 	bl	8003680 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d116      	bne.n	8006522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e007      	b.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d1ca      	bne.n	80064c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006546:	e02d      	b.n	80065a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f8bf 	bl	80066cc <I2C_IsAcknowledgeFailed>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e02d      	b.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d021      	beq.n	80065a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006560:	f7fd f88e 	bl	8003680 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f043 0220 	orr.w	r2, r3, #32
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e007      	b.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d1ca      	bne.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	08db      	lsrs	r3, r3, #3
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	0a1a      	lsrs	r2, r3, #8
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f043 0220 	orr.w	r2, r3, #32
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e008      	b.n	800660c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006608:	d0e9      	beq.n	80065de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	2000000c 	.word	0x2000000c
 800661c:	14f8b589 	.word	0x14f8b589

08006620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800662c:	e042      	b.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b10      	cmp	r3, #16
 800663a:	d119      	bne.n	8006670 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0210 	mvn.w	r2, #16
 8006644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e029      	b.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fd f806 	bl	8003680 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d116      	bne.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e007      	b.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d1b5      	bne.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e2:	d11b      	bne.n	800671c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f043 0204 	orr.w	r2, r3, #4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006738:	d103      	bne.n	8006742 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006740:	e007      	b.n	8006752 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800674a:	d102      	bne.n	8006752 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2208      	movs	r2, #8
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e272      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8087 	beq.w	800688a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800677c:	4b92      	ldr	r3, [pc, #584]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b04      	cmp	r3, #4
 8006786:	d00c      	beq.n	80067a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006788:	4b8f      	ldr	r3, [pc, #572]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	2b08      	cmp	r3, #8
 8006792:	d112      	bne.n	80067ba <HAL_RCC_OscConfig+0x5e>
 8006794:	4b8c      	ldr	r3, [pc, #560]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d10b      	bne.n	80067ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a2:	4b89      	ldr	r3, [pc, #548]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d06c      	beq.n	8006888 <HAL_RCC_OscConfig+0x12c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d168      	bne.n	8006888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e24c      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c2:	d106      	bne.n	80067d2 <HAL_RCC_OscConfig+0x76>
 80067c4:	4b80      	ldr	r3, [pc, #512]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a7f      	ldr	r2, [pc, #508]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e02e      	b.n	8006830 <HAL_RCC_OscConfig+0xd4>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x98>
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a7a      	ldr	r2, [pc, #488]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b78      	ldr	r3, [pc, #480]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a77      	ldr	r2, [pc, #476]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e01d      	b.n	8006830 <HAL_RCC_OscConfig+0xd4>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067fc:	d10c      	bne.n	8006818 <HAL_RCC_OscConfig+0xbc>
 80067fe:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	4b6f      	ldr	r3, [pc, #444]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a6e      	ldr	r2, [pc, #440]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	e00b      	b.n	8006830 <HAL_RCC_OscConfig+0xd4>
 8006818:	4b6b      	ldr	r3, [pc, #428]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a6a      	ldr	r2, [pc, #424]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800681e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	4b68      	ldr	r3, [pc, #416]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a67      	ldr	r2, [pc, #412]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800682a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d013      	beq.n	8006860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fc ff22 	bl	8003680 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006840:	f7fc ff1e 	bl	8003680 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e200      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006852:	4b5d      	ldr	r3, [pc, #372]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0f0      	beq.n	8006840 <HAL_RCC_OscConfig+0xe4>
 800685e:	e014      	b.n	800688a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006860:	f7fc ff0e 	bl	8003680 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006868:	f7fc ff0a 	bl	8003680 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e1ec      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687a:	4b53      	ldr	r3, [pc, #332]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x10c>
 8006886:	e000      	b.n	800688a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d063      	beq.n	800695e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006896:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068a2:	4b49      	ldr	r3, [pc, #292]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d11c      	bne.n	80068e8 <HAL_RCC_OscConfig+0x18c>
 80068ae:	4b46      	ldr	r3, [pc, #280]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d116      	bne.n	80068e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ba:	4b43      	ldr	r3, [pc, #268]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_RCC_OscConfig+0x176>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d001      	beq.n	80068d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e1c0      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d2:	4b3d      	ldr	r3, [pc, #244]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4939      	ldr	r1, [pc, #228]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	e03a      	b.n	800695e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d020      	beq.n	8006932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCC_OscConfig+0x270>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f6:	f7fc fec3 	bl	8003680 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068fe:	f7fc febf 	bl	8003680 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e1a1      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006910:	4b2d      	ldr	r3, [pc, #180]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	4927      	ldr	r1, [pc, #156]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 800692c:	4313      	orrs	r3, r2
 800692e:	600b      	str	r3, [r1, #0]
 8006930:	e015      	b.n	800695e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <HAL_RCC_OscConfig+0x270>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006938:	f7fc fea2 	bl	8003680 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fc fe9e 	bl	8003680 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e180      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f0      	bne.n	8006940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d03a      	beq.n	80069e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d019      	beq.n	80069a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006972:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <HAL_RCC_OscConfig+0x274>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006978:	f7fc fe82 	bl	8003680 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006980:	f7fc fe7e 	bl	8003680 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e160      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <HAL_RCC_OscConfig+0x26c>)
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800699e:	2001      	movs	r0, #1
 80069a0:	f000 fad8 	bl	8006f54 <RCC_Delay>
 80069a4:	e01c      	b.n	80069e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <HAL_RCC_OscConfig+0x274>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ac:	f7fc fe68 	bl	8003680 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b2:	e00f      	b.n	80069d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069b4:	f7fc fe64 	bl	8003680 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d908      	bls.n	80069d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e146      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
 80069c6:	bf00      	nop
 80069c8:	40021000 	.word	0x40021000
 80069cc:	42420000 	.word	0x42420000
 80069d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d4:	4b92      	ldr	r3, [pc, #584]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e9      	bne.n	80069b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80a6 	beq.w	8006b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f2:	4b8b      	ldr	r3, [pc, #556]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fe:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4a87      	ldr	r2, [pc, #540]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a08:	61d3      	str	r3, [r2, #28]
 8006a0a:	4b85      	ldr	r3, [pc, #532]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1a:	4b82      	ldr	r3, [pc, #520]	; (8006c24 <HAL_RCC_OscConfig+0x4c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d118      	bne.n	8006a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a26:	4b7f      	ldr	r3, [pc, #508]	; (8006c24 <HAL_RCC_OscConfig+0x4c8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a7e      	ldr	r2, [pc, #504]	; (8006c24 <HAL_RCC_OscConfig+0x4c8>)
 8006a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a32:	f7fc fe25 	bl	8003680 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a3a:	f7fc fe21 	bl	8003680 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b64      	cmp	r3, #100	; 0x64
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e103      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	4b75      	ldr	r3, [pc, #468]	; (8006c24 <HAL_RCC_OscConfig+0x4c8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCC_OscConfig+0x312>
 8006a60:	4b6f      	ldr	r3, [pc, #444]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	4a6e      	ldr	r2, [pc, #440]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6213      	str	r3, [r2, #32]
 8006a6c:	e02d      	b.n	8006aca <HAL_RCC_OscConfig+0x36e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCC_OscConfig+0x334>
 8006a76:	4b6a      	ldr	r3, [pc, #424]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a69      	ldr	r2, [pc, #420]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	6213      	str	r3, [r2, #32]
 8006a82:	4b67      	ldr	r3, [pc, #412]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	4a66      	ldr	r2, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a88:	f023 0304 	bic.w	r3, r3, #4
 8006a8c:	6213      	str	r3, [r2, #32]
 8006a8e:	e01c      	b.n	8006aca <HAL_RCC_OscConfig+0x36e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	2b05      	cmp	r3, #5
 8006a96:	d10c      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x356>
 8006a98:	4b61      	ldr	r3, [pc, #388]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	4a60      	ldr	r2, [pc, #384]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006a9e:	f043 0304 	orr.w	r3, r3, #4
 8006aa2:	6213      	str	r3, [r2, #32]
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	4a5d      	ldr	r2, [pc, #372]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	6213      	str	r3, [r2, #32]
 8006ab0:	e00b      	b.n	8006aca <HAL_RCC_OscConfig+0x36e>
 8006ab2:	4b5b      	ldr	r3, [pc, #364]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	4a5a      	ldr	r2, [pc, #360]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	6213      	str	r3, [r2, #32]
 8006abe:	4b58      	ldr	r3, [pc, #352]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4a57      	ldr	r2, [pc, #348]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006ac4:	f023 0304 	bic.w	r3, r3, #4
 8006ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d015      	beq.n	8006afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ad2:	f7fc fdd5 	bl	8003680 <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fc fdd1 	bl	8003680 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e0b1      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0ee      	beq.n	8006ada <HAL_RCC_OscConfig+0x37e>
 8006afc:	e014      	b.n	8006b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006afe:	f7fc fdbf 	bl	8003680 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b04:	e00a      	b.n	8006b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b06:	f7fc fdbb 	bl	8003680 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e09b      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b1c:	4b40      	ldr	r3, [pc, #256]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1ee      	bne.n	8006b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d105      	bne.n	8006b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b2e:	4b3c      	ldr	r3, [pc, #240]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	4a3b      	ldr	r2, [pc, #236]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 8087 	beq.w	8006c52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b44:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 030c 	and.w	r3, r3, #12
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d061      	beq.n	8006c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d146      	bne.n	8006be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b58:	4b33      	ldr	r3, [pc, #204]	; (8006c28 <HAL_RCC_OscConfig+0x4cc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5e:	f7fc fd8f 	bl	8003680 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fc fd8b 	bl	8003680 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e06d      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d108      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	4921      	ldr	r1, [pc, #132]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba0:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a19      	ldr	r1, [r3, #32]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	491b      	ldr	r1, [pc, #108]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <HAL_RCC_OscConfig+0x4cc>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fc fd5f 	bl	8003680 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fc fd5b 	bl	8003680 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e03d      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x46a>
 8006be4:	e035      	b.n	8006c52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <HAL_RCC_OscConfig+0x4cc>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bec:	f7fc fd48 	bl	8003680 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fc fd44 	bl	8003680 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e026      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x498>
 8006c12:	e01e      	b.n	8006c52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d107      	bne.n	8006c2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e019      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	40007000 	.word	0x40007000
 8006c28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_OscConfig+0x500>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d106      	bne.n	8006c4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40021000 	.word	0x40021000

08006c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0d0      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c74:	4b6a      	ldr	r3, [pc, #424]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d910      	bls.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c82:	4b67      	ldr	r3, [pc, #412]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 0207 	bic.w	r2, r3, #7
 8006c8a:	4965      	ldr	r1, [pc, #404]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b63      	ldr	r3, [pc, #396]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0b8      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d020      	beq.n	8006cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cbc:	4b59      	ldr	r3, [pc, #356]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a58      	ldr	r2, [pc, #352]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cd4:	4b53      	ldr	r3, [pc, #332]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a52      	ldr	r2, [pc, #328]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce0:	4b50      	ldr	r3, [pc, #320]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	494d      	ldr	r1, [pc, #308]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d040      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d107      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d06:	4b47      	ldr	r3, [pc, #284]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e07f      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d107      	bne.n	8006d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d1e:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e073      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d2e:	4b3d      	ldr	r3, [pc, #244]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e06b      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d3e:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f023 0203 	bic.w	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4936      	ldr	r1, [pc, #216]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d50:	f7fc fc96 	bl	8003680 <HAL_GetTick>
 8006d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d56:	e00a      	b.n	8006d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d58:	f7fc fc92 	bl	8003680 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e053      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6e:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f003 020c 	and.w	r2, r3, #12
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d1eb      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d80:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d210      	bcs.n	8006db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8e:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f023 0207 	bic.w	r2, r3, #7
 8006d96:	4922      	ldr	r1, [pc, #136]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <HAL_RCC_ClockConfig+0x1c0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d001      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e032      	b.n	8006e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dbc:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4916      	ldr	r1, [pc, #88]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	490e      	ldr	r1, [pc, #56]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dee:	f000 f821 	bl	8006e34 <HAL_RCC_GetSysClockFreq>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCC_ClockConfig+0x1c4>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	091b      	lsrs	r3, r3, #4
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	490a      	ldr	r1, [pc, #40]	; (8006e28 <HAL_RCC_ClockConfig+0x1c8>)
 8006e00:	5ccb      	ldrb	r3, [r1, r3]
 8006e02:	fa22 f303 	lsr.w	r3, r2, r3
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <HAL_RCC_ClockConfig+0x1cc>)
 8006e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_RCC_ClockConfig+0x1d0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fc fbf4 	bl	80035fc <HAL_InitTick>

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40022000 	.word	0x40022000
 8006e24:	40021000 	.word	0x40021000
 8006e28:	0800a0e8 	.word	0x0800a0e8
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	20000010 	.word	0x20000010

08006e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e34:	b490      	push	{r4, r7}
 8006e36:	b08a      	sub	sp, #40	; 0x28
 8006e38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006e3c:	1d3c      	adds	r4, r7, #4
 8006e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e44:	f240 2301 	movw	r3, #513	; 0x201
 8006e48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 030c 	and.w	r3, r3, #12
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d002      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0x40>
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x46>
 8006e72:	e02b      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e76:	623b      	str	r3, [r7, #32]
      break;
 8006e78:	e02b      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	0c9b      	lsrs	r3, r3, #18
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	3328      	adds	r3, #40	; 0x28
 8006e84:	443b      	add	r3, r7
 8006e86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d012      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	0c5b      	lsrs	r3, r3, #17
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	3328      	adds	r3, #40	; 0x28
 8006ea2:	443b      	add	r3, r7
 8006ea4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ea8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eae:	fb03 f202 	mul.w	r2, r3, r2
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eba:	e004      	b.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4a0b      	ldr	r2, [pc, #44]	; (8006eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ec0:	fb02 f303 	mul.w	r3, r2, r3
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	623b      	str	r3, [r7, #32]
      break;
 8006eca:	e002      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ece:	623b      	str	r3, [r7, #32]
      break;
 8006ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3728      	adds	r7, #40	; 0x28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc90      	pop	{r4, r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	0800a0d8 	.word	0x0800a0d8
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	007a1200 	.word	0x007a1200
 8006eec:	003d0900 	.word	0x003d0900

08006ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff2 	bl	8006ef0 <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40021000 	.word	0x40021000
 8006f28:	0800a0f8 	.word	0x0800a0f8

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffde 	bl	8006ef0 <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	0adb      	lsrs	r3, r3, #11
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	0800a0f8 	.word	0x0800a0f8

08006f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <RCC_Delay+0x34>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <RCC_Delay+0x38>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0a5b      	lsrs	r3, r3, #9
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f70:	bf00      	nop
  }
  while (Delay --);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	1e5a      	subs	r2, r3, #1
 8006f76:	60fa      	str	r2, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f9      	bne.n	8006f70 <RCC_Delay+0x1c>
}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	10624dd3 	.word	0x10624dd3

08006f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e076      	b.n	8007090 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d108      	bne.n	8006fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fb2:	d009      	beq.n	8006fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	61da      	str	r2, [r3, #28]
 8006fba:	e005      	b.n	8006fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fc f95a 	bl	800329c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704c:	ea42 0103 	orr.w	r1, r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	0c1a      	lsrs	r2, r3, #16
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f002 0204 	and.w	r2, r2, #4
 800706e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69da      	ldr	r2, [r3, #28]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800707e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_SPI_Transmit+0x22>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e126      	b.n	8007308 <HAL_SPI_Transmit+0x270>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c2:	f7fc fadd 	bl	8003680 <HAL_GetTick>
 80070c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d002      	beq.n	80070de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070d8:	2302      	movs	r3, #2
 80070da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070dc:	e10b      	b.n	80072f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_SPI_Transmit+0x52>
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070ee:	e102      	b.n	80072f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2203      	movs	r2, #3
 80070f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	88fa      	ldrh	r2, [r7, #6]
 8007108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	88fa      	ldrh	r2, [r7, #6]
 800710e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007136:	d10f      	bne.n	8007158 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007146:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007156:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d007      	beq.n	8007176 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007174:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717e:	d14b      	bne.n	8007218 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_SPI_Transmit+0xf6>
 8007188:	8afb      	ldrh	r3, [r7, #22]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d13e      	bne.n	800720c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	881a      	ldrh	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	1c9a      	adds	r2, r3, #2
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071b2:	e02b      	b.n	800720c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d112      	bne.n	80071e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	881a      	ldrh	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80071e6:	e011      	b.n	800720c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e8:	f7fc fa4a 	bl	8003680 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d803      	bhi.n	8007200 <HAL_SPI_Transmit+0x168>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d102      	bne.n	8007206 <HAL_SPI_Transmit+0x16e>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	77fb      	strb	r3, [r7, #31]
          goto error;
 800720a:	e074      	b.n	80072f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ce      	bne.n	80071b4 <HAL_SPI_Transmit+0x11c>
 8007216:	e04c      	b.n	80072b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Transmit+0x18e>
 8007220:	8afb      	ldrh	r3, [r7, #22]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d140      	bne.n	80072a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800724c:	e02c      	b.n	80072a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b02      	cmp	r3, #2
 800725a:	d113      	bne.n	8007284 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	7812      	ldrb	r2, [r2, #0]
 8007268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	86da      	strh	r2, [r3, #54]	; 0x36
 8007282:	e011      	b.n	80072a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007284:	f7fc f9fc 	bl	8003680 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d803      	bhi.n	800729c <HAL_SPI_Transmit+0x204>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_Transmit+0x20a>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072a6:	e026      	b.n	80072f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1cd      	bne.n	800724e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fd12 	bl	8007ce0 <SPI_EndRxTxTransaction>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e000      	b.n	80072f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80072f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007306:	7ffb      	ldrb	r3, [r7, #31]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_SPI_Transmit_IT+0x20>
 800732c:	2302      	movs	r3, #2
 800732e:	e06f      	b.n	8007410 <HAL_SPI_Transmit_IT+0x100>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit_IT+0x34>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007348:	e05d      	b.n	8007406 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b01      	cmp	r3, #1
 8007354:	d002      	beq.n	800735c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007356:	2302      	movs	r3, #2
 8007358:	75fb      	strb	r3, [r7, #23]
    goto error;
 800735a:	e054      	b.n	8007406 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2203      	movs	r2, #3
 8007360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a1f      	ldr	r2, [pc, #124]	; (800741c <HAL_SPI_Transmit_IT+0x10c>)
 80073a0:	645a      	str	r2, [r3, #68]	; 0x44
 80073a2:	e002      	b.n	80073aa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <HAL_SPI_Transmit_IT+0x110>)
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b2:	d10f      	bne.n	80073d4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80073e2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d008      	beq.n	8007404 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	e000      	b.n	8007406 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8007404:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	08007ae7 	.word	0x08007ae7
 8007420:	08007aa1 	.word	0x08007aa1

08007424 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d110      	bne.n	8007460 <HAL_SPI_Receive_IT+0x3c>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007446:	d10b      	bne.n	8007460 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2204      	movs	r2, #4
 800744c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 f882 	bl	8007560 <HAL_SPI_TransmitReceive_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	e076      	b.n	800754e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_SPI_Receive_IT+0x4a>
 800746a:	2302      	movs	r3, #2
 800746c:	e06f      	b.n	800754e <HAL_SPI_Receive_IT+0x12a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b01      	cmp	r3, #1
 8007480:	d002      	beq.n	8007488 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007482:	2302      	movs	r3, #2
 8007484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007486:	e05d      	b.n	8007544 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_SPI_Receive_IT+0x70>
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007498:	e054      	b.n	8007544 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2204      	movs	r2, #4
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	88fa      	ldrh	r2, [r7, #6]
 80074b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <HAL_SPI_Receive_IT+0x134>)
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
 80074e0:	e002      	b.n	80074e8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_SPI_Receive_IT+0x138>)
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f0:	d10f      	bne.n	8007512 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007520:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d008      	beq.n	8007542 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e000      	b.n	8007544 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8007542:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	08007a5b 	.word	0x08007a5b
 800755c:	08007a11 	.word	0x08007a11

08007560 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_SPI_TransmitReceive_IT+0x20>
 800757c:	2302      	movs	r3, #2
 800757e:	e075      	b.n	800766c <HAL_SPI_TransmitReceive_IT+0x10c>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800758e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007596:	7dbb      	ldrb	r3, [r7, #22]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d00d      	beq.n	80075b8 <HAL_SPI_TransmitReceive_IT+0x58>
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a2:	d106      	bne.n	80075b2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <HAL_SPI_TransmitReceive_IT+0x52>
 80075ac:	7dbb      	ldrb	r3, [r7, #22]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d002      	beq.n	80075b8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
 80075b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075b6:	e054      	b.n	8007662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <HAL_SPI_TransmitReceive_IT+0x6a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_TransmitReceive_IT+0x6a>
 80075c4:	887b      	ldrh	r3, [r7, #2]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ce:	e048      	b.n	8007662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d003      	beq.n	80075e4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2205      	movs	r2, #5
 80075e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	887a      	ldrh	r2, [r7, #2]
 80075f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	887a      	ldrh	r2, [r7, #2]
 8007606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	887a      	ldrh	r2, [r7, #2]
 800760c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_SPI_TransmitReceive_IT+0x118>)
 800761a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
 8007622:	e005      	b.n	8007630 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <HAL_SPI_TransmitReceive_IT+0x120>)
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4a15      	ldr	r2, [pc, #84]	; (8007684 <HAL_SPI_TransmitReceive_IT+0x124>)
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800763e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d008      	beq.n	8007660 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e000      	b.n	8007662 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007660:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	08007953 	.word	0x08007953
 800767c:	080079b3 	.word	0x080079b3
 8007680:	0800788f 	.word	0x0800788f
 8007684:	080078f3 	.word	0x080078f3

08007688 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	099b      	lsrs	r3, r3, #6
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10f      	bne.n	80076cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	099b      	lsrs	r3, r3, #6
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
    return;
 80076ca:	e0be      	b.n	800784a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <HAL_SPI_IRQHandler+0x66>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	09db      	lsrs	r3, r3, #7
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
    return;
 80076ec:	e0ad      	b.n	800784a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_SPI_IRQHandler+0x80>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	099b      	lsrs	r3, r3, #6
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80a1 	beq.w	800784a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 809a 	beq.w	800784a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	099b      	lsrs	r3, r3, #6
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d023      	beq.n	800776a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b03      	cmp	r3, #3
 800772c:	d011      	beq.n	8007752 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	e00b      	b.n	800776a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	693b      	ldr	r3, [r7, #16]
        return;
 8007768:	e06f      	b.n	800784a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d014      	beq.n	80077a0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f043 0201 	orr.w	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d04f      	beq.n	8007848 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <HAL_SPI_IRQHandler+0x14c>
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d034      	beq.n	800783e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0203 	bic.w	r2, r2, #3
 80077e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f0:	4a17      	ldr	r2, [pc, #92]	; (8007850 <HAL_SPI_IRQHandler+0x1c8>)
 80077f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fc f8b7 	bl	800396c <HAL_DMA_Abort_IT>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <HAL_SPI_IRQHandler+0x1c8>)
 800781e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007824:	4618      	mov	r0, r3
 8007826:	f7fc f8a1 	bl	800396c <HAL_DMA_Abort_IT>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800783c:	e003      	b.n	8007846 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fa fe0e 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007844:	e000      	b.n	8007848 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8007846:	bf00      	nop
    return;
 8007848:	bf00      	nop
  }
}
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	08007867 	.word	0x08007867

08007854 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7fa fded 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f103 020c 	add.w	r2, r3, #12
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10f      	bne.n	80078ea <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078d8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa19 	bl	8007d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	7812      	ldrb	r2, [r2, #0]
 8007906:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10f      	bne.n	800794a <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007938:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9e9 	bl	8007d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	b292      	uxth	r2, r2
 8007966:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10f      	bne.n	80079aa <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007998:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9b9 	bl	8007d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	881a      	ldrh	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	1c9a      	adds	r2, r3, #2
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10f      	bne.n	8007a08 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f98a 	bl	8007d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f103 020c 	add.w	r2, r3, #12
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	7812      	ldrb	r2, [r2, #0]
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f9d9 	bl	8007e04 <SPI_CloseRx_ISR>
  }
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9b6 	bl	8007e04 <SPI_CloseRx_ISR>
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9d3 	bl	8007e84 <SPI_CloseTx_ISR>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	881a      	ldrh	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	1c9a      	adds	r2, r3, #2
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9b1 	bl	8007e84 <SPI_CloseTx_ISR>
  }
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b3c:	f7fb fda0 	bl	8003680 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4413      	add	r3, r2
 8007b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b4c:	f7fb fd98 	bl	8003680 <HAL_GetTick>
 8007b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b52:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	015b      	lsls	r3, r3, #5
 8007b58:	0d1b      	lsrs	r3, r3, #20
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	fb02 f303 	mul.w	r3, r2, r3
 8007b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b62:	e054      	b.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d050      	beq.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b6c:	f7fb fd88 	bl	8003680 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d902      	bls.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d13d      	bne.n	8007bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b9a:	d111      	bne.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba4:	d004      	beq.n	8007bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bae:	d107      	bne.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc8:	d10f      	bne.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e017      	b.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4013      	ands	r3, r2
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	bf0c      	ite	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	2300      	movne	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d19b      	bne.n	8007b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c50:	d111      	bne.n	8007c76 <SPI_EndRxTransaction+0x3a>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c5a:	d004      	beq.n	8007c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c64:	d107      	bne.n	8007c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7e:	d117      	bne.n	8007cb0 <SPI_EndRxTransaction+0x74>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c88:	d112      	bne.n	8007cb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2200      	movs	r2, #0
 8007c92:	2101      	movs	r1, #1
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff49 	bl	8007b2c <SPI_WaitFlagStateUntilTimeout>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01a      	beq.n	8007cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca4:	f043 0220 	orr.w	r2, r3, #32
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e013      	b.n	8007cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff36 	bl	8007b2c <SPI_WaitFlagStateUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e000      	b.n	8007cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2180      	movs	r1, #128	; 0x80
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff ff18 	bl	8007b2c <SPI_WaitFlagStateUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d06:	f043 0220 	orr.w	r2, r3, #32
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e000      	b.n	8007d14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007d24:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <SPI_CloseRxTx_ISR+0xe0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a35      	ldr	r2, [pc, #212]	; (8007e00 <SPI_CloseRxTx_ISR+0xe4>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	0a5b      	lsrs	r3, r3, #9
 8007d30:	2264      	movs	r2, #100	; 0x64
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d38:	f7fb fca2 	bl	8003680 <HAL_GetTick>
 8007d3c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0220 	bic.w	r2, r2, #32
 8007d4c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d58:	f043 0220 	orr.w	r2, r3, #32
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d60:	e009      	b.n	8007d76 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0eb      	beq.n	8007d4e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	2164      	movs	r1, #100	; 0x64
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff ffb0 	bl	8007ce0 <SPI_EndRxTxTransaction>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	f043 0220 	orr.w	r2, r3, #32
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d115      	bne.n	8007de4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d107      	bne.n	8007dd4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fa fa7d 	bl	80022cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007dd2:	e00e      	b.n	8007df2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fd39 	bl	8007854 <HAL_SPI_TxRxCpltCallback>
}
 8007de2:	e006      	b.n	8007df2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7fa fb37 	bl	8002460 <HAL_SPI_ErrorCallback>
}
 8007df2:	bf00      	nop
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	2000000c 	.word	0x2000000c
 8007e00:	057619f1 	.word	0x057619f1

08007e04 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e1a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007e1c:	f7fb fc30 	bl	8003680 <HAL_GetTick>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	2164      	movs	r1, #100	; 0x64
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ff08 	bl	8007c3c <SPI_EndRxTransaction>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fa fa2d 	bl	80022cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e72:	e002      	b.n	8007e7a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fa faf3 	bl	8002460 <HAL_SPI_ErrorCallback>
}
 8007e7a:	bf00      	nop
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007e8c:	4b2c      	ldr	r3, [pc, #176]	; (8007f40 <SPI_CloseTx_ISR+0xbc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <SPI_CloseTx_ISR+0xc0>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	0a5b      	lsrs	r3, r3, #9
 8007e98:	2264      	movs	r2, #100	; 0x64
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ea0:	f7fb fbee 	bl	8003680 <HAL_GetTick>
 8007ea4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	f043 0220 	orr.w	r2, r3, #32
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007eb8:	e009      	b.n	8007ece <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0eb      	beq.n	8007ea6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007edc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	2164      	movs	r1, #100	; 0x64
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff fefc 	bl	8007ce0 <SPI_EndRxTxTransaction>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7fa fa99 	bl	8002460 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007f2e:	e002      	b.n	8007f36 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fa f987 	bl	8002244 <HAL_SPI_TxCpltCallback>
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	2000000c 	.word	0x2000000c
 8007f44:	057619f1 	.word	0x057619f1

08007f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e041      	b.n	8007fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fb f9e6 	bl	8003340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f000 fa70 	bl	800846c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d001      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e03a      	b.n	8008076 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a18      	ldr	r2, [pc, #96]	; (8008080 <HAL_TIM_Base_Start_IT+0x98>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00e      	beq.n	8008040 <HAL_TIM_Base_Start_IT+0x58>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d009      	beq.n	8008040 <HAL_TIM_Base_Start_IT+0x58>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a14      	ldr	r2, [pc, #80]	; (8008084 <HAL_TIM_Base_Start_IT+0x9c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d004      	beq.n	8008040 <HAL_TIM_Base_Start_IT+0x58>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a13      	ldr	r2, [pc, #76]	; (8008088 <HAL_TIM_Base_Start_IT+0xa0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d111      	bne.n	8008064 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b06      	cmp	r3, #6
 8008050:	d010      	beq.n	8008074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	e007      	b.n	8008074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr
 8008080:	40012c00 	.word	0x40012c00
 8008084:	40000400 	.word	0x40000400
 8008088:	40000800 	.word	0x40000800

0800808c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0202 	mvn.w	r2, #2
 80080b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9b1 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f9a4 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9b3 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b04      	cmp	r3, #4
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0204 	mvn.w	r2, #4
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f987 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f97a 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f989 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b08      	cmp	r3, #8
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0208 	mvn.w	r2, #8
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f95d 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f950 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f95f 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d122      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d11b      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0210 	mvn.w	r2, #16
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2208      	movs	r2, #8
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f933 	bl	8008436 <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f926 	bl	8008424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f935 	bl	8008448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d107      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0201 	mvn.w	r2, #1
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7f9 f8ec 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d10e      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b80      	cmp	r3, #128	; 0x80
 800822a:	d107      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa77 	bl	800872a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	d107      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8f9 	bl	800845a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b20      	cmp	r3, #32
 8008274:	d10e      	bne.n	8008294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b20      	cmp	r3, #32
 8008282:	d107      	bne.n	8008294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0220 	mvn.w	r2, #32
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa42 	bl	8008718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIM_ConfigClockSource+0x18>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e0b3      	b.n	800841c <HAL_TIM_ConfigClockSource+0x180>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ec:	d03e      	beq.n	800836c <HAL_TIM_ConfigClockSource+0xd0>
 80082ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f2:	f200 8087 	bhi.w	8008404 <HAL_TIM_ConfigClockSource+0x168>
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	f000 8085 	beq.w	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 80082fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008302:	d87f      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 8008304:	2b70      	cmp	r3, #112	; 0x70
 8008306:	d01a      	beq.n	800833e <HAL_TIM_ConfigClockSource+0xa2>
 8008308:	2b70      	cmp	r3, #112	; 0x70
 800830a:	d87b      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 800830c:	2b60      	cmp	r3, #96	; 0x60
 800830e:	d050      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x116>
 8008310:	2b60      	cmp	r3, #96	; 0x60
 8008312:	d877      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 8008314:	2b50      	cmp	r3, #80	; 0x50
 8008316:	d03c      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0xf6>
 8008318:	2b50      	cmp	r3, #80	; 0x50
 800831a:	d873      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d058      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x136>
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	d86f      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 8008324:	2b30      	cmp	r3, #48	; 0x30
 8008326:	d064      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x156>
 8008328:	2b30      	cmp	r3, #48	; 0x30
 800832a:	d86b      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 800832c:	2b20      	cmp	r3, #32
 800832e:	d060      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x156>
 8008330:	2b20      	cmp	r3, #32
 8008332:	d867      	bhi.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d05c      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x156>
 8008338:	2b10      	cmp	r3, #16
 800833a:	d05a      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800833c:	e062      	b.n	8008404 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	6899      	ldr	r1, [r3, #8]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f000 f966 	bl	800861e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008360:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	609a      	str	r2, [r3, #8]
      break;
 800836a:	e04e      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6899      	ldr	r1, [r3, #8]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f000 f94f 	bl	800861e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800838e:	609a      	str	r2, [r3, #8]
      break;
 8008390:	e03b      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6859      	ldr	r1, [r3, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	461a      	mov	r2, r3
 80083a0:	f000 f8c6 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2150      	movs	r1, #80	; 0x50
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 f91d 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 80083b0:	e02b      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6859      	ldr	r1, [r3, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	461a      	mov	r2, r3
 80083c0:	f000 f8e4 	bl	800858c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2160      	movs	r1, #96	; 0x60
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f90d 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 80083d0:	e01b      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 f8a6 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f8fd 	bl	80085ea <TIM_ITRx_SetConfig>
      break;
 80083f0:	e00b      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f000 f8f4 	bl	80085ea <TIM_ITRx_SetConfig>
        break;
 8008402:	e002      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008404:	bf00      	nop
 8008406:	e000      	b.n	800840a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008408:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr

08008436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a29      	ldr	r2, [pc, #164]	; (8008524 <TIM_Base_SetConfig+0xb8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00b      	beq.n	800849c <TIM_Base_SetConfig+0x30>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848a:	d007      	beq.n	800849c <TIM_Base_SetConfig+0x30>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a26      	ldr	r2, [pc, #152]	; (8008528 <TIM_Base_SetConfig+0xbc>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_Base_SetConfig+0x30>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a25      	ldr	r2, [pc, #148]	; (800852c <TIM_Base_SetConfig+0xc0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d108      	bne.n	80084ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1c      	ldr	r2, [pc, #112]	; (8008524 <TIM_Base_SetConfig+0xb8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00b      	beq.n	80084ce <TIM_Base_SetConfig+0x62>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084bc:	d007      	beq.n	80084ce <TIM_Base_SetConfig+0x62>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a19      	ldr	r2, [pc, #100]	; (8008528 <TIM_Base_SetConfig+0xbc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d003      	beq.n	80084ce <TIM_Base_SetConfig+0x62>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a18      	ldr	r2, [pc, #96]	; (800852c <TIM_Base_SetConfig+0xc0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d108      	bne.n	80084e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a07      	ldr	r2, [pc, #28]	; (8008524 <TIM_Base_SetConfig+0xb8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d103      	bne.n	8008514 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	615a      	str	r2, [r3, #20]
}
 800851a:	bf00      	nop
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr
 8008524:	40012c00 	.word	0x40012c00
 8008528:	40000400 	.word	0x40000400
 800852c:	40000800 	.word	0x40000800

08008530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800855a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f023 030a 	bic.w	r3, r3, #10
 800856c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f023 0210 	bic.w	r2, r3, #16
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	031b      	lsls	r3, r3, #12
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	f043 0307 	orr.w	r3, r3, #7
 800860c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr

0800861e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800861e:	b480      	push	{r7}
 8008620:	b087      	sub	sp, #28
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008638:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	431a      	orrs	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4313      	orrs	r3, r2
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	609a      	str	r2, [r3, #8]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008670:	2302      	movs	r3, #2
 8008672:	e046      	b.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a16      	ldr	r2, [pc, #88]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00e      	beq.n	80086d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c0:	d009      	beq.n	80086d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a12      	ldr	r2, [pc, #72]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d004      	beq.n	80086d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a10      	ldr	r2, [pc, #64]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d10c      	bne.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800

08008718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr

0800872a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e03f      	b.n	80087ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fa fe12 	bl	800338c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2224      	movs	r2, #36	; 0x24
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800877e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fbed 	bl	8008f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	695a      	ldr	r2, [r3, #20]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	4613      	mov	r3, r2
 80087e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d130      	bne.n	8008852 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <HAL_UART_Transmit_IT+0x26>
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e029      	b.n	8008854 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_UART_Transmit_IT+0x38>
 800880a:	2302      	movs	r3, #2
 800880c:	e022      	b.n	8008854 <HAL_UART_Transmit_IT+0x7e>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2221      	movs	r2, #33	; 0x21
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800884c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr

0800885e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	4613      	mov	r3, r2
 800886a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b20      	cmp	r3, #32
 8008876:	d11d      	bne.n	80088b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_UART_Receive_IT+0x26>
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e016      	b.n	80088b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_UART_Receive_IT+0x38>
 8008892:	2302      	movs	r3, #2
 8008894:	e00f      	b.n	80088b6 <HAL_UART_Receive_IT+0x58>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	461a      	mov	r2, r3
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f9cf 	bl	8008c4e <UART_Start_Receive_IT>
 80088b0:	4603      	mov	r3, r0
 80088b2:	e000      	b.n	80088b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	; 0x28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10d      	bne.n	8008912 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_UART_IRQHandler+0x52>
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa7f 	bl	8008e0e <UART_Receive_IT>
      return;
 8008910:	e17b      	b.n	8008c0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80b1 	beq.w	8008a7c <HAL_UART_IRQHandler+0x1bc>
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d105      	bne.n	8008930 <HAL_UART_IRQHandler+0x70>
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80a6 	beq.w	8008a7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <HAL_UART_IRQHandler+0x90>
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	f043 0201 	orr.w	r2, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <HAL_UART_IRQHandler+0xb0>
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	f043 0202 	orr.w	r2, r3, #2
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <HAL_UART_IRQHandler+0xd0>
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	f043 0204 	orr.w	r2, r3, #4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00f      	beq.n	80089ba <HAL_UART_IRQHandler+0xfa>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <HAL_UART_IRQHandler+0xee>
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	f043 0208 	orr.w	r2, r3, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 811e 	beq.w	8008c00 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <HAL_UART_IRQHandler+0x11e>
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f003 0320 	and.w	r3, r3, #32
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fa18 	bl	8008e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2301      	movne	r3, #1
 80089ee:	2300      	moveq	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <HAL_UART_IRQHandler+0x146>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d031      	beq.n	8008a6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f95a 	bl	8008cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d023      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695a      	ldr	r2, [r3, #20]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d013      	beq.n	8008a5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	4a76      	ldr	r2, [pc, #472]	; (8008c10 <HAL_UART_IRQHandler+0x350>)
 8008a38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fa ff94 	bl	800396c <HAL_DMA_Abort_IT>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d016      	beq.n	8008a78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a58:	e00e      	b.n	8008a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8e3 	bl	8008c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a60:	e00a      	b.n	8008a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8df 	bl	8008c26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	e006      	b.n	8008a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f8db 	bl	8008c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a76:	e0c3      	b.n	8008c00 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a78:	bf00      	nop
    return;
 8008a7a:	e0c1      	b.n	8008c00 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	f040 80a1 	bne.w	8008bc8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 809b 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8095 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04e      	beq.n	8008b60 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008acc:	8a3b      	ldrh	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8098 	beq.w	8008c04 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ad8:	8a3a      	ldrh	r2, [r7, #16]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	f080 8092 	bcs.w	8008c04 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8a3a      	ldrh	r2, [r7, #16]
 8008ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	d02b      	beq.n	8008b48 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008afe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	695a      	ldr	r2, [r3, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0210 	bic.w	r2, r2, #16
 8008b3c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fa fed7 	bl	80038f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f86d 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b5e:	e051      	b.n	8008c04 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d047      	beq.n	8008c08 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008b78:	8a7b      	ldrh	r3, [r7, #18]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d044      	beq.n	8008c08 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0210 	bic.w	r2, r2, #16
 8008bba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bbc:	8a7b      	ldrh	r3, [r7, #18]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f839 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008bc6:	e01f      	b.n	8008c08 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <HAL_UART_IRQHandler+0x324>
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8af 	bl	8008d40 <UART_Transmit_IT>
    return;
 8008be2:	e012      	b.n	8008c0a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00d      	beq.n	8008c0a <HAL_UART_IRQHandler+0x34a>
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f8f0 	bl	8008dde <UART_EndTransmit_IT>
    return;
 8008bfe:	e004      	b.n	8008c0a <HAL_UART_IRQHandler+0x34a>
    return;
 8008c00:	bf00      	nop
 8008c02:	e002      	b.n	8008c0a <HAL_UART_IRQHandler+0x34a>
      return;
 8008c04:	bf00      	nop
 8008c06:	e000      	b.n	8008c0a <HAL_UART_IRQHandler+0x34a>
      return;
 8008c08:	bf00      	nop
  }
}
 8008c0a:	3728      	adds	r7, #40	; 0x28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	08008d19 	.word	0x08008d19

08008c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bc80      	pop	{r7}
 8008c24:	4770      	bx	lr

08008c26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc80      	pop	{r7}
 8008c4c:	4770      	bx	lr

08008c4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b085      	sub	sp, #20
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2222      	movs	r2, #34	; 0x22
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c92:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f042 0201 	orr.w	r2, r2, #1
 8008ca2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0220 	orr.w	r2, r2, #32
 8008cb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bc80      	pop	{r7}
 8008cbe:	4770      	bx	lr

08008cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0201 	bic.w	r2, r2, #1
 8008ce6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d107      	bne.n	8008d00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0210 	bic.w	r2, r2, #16
 8008cfe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff ff77 	bl	8008c26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b21      	cmp	r3, #33	; 0x21
 8008d52:	d13e      	bne.n	8008dd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5c:	d114      	bne.n	8008d88 <UART_Transmit_IT+0x48>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d110      	bne.n	8008d88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]
 8008d86:	e008      	b.n	8008d9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	1c59      	adds	r1, r3, #1
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6211      	str	r1, [r2, #32]
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4619      	mov	r1, r3
 8008da8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008dd2:	2302      	movs	r3, #2
  }
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr

08008dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff ff08 	bl	8008c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b22      	cmp	r3, #34	; 0x22
 8008e20:	f040 8099 	bne.w	8008f56 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2c:	d117      	bne.n	8008e5e <UART_Receive_IT+0x50>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d113      	bne.n	8008e5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e5c:	e026      	b.n	8008eac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e70:	d007      	beq.n	8008e82 <UART_Receive_IT+0x74>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <UART_Receive_IT+0x82>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d106      	bne.n	8008e90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e008      	b.n	8008ea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d148      	bne.n	8008f52 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0220 	bic.w	r2, r2, #32
 8008ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d123      	bne.n	8008f48 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0210 	bic.w	r2, r2, #16
 8008f14:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d10a      	bne.n	8008f3a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f24:	2300      	movs	r3, #0
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fe79 	bl	8008c38 <HAL_UARTEx_RxEventCallback>
 8008f46:	e002      	b.n	8008f4e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7f8 fb99 	bl	8001680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e002      	b.n	8008f58 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e000      	b.n	8008f58 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
  }
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f9a:	f023 030c 	bic.w	r3, r3, #12
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <UART_SetConfig+0x114>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d103      	bne.n	8008fd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008fc8:	f7fd ffb0 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	e002      	b.n	8008fd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008fd0:	f7fd ff98 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8008fd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009a      	lsls	r2, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	4a22      	ldr	r2, [pc, #136]	; (8009078 <UART_SetConfig+0x118>)
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	095b      	lsrs	r3, r3, #5
 8008ff4:	0119      	lsls	r1, r3, #4
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009a      	lsls	r2, r3, #2
 8009000:	441a      	add	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	fbb2 f2f3 	udiv	r2, r2, r3
 800900c:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <UART_SetConfig+0x118>)
 800900e:	fba3 0302 	umull	r0, r3, r3, r2
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	2064      	movs	r0, #100	; 0x64
 8009016:	fb00 f303 	mul.w	r3, r0, r3
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	3332      	adds	r3, #50	; 0x32
 8009020:	4a15      	ldr	r2, [pc, #84]	; (8009078 <UART_SetConfig+0x118>)
 8009022:	fba2 2303 	umull	r2, r3, r2, r3
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800902c:	4419      	add	r1, r3
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009a      	lsls	r2, r3, #2
 8009038:	441a      	add	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	fbb2 f2f3 	udiv	r2, r2, r3
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <UART_SetConfig+0x118>)
 8009046:	fba3 0302 	umull	r0, r3, r3, r2
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2064      	movs	r0, #100	; 0x64
 800904e:	fb00 f303 	mul.w	r3, r0, r3
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	3332      	adds	r3, #50	; 0x32
 8009058:	4a07      	ldr	r2, [pc, #28]	; (8009078 <UART_SetConfig+0x118>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	440a      	add	r2, r1
 800906a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	40013800 	.word	0x40013800
 8009078:	51eb851f 	.word	0x51eb851f

0800907c <__errno>:
 800907c:	4b01      	ldr	r3, [pc, #4]	; (8009084 <__errno+0x8>)
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000018 	.word	0x20000018

08009088 <__libc_init_array>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	2600      	movs	r6, #0
 800908c:	4d0c      	ldr	r5, [pc, #48]	; (80090c0 <__libc_init_array+0x38>)
 800908e:	4c0d      	ldr	r4, [pc, #52]	; (80090c4 <__libc_init_array+0x3c>)
 8009090:	1b64      	subs	r4, r4, r5
 8009092:	10a4      	asrs	r4, r4, #2
 8009094:	42a6      	cmp	r6, r4
 8009096:	d109      	bne.n	80090ac <__libc_init_array+0x24>
 8009098:	f001 f810 	bl	800a0bc <_init>
 800909c:	2600      	movs	r6, #0
 800909e:	4d0a      	ldr	r5, [pc, #40]	; (80090c8 <__libc_init_array+0x40>)
 80090a0:	4c0a      	ldr	r4, [pc, #40]	; (80090cc <__libc_init_array+0x44>)
 80090a2:	1b64      	subs	r4, r4, r5
 80090a4:	10a4      	asrs	r4, r4, #2
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	d105      	bne.n	80090b6 <__libc_init_array+0x2e>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b0:	4798      	blx	r3
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7ee      	b.n	8009094 <__libc_init_array+0xc>
 80090b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ba:	4798      	blx	r3
 80090bc:	3601      	adds	r6, #1
 80090be:	e7f2      	b.n	80090a6 <__libc_init_array+0x1e>
 80090c0:	0800a138 	.word	0x0800a138
 80090c4:	0800a138 	.word	0x0800a138
 80090c8:	0800a138 	.word	0x0800a138
 80090cc:	0800a13c 	.word	0x0800a13c

080090d0 <malloc>:
 80090d0:	4b02      	ldr	r3, [pc, #8]	; (80090dc <malloc+0xc>)
 80090d2:	4601      	mov	r1, r0
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	f000 b87b 	b.w	80091d0 <_malloc_r>
 80090da:	bf00      	nop
 80090dc:	20000018 	.word	0x20000018

080090e0 <free>:
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <free+0xc>)
 80090e2:	4601      	mov	r1, r0
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f000 b80b 	b.w	8009100 <_free_r>
 80090ea:	bf00      	nop
 80090ec:	20000018 	.word	0x20000018

080090f0 <memset>:
 80090f0:	4603      	mov	r3, r0
 80090f2:	4402      	add	r2, r0
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d100      	bne.n	80090fa <memset+0xa>
 80090f8:	4770      	bx	lr
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	e7f9      	b.n	80090f4 <memset+0x4>

08009100 <_free_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4605      	mov	r5, r0
 8009104:	2900      	cmp	r1, #0
 8009106:	d040      	beq.n	800918a <_free_r+0x8a>
 8009108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910c:	1f0c      	subs	r4, r1, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfb8      	it	lt
 8009112:	18e4      	addlt	r4, r4, r3
 8009114:	f000 f8e0 	bl	80092d8 <__malloc_lock>
 8009118:	4a1c      	ldr	r2, [pc, #112]	; (800918c <_free_r+0x8c>)
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x2c>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009128:	f000 b8dc 	b.w	80092e4 <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x42>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	1821      	adds	r1, r4, r0
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1809      	addeq	r1, r1, r0
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x1e>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x4c>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x42>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1850      	adds	r0, r2, r1
 8009150:	42a0      	cmp	r0, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x6c>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	4401      	add	r1, r0
 8009158:	1850      	adds	r0, r2, r1
 800915a:	4283      	cmp	r3, r0
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x22>
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4401      	add	r1, r0
 8009166:	6011      	str	r1, [r2, #0]
 8009168:	6053      	str	r3, [r2, #4]
 800916a:	e7da      	b.n	8009122 <_free_r+0x22>
 800916c:	d902      	bls.n	8009174 <_free_r+0x74>
 800916e:	230c      	movs	r3, #12
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x22>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf01      	itttt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	1809      	addeq	r1, r1, r0
 8009182:	6021      	streq	r1, [r4, #0]
 8009184:	6063      	str	r3, [r4, #4]
 8009186:	6054      	str	r4, [r2, #4]
 8009188:	e7cb      	b.n	8009122 <_free_r+0x22>
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000408 	.word	0x20000408

08009190 <sbrk_aligned>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4e0e      	ldr	r6, [pc, #56]	; (80091cc <sbrk_aligned+0x3c>)
 8009194:	460c      	mov	r4, r1
 8009196:	6831      	ldr	r1, [r6, #0]
 8009198:	4605      	mov	r5, r0
 800919a:	b911      	cbnz	r1, 80091a2 <sbrk_aligned+0x12>
 800919c:	f000 f88c 	bl	80092b8 <_sbrk_r>
 80091a0:	6030      	str	r0, [r6, #0]
 80091a2:	4621      	mov	r1, r4
 80091a4:	4628      	mov	r0, r5
 80091a6:	f000 f887 	bl	80092b8 <_sbrk_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d00a      	beq.n	80091c4 <sbrk_aligned+0x34>
 80091ae:	1cc4      	adds	r4, r0, #3
 80091b0:	f024 0403 	bic.w	r4, r4, #3
 80091b4:	42a0      	cmp	r0, r4
 80091b6:	d007      	beq.n	80091c8 <sbrk_aligned+0x38>
 80091b8:	1a21      	subs	r1, r4, r0
 80091ba:	4628      	mov	r0, r5
 80091bc:	f000 f87c 	bl	80092b8 <_sbrk_r>
 80091c0:	3001      	adds	r0, #1
 80091c2:	d101      	bne.n	80091c8 <sbrk_aligned+0x38>
 80091c4:	f04f 34ff 	mov.w	r4, #4294967295
 80091c8:	4620      	mov	r0, r4
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	2000040c 	.word	0x2000040c

080091d0 <_malloc_r>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	1ccd      	adds	r5, r1, #3
 80091d6:	f025 0503 	bic.w	r5, r5, #3
 80091da:	3508      	adds	r5, #8
 80091dc:	2d0c      	cmp	r5, #12
 80091de:	bf38      	it	cc
 80091e0:	250c      	movcc	r5, #12
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	4607      	mov	r7, r0
 80091e6:	db01      	blt.n	80091ec <_malloc_r+0x1c>
 80091e8:	42a9      	cmp	r1, r5
 80091ea:	d905      	bls.n	80091f8 <_malloc_r+0x28>
 80091ec:	230c      	movs	r3, #12
 80091ee:	2600      	movs	r6, #0
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	4630      	mov	r0, r6
 80091f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f8:	4e2e      	ldr	r6, [pc, #184]	; (80092b4 <_malloc_r+0xe4>)
 80091fa:	f000 f86d 	bl	80092d8 <__malloc_lock>
 80091fe:	6833      	ldr	r3, [r6, #0]
 8009200:	461c      	mov	r4, r3
 8009202:	bb34      	cbnz	r4, 8009252 <_malloc_r+0x82>
 8009204:	4629      	mov	r1, r5
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ffc2 	bl	8009190 <sbrk_aligned>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	4604      	mov	r4, r0
 8009210:	d14d      	bne.n	80092ae <_malloc_r+0xde>
 8009212:	6834      	ldr	r4, [r6, #0]
 8009214:	4626      	mov	r6, r4
 8009216:	2e00      	cmp	r6, #0
 8009218:	d140      	bne.n	800929c <_malloc_r+0xcc>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	4631      	mov	r1, r6
 800921e:	4638      	mov	r0, r7
 8009220:	eb04 0803 	add.w	r8, r4, r3
 8009224:	f000 f848 	bl	80092b8 <_sbrk_r>
 8009228:	4580      	cmp	r8, r0
 800922a:	d13a      	bne.n	80092a2 <_malloc_r+0xd2>
 800922c:	6821      	ldr	r1, [r4, #0]
 800922e:	3503      	adds	r5, #3
 8009230:	1a6d      	subs	r5, r5, r1
 8009232:	f025 0503 	bic.w	r5, r5, #3
 8009236:	3508      	adds	r5, #8
 8009238:	2d0c      	cmp	r5, #12
 800923a:	bf38      	it	cc
 800923c:	250c      	movcc	r5, #12
 800923e:	4638      	mov	r0, r7
 8009240:	4629      	mov	r1, r5
 8009242:	f7ff ffa5 	bl	8009190 <sbrk_aligned>
 8009246:	3001      	adds	r0, #1
 8009248:	d02b      	beq.n	80092a2 <_malloc_r+0xd2>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	442b      	add	r3, r5
 800924e:	6023      	str	r3, [r4, #0]
 8009250:	e00e      	b.n	8009270 <_malloc_r+0xa0>
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	1b52      	subs	r2, r2, r5
 8009256:	d41e      	bmi.n	8009296 <_malloc_r+0xc6>
 8009258:	2a0b      	cmp	r2, #11
 800925a:	d916      	bls.n	800928a <_malloc_r+0xba>
 800925c:	1961      	adds	r1, r4, r5
 800925e:	42a3      	cmp	r3, r4
 8009260:	6025      	str	r5, [r4, #0]
 8009262:	bf18      	it	ne
 8009264:	6059      	strne	r1, [r3, #4]
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	bf08      	it	eq
 800926a:	6031      	streq	r1, [r6, #0]
 800926c:	5162      	str	r2, [r4, r5]
 800926e:	604b      	str	r3, [r1, #4]
 8009270:	4638      	mov	r0, r7
 8009272:	f104 060b 	add.w	r6, r4, #11
 8009276:	f000 f835 	bl	80092e4 <__malloc_unlock>
 800927a:	f026 0607 	bic.w	r6, r6, #7
 800927e:	1d23      	adds	r3, r4, #4
 8009280:	1af2      	subs	r2, r6, r3
 8009282:	d0b6      	beq.n	80091f2 <_malloc_r+0x22>
 8009284:	1b9b      	subs	r3, r3, r6
 8009286:	50a3      	str	r3, [r4, r2]
 8009288:	e7b3      	b.n	80091f2 <_malloc_r+0x22>
 800928a:	6862      	ldr	r2, [r4, #4]
 800928c:	42a3      	cmp	r3, r4
 800928e:	bf0c      	ite	eq
 8009290:	6032      	streq	r2, [r6, #0]
 8009292:	605a      	strne	r2, [r3, #4]
 8009294:	e7ec      	b.n	8009270 <_malloc_r+0xa0>
 8009296:	4623      	mov	r3, r4
 8009298:	6864      	ldr	r4, [r4, #4]
 800929a:	e7b2      	b.n	8009202 <_malloc_r+0x32>
 800929c:	4634      	mov	r4, r6
 800929e:	6876      	ldr	r6, [r6, #4]
 80092a0:	e7b9      	b.n	8009216 <_malloc_r+0x46>
 80092a2:	230c      	movs	r3, #12
 80092a4:	4638      	mov	r0, r7
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	f000 f81c 	bl	80092e4 <__malloc_unlock>
 80092ac:	e7a1      	b.n	80091f2 <_malloc_r+0x22>
 80092ae:	6025      	str	r5, [r4, #0]
 80092b0:	e7de      	b.n	8009270 <_malloc_r+0xa0>
 80092b2:	bf00      	nop
 80092b4:	20000408 	.word	0x20000408

080092b8 <_sbrk_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	2300      	movs	r3, #0
 80092bc:	4d05      	ldr	r5, [pc, #20]	; (80092d4 <_sbrk_r+0x1c>)
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7fa f922 	bl	800350c <_sbrk>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_sbrk_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_sbrk_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000410 	.word	0x20000410

080092d8 <__malloc_lock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__malloc_lock+0x8>)
 80092da:	f000 b809 	b.w	80092f0 <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	20000414 	.word	0x20000414

080092e4 <__malloc_unlock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_unlock+0x8>)
 80092e6:	f000 b804 	b.w	80092f2 <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	20000414 	.word	0x20000414

080092f0 <__retarget_lock_acquire_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <__retarget_lock_release_recursive>:
 80092f2:	4770      	bx	lr

080092f4 <pow>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4614      	mov	r4, r2
 80092fa:	461d      	mov	r5, r3
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	f000 f862 	bl	80093c8 <__ieee754_pow>
 8009304:	4622      	mov	r2, r4
 8009306:	4606      	mov	r6, r0
 8009308:	460f      	mov	r7, r1
 800930a:	462b      	mov	r3, r5
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f7 fb74 	bl	80009fc <__aeabi_dcmpun>
 8009314:	bbc8      	cbnz	r0, 800938a <pow+0x96>
 8009316:	2200      	movs	r2, #0
 8009318:	2300      	movs	r3, #0
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f7 fb3b 	bl	8000998 <__aeabi_dcmpeq>
 8009322:	b1b8      	cbz	r0, 8009354 <pow+0x60>
 8009324:	2200      	movs	r2, #0
 8009326:	2300      	movs	r3, #0
 8009328:	4620      	mov	r0, r4
 800932a:	4629      	mov	r1, r5
 800932c:	f7f7 fb34 	bl	8000998 <__aeabi_dcmpeq>
 8009330:	2800      	cmp	r0, #0
 8009332:	d141      	bne.n	80093b8 <pow+0xc4>
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f000 fe3b 	bl	8009fb2 <finite>
 800933c:	b328      	cbz	r0, 800938a <pow+0x96>
 800933e:	2200      	movs	r2, #0
 8009340:	2300      	movs	r3, #0
 8009342:	4620      	mov	r0, r4
 8009344:	4629      	mov	r1, r5
 8009346:	f7f7 fb31 	bl	80009ac <__aeabi_dcmplt>
 800934a:	b1f0      	cbz	r0, 800938a <pow+0x96>
 800934c:	f7ff fe96 	bl	800907c <__errno>
 8009350:	2322      	movs	r3, #34	; 0x22
 8009352:	e019      	b.n	8009388 <pow+0x94>
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f000 fe2b 	bl	8009fb2 <finite>
 800935c:	b9c8      	cbnz	r0, 8009392 <pow+0x9e>
 800935e:	4640      	mov	r0, r8
 8009360:	4649      	mov	r1, r9
 8009362:	f000 fe26 	bl	8009fb2 <finite>
 8009366:	b1a0      	cbz	r0, 8009392 <pow+0x9e>
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f000 fe21 	bl	8009fb2 <finite>
 8009370:	b178      	cbz	r0, 8009392 <pow+0x9e>
 8009372:	4632      	mov	r2, r6
 8009374:	463b      	mov	r3, r7
 8009376:	4630      	mov	r0, r6
 8009378:	4639      	mov	r1, r7
 800937a:	f7f7 fb3f 	bl	80009fc <__aeabi_dcmpun>
 800937e:	2800      	cmp	r0, #0
 8009380:	d0e4      	beq.n	800934c <pow+0x58>
 8009382:	f7ff fe7b 	bl	800907c <__errno>
 8009386:	2321      	movs	r3, #33	; 0x21
 8009388:	6003      	str	r3, [r0, #0]
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4630      	mov	r0, r6
 8009398:	4639      	mov	r1, r7
 800939a:	f7f7 fafd 	bl	8000998 <__aeabi_dcmpeq>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d0f3      	beq.n	800938a <pow+0x96>
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f000 fe04 	bl	8009fb2 <finite>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d0ed      	beq.n	800938a <pow+0x96>
 80093ae:	4620      	mov	r0, r4
 80093b0:	4629      	mov	r1, r5
 80093b2:	f000 fdfe 	bl	8009fb2 <finite>
 80093b6:	e7c8      	b.n	800934a <pow+0x56>
 80093b8:	2600      	movs	r6, #0
 80093ba:	4f01      	ldr	r7, [pc, #4]	; (80093c0 <pow+0xcc>)
 80093bc:	e7e5      	b.n	800938a <pow+0x96>
 80093be:	bf00      	nop
 80093c0:	3ff00000 	.word	0x3ff00000
 80093c4:	00000000 	.word	0x00000000

080093c8 <__ieee754_pow>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	b093      	sub	sp, #76	; 0x4c
 80093ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80093d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80093da:	4689      	mov	r9, r1
 80093dc:	ea56 0102 	orrs.w	r1, r6, r2
 80093e0:	4680      	mov	r8, r0
 80093e2:	d111      	bne.n	8009408 <__ieee754_pow+0x40>
 80093e4:	1803      	adds	r3, r0, r0
 80093e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80093ea:	4152      	adcs	r2, r2
 80093ec:	4299      	cmp	r1, r3
 80093ee:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <__ieee754_pow+0x230>)
 80093f0:	4193      	sbcs	r3, r2
 80093f2:	f080 84b9 	bcs.w	8009d68 <__ieee754_pow+0x9a0>
 80093f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093fa:	4640      	mov	r0, r8
 80093fc:	4649      	mov	r1, r9
 80093fe:	f7f6 fead 	bl	800015c <__adddf3>
 8009402:	4683      	mov	fp, r0
 8009404:	468c      	mov	ip, r1
 8009406:	e06f      	b.n	80094e8 <__ieee754_pow+0x120>
 8009408:	4b7c      	ldr	r3, [pc, #496]	; (80095fc <__ieee754_pow+0x234>)
 800940a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800940e:	429c      	cmp	r4, r3
 8009410:	464d      	mov	r5, r9
 8009412:	4682      	mov	sl, r0
 8009414:	dc06      	bgt.n	8009424 <__ieee754_pow+0x5c>
 8009416:	d101      	bne.n	800941c <__ieee754_pow+0x54>
 8009418:	2800      	cmp	r0, #0
 800941a:	d1ec      	bne.n	80093f6 <__ieee754_pow+0x2e>
 800941c:	429e      	cmp	r6, r3
 800941e:	dc01      	bgt.n	8009424 <__ieee754_pow+0x5c>
 8009420:	d10f      	bne.n	8009442 <__ieee754_pow+0x7a>
 8009422:	b172      	cbz	r2, 8009442 <__ieee754_pow+0x7a>
 8009424:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009428:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800942c:	ea55 050a 	orrs.w	r5, r5, sl
 8009430:	d1e1      	bne.n	80093f6 <__ieee754_pow+0x2e>
 8009432:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009436:	18db      	adds	r3, r3, r3
 8009438:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800943c:	4152      	adcs	r2, r2
 800943e:	429d      	cmp	r5, r3
 8009440:	e7d5      	b.n	80093ee <__ieee754_pow+0x26>
 8009442:	2d00      	cmp	r5, #0
 8009444:	da39      	bge.n	80094ba <__ieee754_pow+0xf2>
 8009446:	4b6e      	ldr	r3, [pc, #440]	; (8009600 <__ieee754_pow+0x238>)
 8009448:	429e      	cmp	r6, r3
 800944a:	dc52      	bgt.n	80094f2 <__ieee754_pow+0x12a>
 800944c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009450:	429e      	cmp	r6, r3
 8009452:	f340 849c 	ble.w	8009d8e <__ieee754_pow+0x9c6>
 8009456:	1533      	asrs	r3, r6, #20
 8009458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800945c:	2b14      	cmp	r3, #20
 800945e:	dd0f      	ble.n	8009480 <__ieee754_pow+0xb8>
 8009460:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009464:	fa22 f103 	lsr.w	r1, r2, r3
 8009468:	fa01 f303 	lsl.w	r3, r1, r3
 800946c:	4293      	cmp	r3, r2
 800946e:	f040 848e 	bne.w	8009d8e <__ieee754_pow+0x9c6>
 8009472:	f001 0101 	and.w	r1, r1, #1
 8009476:	f1c1 0302 	rsb	r3, r1, #2
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	b182      	cbz	r2, 80094a0 <__ieee754_pow+0xd8>
 800947e:	e05d      	b.n	800953c <__ieee754_pow+0x174>
 8009480:	2a00      	cmp	r2, #0
 8009482:	d159      	bne.n	8009538 <__ieee754_pow+0x170>
 8009484:	f1c3 0314 	rsb	r3, r3, #20
 8009488:	fa46 f103 	asr.w	r1, r6, r3
 800948c:	fa01 f303 	lsl.w	r3, r1, r3
 8009490:	42b3      	cmp	r3, r6
 8009492:	f040 8479 	bne.w	8009d88 <__ieee754_pow+0x9c0>
 8009496:	f001 0101 	and.w	r1, r1, #1
 800949a:	f1c1 0302 	rsb	r3, r1, #2
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4b58      	ldr	r3, [pc, #352]	; (8009604 <__ieee754_pow+0x23c>)
 80094a2:	429e      	cmp	r6, r3
 80094a4:	d132      	bne.n	800950c <__ieee754_pow+0x144>
 80094a6:	2f00      	cmp	r7, #0
 80094a8:	f280 846a 	bge.w	8009d80 <__ieee754_pow+0x9b8>
 80094ac:	4642      	mov	r2, r8
 80094ae:	464b      	mov	r3, r9
 80094b0:	2000      	movs	r0, #0
 80094b2:	4954      	ldr	r1, [pc, #336]	; (8009604 <__ieee754_pow+0x23c>)
 80094b4:	f7f7 f932 	bl	800071c <__aeabi_ddiv>
 80094b8:	e7a3      	b.n	8009402 <__ieee754_pow+0x3a>
 80094ba:	2300      	movs	r3, #0
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2a00      	cmp	r2, #0
 80094c0:	d13c      	bne.n	800953c <__ieee754_pow+0x174>
 80094c2:	4b4e      	ldr	r3, [pc, #312]	; (80095fc <__ieee754_pow+0x234>)
 80094c4:	429e      	cmp	r6, r3
 80094c6:	d1eb      	bne.n	80094a0 <__ieee754_pow+0xd8>
 80094c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80094cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80094d0:	ea53 030a 	orrs.w	r3, r3, sl
 80094d4:	f000 8448 	beq.w	8009d68 <__ieee754_pow+0x9a0>
 80094d8:	4b4b      	ldr	r3, [pc, #300]	; (8009608 <__ieee754_pow+0x240>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	dd0b      	ble.n	80094f6 <__ieee754_pow+0x12e>
 80094de:	2f00      	cmp	r7, #0
 80094e0:	f2c0 8448 	blt.w	8009d74 <__ieee754_pow+0x9ac>
 80094e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80094e8:	4658      	mov	r0, fp
 80094ea:	4661      	mov	r1, ip
 80094ec:	b013      	add	sp, #76	; 0x4c
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	2302      	movs	r3, #2
 80094f4:	e7e2      	b.n	80094bc <__ieee754_pow+0xf4>
 80094f6:	2f00      	cmp	r7, #0
 80094f8:	f04f 0b00 	mov.w	fp, #0
 80094fc:	f04f 0c00 	mov.w	ip, #0
 8009500:	daf2      	bge.n	80094e8 <__ieee754_pow+0x120>
 8009502:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009506:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800950a:	e7ed      	b.n	80094e8 <__ieee754_pow+0x120>
 800950c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009510:	d106      	bne.n	8009520 <__ieee754_pow+0x158>
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f6 ffd5 	bl	80004c8 <__aeabi_dmul>
 800951e:	e770      	b.n	8009402 <__ieee754_pow+0x3a>
 8009520:	4b3a      	ldr	r3, [pc, #232]	; (800960c <__ieee754_pow+0x244>)
 8009522:	429f      	cmp	r7, r3
 8009524:	d10a      	bne.n	800953c <__ieee754_pow+0x174>
 8009526:	2d00      	cmp	r5, #0
 8009528:	db08      	blt.n	800953c <__ieee754_pow+0x174>
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	b013      	add	sp, #76	; 0x4c
 8009530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	f000 bc5e 	b.w	8009df4 <__ieee754_sqrt>
 8009538:	2300      	movs	r3, #0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f000 fd34 	bl	8009fac <fabs>
 8009544:	4683      	mov	fp, r0
 8009546:	468c      	mov	ip, r1
 8009548:	f1ba 0f00 	cmp.w	sl, #0
 800954c:	d128      	bne.n	80095a0 <__ieee754_pow+0x1d8>
 800954e:	b124      	cbz	r4, 800955a <__ieee754_pow+0x192>
 8009550:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <__ieee754_pow+0x23c>)
 8009552:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009556:	429a      	cmp	r2, r3
 8009558:	d122      	bne.n	80095a0 <__ieee754_pow+0x1d8>
 800955a:	2f00      	cmp	r7, #0
 800955c:	da07      	bge.n	800956e <__ieee754_pow+0x1a6>
 800955e:	465a      	mov	r2, fp
 8009560:	4663      	mov	r3, ip
 8009562:	2000      	movs	r0, #0
 8009564:	4927      	ldr	r1, [pc, #156]	; (8009604 <__ieee754_pow+0x23c>)
 8009566:	f7f7 f8d9 	bl	800071c <__aeabi_ddiv>
 800956a:	4683      	mov	fp, r0
 800956c:	468c      	mov	ip, r1
 800956e:	2d00      	cmp	r5, #0
 8009570:	daba      	bge.n	80094e8 <__ieee754_pow+0x120>
 8009572:	9b00      	ldr	r3, [sp, #0]
 8009574:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009578:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800957c:	4323      	orrs	r3, r4
 800957e:	d108      	bne.n	8009592 <__ieee754_pow+0x1ca>
 8009580:	465a      	mov	r2, fp
 8009582:	4663      	mov	r3, ip
 8009584:	4658      	mov	r0, fp
 8009586:	4661      	mov	r1, ip
 8009588:	f7f6 fde6 	bl	8000158 <__aeabi_dsub>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	e790      	b.n	80094b4 <__ieee754_pow+0xec>
 8009592:	9b00      	ldr	r3, [sp, #0]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d1a7      	bne.n	80094e8 <__ieee754_pow+0x120>
 8009598:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800959c:	469c      	mov	ip, r3
 800959e:	e7a3      	b.n	80094e8 <__ieee754_pow+0x120>
 80095a0:	0feb      	lsrs	r3, r5, #31
 80095a2:	3b01      	subs	r3, #1
 80095a4:	930c      	str	r3, [sp, #48]	; 0x30
 80095a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	d104      	bne.n	80095b8 <__ieee754_pow+0x1f0>
 80095ae:	4642      	mov	r2, r8
 80095b0:	464b      	mov	r3, r9
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	e7e7      	b.n	8009588 <__ieee754_pow+0x1c0>
 80095b8:	4b15      	ldr	r3, [pc, #84]	; (8009610 <__ieee754_pow+0x248>)
 80095ba:	429e      	cmp	r6, r3
 80095bc:	f340 80f6 	ble.w	80097ac <__ieee754_pow+0x3e4>
 80095c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80095c4:	429e      	cmp	r6, r3
 80095c6:	4b10      	ldr	r3, [pc, #64]	; (8009608 <__ieee754_pow+0x240>)
 80095c8:	dd09      	ble.n	80095de <__ieee754_pow+0x216>
 80095ca:	429c      	cmp	r4, r3
 80095cc:	dc0c      	bgt.n	80095e8 <__ieee754_pow+0x220>
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	da0c      	bge.n	80095ec <__ieee754_pow+0x224>
 80095d2:	2000      	movs	r0, #0
 80095d4:	b013      	add	sp, #76	; 0x4c
 80095d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095da:	f000 bce2 	b.w	8009fa2 <__math_oflow>
 80095de:	429c      	cmp	r4, r3
 80095e0:	dbf5      	blt.n	80095ce <__ieee754_pow+0x206>
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <__ieee754_pow+0x23c>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	dd15      	ble.n	8009614 <__ieee754_pow+0x24c>
 80095e8:	2f00      	cmp	r7, #0
 80095ea:	dcf2      	bgt.n	80095d2 <__ieee754_pow+0x20a>
 80095ec:	2000      	movs	r0, #0
 80095ee:	b013      	add	sp, #76	; 0x4c
 80095f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	f000 bcd0 	b.w	8009f98 <__math_uflow>
 80095f8:	fff00000 	.word	0xfff00000
 80095fc:	7ff00000 	.word	0x7ff00000
 8009600:	433fffff 	.word	0x433fffff
 8009604:	3ff00000 	.word	0x3ff00000
 8009608:	3fefffff 	.word	0x3fefffff
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	41e00000 	.word	0x41e00000
 8009614:	4661      	mov	r1, ip
 8009616:	2200      	movs	r2, #0
 8009618:	4658      	mov	r0, fp
 800961a:	4b5f      	ldr	r3, [pc, #380]	; (8009798 <__ieee754_pow+0x3d0>)
 800961c:	f7f6 fd9c 	bl	8000158 <__aeabi_dsub>
 8009620:	a355      	add	r3, pc, #340	; (adr r3, 8009778 <__ieee754_pow+0x3b0>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	f7f6 ff4d 	bl	80004c8 <__aeabi_dmul>
 800962e:	a354      	add	r3, pc, #336	; (adr r3, 8009780 <__ieee754_pow+0x3b8>)
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	4606      	mov	r6, r0
 8009636:	460f      	mov	r7, r1
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f6 ff44 	bl	80004c8 <__aeabi_dmul>
 8009640:	2200      	movs	r2, #0
 8009642:	4682      	mov	sl, r0
 8009644:	468b      	mov	fp, r1
 8009646:	4620      	mov	r0, r4
 8009648:	4629      	mov	r1, r5
 800964a:	4b54      	ldr	r3, [pc, #336]	; (800979c <__ieee754_pow+0x3d4>)
 800964c:	f7f6 ff3c 	bl	80004c8 <__aeabi_dmul>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	a14c      	add	r1, pc, #304	; (adr r1, 8009788 <__ieee754_pow+0x3c0>)
 8009656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965a:	f7f6 fd7d 	bl	8000158 <__aeabi_dsub>
 800965e:	4622      	mov	r2, r4
 8009660:	462b      	mov	r3, r5
 8009662:	f7f6 ff31 	bl	80004c8 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	2000      	movs	r0, #0
 800966c:	494c      	ldr	r1, [pc, #304]	; (80097a0 <__ieee754_pow+0x3d8>)
 800966e:	f7f6 fd73 	bl	8000158 <__aeabi_dsub>
 8009672:	4622      	mov	r2, r4
 8009674:	462b      	mov	r3, r5
 8009676:	4680      	mov	r8, r0
 8009678:	4689      	mov	r9, r1
 800967a:	4620      	mov	r0, r4
 800967c:	4629      	mov	r1, r5
 800967e:	f7f6 ff23 	bl	80004c8 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 ff1d 	bl	80004c8 <__aeabi_dmul>
 800968e:	a340      	add	r3, pc, #256	; (adr r3, 8009790 <__ieee754_pow+0x3c8>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 ff18 	bl	80004c8 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4650      	mov	r0, sl
 800969e:	4659      	mov	r1, fp
 80096a0:	f7f6 fd5a 	bl	8000158 <__aeabi_dsub>
 80096a4:	f04f 0a00 	mov.w	sl, #0
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4604      	mov	r4, r0
 80096ae:	460d      	mov	r5, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f6 fd52 	bl	800015c <__adddf3>
 80096b8:	4632      	mov	r2, r6
 80096ba:	463b      	mov	r3, r7
 80096bc:	4650      	mov	r0, sl
 80096be:	468b      	mov	fp, r1
 80096c0:	f7f6 fd4a 	bl	8000158 <__aeabi_dsub>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 fd44 	bl	8000158 <__aeabi_dsub>
 80096d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096d8:	3b01      	subs	r3, #1
 80096da:	4313      	orrs	r3, r2
 80096dc:	f04f 0600 	mov.w	r6, #0
 80096e0:	f04f 0200 	mov.w	r2, #0
 80096e4:	bf0c      	ite	eq
 80096e6:	4b2f      	ldreq	r3, [pc, #188]	; (80097a4 <__ieee754_pow+0x3dc>)
 80096e8:	4b2b      	ldrne	r3, [pc, #172]	; (8009798 <__ieee754_pow+0x3d0>)
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f2:	e9cd 2300 	strd	r2, r3, [sp]
 80096f6:	4632      	mov	r2, r6
 80096f8:	463b      	mov	r3, r7
 80096fa:	f7f6 fd2d 	bl	8000158 <__aeabi_dsub>
 80096fe:	4652      	mov	r2, sl
 8009700:	465b      	mov	r3, fp
 8009702:	f7f6 fee1 	bl	80004c8 <__aeabi_dmul>
 8009706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f7f6 fed9 	bl	80004c8 <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4640      	mov	r0, r8
 800971c:	4649      	mov	r1, r9
 800971e:	f7f6 fd1d 	bl	800015c <__adddf3>
 8009722:	4632      	mov	r2, r6
 8009724:	463b      	mov	r3, r7
 8009726:	4680      	mov	r8, r0
 8009728:	4689      	mov	r9, r1
 800972a:	4650      	mov	r0, sl
 800972c:	4659      	mov	r1, fp
 800972e:	f7f6 fecb 	bl	80004c8 <__aeabi_dmul>
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	460b      	mov	r3, r1
 8009738:	4602      	mov	r2, r0
 800973a:	4649      	mov	r1, r9
 800973c:	4640      	mov	r0, r8
 800973e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009742:	f7f6 fd0b 	bl	800015c <__adddf3>
 8009746:	4b18      	ldr	r3, [pc, #96]	; (80097a8 <__ieee754_pow+0x3e0>)
 8009748:	4682      	mov	sl, r0
 800974a:	4299      	cmp	r1, r3
 800974c:	460f      	mov	r7, r1
 800974e:	460e      	mov	r6, r1
 8009750:	f340 82e5 	ble.w	8009d1e <__ieee754_pow+0x956>
 8009754:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009758:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800975c:	4303      	orrs	r3, r0
 800975e:	f000 81df 	beq.w	8009b20 <__ieee754_pow+0x758>
 8009762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009766:	2200      	movs	r2, #0
 8009768:	2300      	movs	r3, #0
 800976a:	f7f7 f91f 	bl	80009ac <__aeabi_dcmplt>
 800976e:	3800      	subs	r0, #0
 8009770:	bf18      	it	ne
 8009772:	2001      	movne	r0, #1
 8009774:	e72e      	b.n	80095d4 <__ieee754_pow+0x20c>
 8009776:	bf00      	nop
 8009778:	60000000 	.word	0x60000000
 800977c:	3ff71547 	.word	0x3ff71547
 8009780:	f85ddf44 	.word	0xf85ddf44
 8009784:	3e54ae0b 	.word	0x3e54ae0b
 8009788:	55555555 	.word	0x55555555
 800978c:	3fd55555 	.word	0x3fd55555
 8009790:	652b82fe 	.word	0x652b82fe
 8009794:	3ff71547 	.word	0x3ff71547
 8009798:	3ff00000 	.word	0x3ff00000
 800979c:	3fd00000 	.word	0x3fd00000
 80097a0:	3fe00000 	.word	0x3fe00000
 80097a4:	bff00000 	.word	0xbff00000
 80097a8:	408fffff 	.word	0x408fffff
 80097ac:	4bd2      	ldr	r3, [pc, #840]	; (8009af8 <__ieee754_pow+0x730>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	402b      	ands	r3, r5
 80097b2:	b943      	cbnz	r3, 80097c6 <__ieee754_pow+0x3fe>
 80097b4:	4658      	mov	r0, fp
 80097b6:	4661      	mov	r1, ip
 80097b8:	4bd0      	ldr	r3, [pc, #832]	; (8009afc <__ieee754_pow+0x734>)
 80097ba:	f7f6 fe85 	bl	80004c8 <__aeabi_dmul>
 80097be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80097c2:	4683      	mov	fp, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	1523      	asrs	r3, r4, #20
 80097c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097cc:	4413      	add	r3, r2
 80097ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d0:	4bcb      	ldr	r3, [pc, #812]	; (8009b00 <__ieee754_pow+0x738>)
 80097d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80097da:	429c      	cmp	r4, r3
 80097dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097e0:	dd08      	ble.n	80097f4 <__ieee754_pow+0x42c>
 80097e2:	4bc8      	ldr	r3, [pc, #800]	; (8009b04 <__ieee754_pow+0x73c>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	f340 8199 	ble.w	8009b1c <__ieee754_pow+0x754>
 80097ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80097f0:	3301      	adds	r3, #1
 80097f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f4:	2600      	movs	r6, #0
 80097f6:	00f3      	lsls	r3, r6, #3
 80097f8:	930d      	str	r3, [sp, #52]	; 0x34
 80097fa:	4bc3      	ldr	r3, [pc, #780]	; (8009b08 <__ieee754_pow+0x740>)
 80097fc:	4658      	mov	r0, fp
 80097fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009802:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009806:	4629      	mov	r1, r5
 8009808:	461a      	mov	r2, r3
 800980a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800980e:	4623      	mov	r3, r4
 8009810:	f7f6 fca2 	bl	8000158 <__aeabi_dsub>
 8009814:	46da      	mov	sl, fp
 8009816:	462b      	mov	r3, r5
 8009818:	4652      	mov	r2, sl
 800981a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800981e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009822:	f7f6 fc9b 	bl	800015c <__adddf3>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	2000      	movs	r0, #0
 800982c:	49b7      	ldr	r1, [pc, #732]	; (8009b0c <__ieee754_pow+0x744>)
 800982e:	f7f6 ff75 	bl	800071c <__aeabi_ddiv>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800983a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800983e:	f7f6 fe43 	bl	80004c8 <__aeabi_dmul>
 8009842:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009846:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800984a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	46ab      	mov	fp, r5
 8009854:	106d      	asrs	r5, r5, #1
 8009856:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009860:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009864:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	4614      	mov	r4, r2
 800986e:	461d      	mov	r5, r3
 8009870:	f7f6 fe2a 	bl	80004c8 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800987c:	f7f6 fc6c 	bl	8000158 <__aeabi_dsub>
 8009880:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009884:	4606      	mov	r6, r0
 8009886:	460f      	mov	r7, r1
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 fc64 	bl	8000158 <__aeabi_dsub>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	4650      	mov	r0, sl
 8009896:	4659      	mov	r1, fp
 8009898:	f7f6 fc5e 	bl	8000158 <__aeabi_dsub>
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	f7f6 fe12 	bl	80004c8 <__aeabi_dmul>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f6 fc54 	bl	8000158 <__aeabi_dsub>
 80098b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098b4:	f7f6 fe08 	bl	80004c8 <__aeabi_dmul>
 80098b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	f7f6 fe00 	bl	80004c8 <__aeabi_dmul>
 80098c8:	a379      	add	r3, pc, #484	; (adr r3, 8009ab0 <__ieee754_pow+0x6e8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	f7f6 fdf9 	bl	80004c8 <__aeabi_dmul>
 80098d6:	a378      	add	r3, pc, #480	; (adr r3, 8009ab8 <__ieee754_pow+0x6f0>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 fc3e 	bl	800015c <__adddf3>
 80098e0:	4622      	mov	r2, r4
 80098e2:	462b      	mov	r3, r5
 80098e4:	f7f6 fdf0 	bl	80004c8 <__aeabi_dmul>
 80098e8:	a375      	add	r3, pc, #468	; (adr r3, 8009ac0 <__ieee754_pow+0x6f8>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fc35 	bl	800015c <__adddf3>
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	f7f6 fde7 	bl	80004c8 <__aeabi_dmul>
 80098fa:	a373      	add	r3, pc, #460	; (adr r3, 8009ac8 <__ieee754_pow+0x700>)
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fc2c 	bl	800015c <__adddf3>
 8009904:	4622      	mov	r2, r4
 8009906:	462b      	mov	r3, r5
 8009908:	f7f6 fdde 	bl	80004c8 <__aeabi_dmul>
 800990c:	a370      	add	r3, pc, #448	; (adr r3, 8009ad0 <__ieee754_pow+0x708>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fc23 	bl	800015c <__adddf3>
 8009916:	4622      	mov	r2, r4
 8009918:	462b      	mov	r3, r5
 800991a:	f7f6 fdd5 	bl	80004c8 <__aeabi_dmul>
 800991e:	a36e      	add	r3, pc, #440	; (adr r3, 8009ad8 <__ieee754_pow+0x710>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7f6 fc1a 	bl	800015c <__adddf3>
 8009928:	4622      	mov	r2, r4
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	462b      	mov	r3, r5
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7f6 fdc8 	bl	80004c8 <__aeabi_dmul>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f6 fdc2 	bl	80004c8 <__aeabi_dmul>
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800994c:	4642      	mov	r2, r8
 800994e:	464b      	mov	r3, r9
 8009950:	f7f6 fc04 	bl	800015c <__adddf3>
 8009954:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009958:	f7f6 fdb6 	bl	80004c8 <__aeabi_dmul>
 800995c:	4622      	mov	r2, r4
 800995e:	462b      	mov	r3, r5
 8009960:	f7f6 fbfc 	bl	800015c <__adddf3>
 8009964:	4642      	mov	r2, r8
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	464b      	mov	r3, r9
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f6 fdaa 	bl	80004c8 <__aeabi_dmul>
 8009974:	2200      	movs	r2, #0
 8009976:	4b66      	ldr	r3, [pc, #408]	; (8009b10 <__ieee754_pow+0x748>)
 8009978:	4682      	mov	sl, r0
 800997a:	468b      	mov	fp, r1
 800997c:	f7f6 fbee 	bl	800015c <__adddf3>
 8009980:	4632      	mov	r2, r6
 8009982:	463b      	mov	r3, r7
 8009984:	f7f6 fbea 	bl	800015c <__adddf3>
 8009988:	2400      	movs	r4, #0
 800998a:	460d      	mov	r5, r1
 800998c:	4622      	mov	r2, r4
 800998e:	460b      	mov	r3, r1
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f6 fd98 	bl	80004c8 <__aeabi_dmul>
 8009998:	2200      	movs	r2, #0
 800999a:	4680      	mov	r8, r0
 800999c:	4689      	mov	r9, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	4b5b      	ldr	r3, [pc, #364]	; (8009b10 <__ieee754_pow+0x748>)
 80099a4:	f7f6 fbd8 	bl	8000158 <__aeabi_dsub>
 80099a8:	4652      	mov	r2, sl
 80099aa:	465b      	mov	r3, fp
 80099ac:	f7f6 fbd4 	bl	8000158 <__aeabi_dsub>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f6 fbce 	bl	8000158 <__aeabi_dsub>
 80099bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099c0:	f7f6 fd82 	bl	80004c8 <__aeabi_dmul>
 80099c4:	4622      	mov	r2, r4
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099ce:	462b      	mov	r3, r5
 80099d0:	f7f6 fd7a 	bl	80004c8 <__aeabi_dmul>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fbbe 	bl	800015c <__adddf3>
 80099e0:	2400      	movs	r4, #0
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	f7f6 fbb5 	bl	800015c <__adddf3>
 80099f2:	a33b      	add	r3, pc, #236	; (adr r3, 8009ae0 <__ieee754_pow+0x718>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4620      	mov	r0, r4
 80099fa:	460d      	mov	r5, r1
 80099fc:	f7f6 fd64 	bl	80004c8 <__aeabi_dmul>
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7f6 fba4 	bl	8000158 <__aeabi_dsub>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f6 fb9e 	bl	8000158 <__aeabi_dsub>
 8009a1c:	a332      	add	r3, pc, #200	; (adr r3, 8009ae8 <__ieee754_pow+0x720>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fd51 	bl	80004c8 <__aeabi_dmul>
 8009a26:	a332      	add	r3, pc, #200	; (adr r3, 8009af0 <__ieee754_pow+0x728>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	460f      	mov	r7, r1
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	f7f6 fd48 	bl	80004c8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 fb8c 	bl	800015c <__adddf3>
 8009a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a46:	4b33      	ldr	r3, [pc, #204]	; (8009b14 <__ieee754_pow+0x74c>)
 8009a48:	f04f 0a00 	mov.w	sl, #0
 8009a4c:	4413      	add	r3, r2
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fb83 	bl	800015c <__adddf3>
 8009a56:	4680      	mov	r8, r0
 8009a58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a5a:	4689      	mov	r9, r1
 8009a5c:	f7f6 fcca 	bl	80003f4 <__aeabi_i2d>
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a66:	4b2c      	ldr	r3, [pc, #176]	; (8009b18 <__ieee754_pow+0x750>)
 8009a68:	4413      	add	r3, r2
 8009a6a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a6e:	4642      	mov	r2, r8
 8009a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a74:	464b      	mov	r3, r9
 8009a76:	f7f6 fb71 	bl	800015c <__adddf3>
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	f7f6 fb6d 	bl	800015c <__adddf3>
 8009a82:	4622      	mov	r2, r4
 8009a84:	462b      	mov	r3, r5
 8009a86:	f7f6 fb69 	bl	800015c <__adddf3>
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	4650      	mov	r0, sl
 8009a90:	468b      	mov	fp, r1
 8009a92:	f7f6 fb61 	bl	8000158 <__aeabi_dsub>
 8009a96:	4632      	mov	r2, r6
 8009a98:	463b      	mov	r3, r7
 8009a9a:	f7f6 fb5d 	bl	8000158 <__aeabi_dsub>
 8009a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aa2:	f7f6 fb59 	bl	8000158 <__aeabi_dsub>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	e60d      	b.n	80096cc <__ieee754_pow+0x304>
 8009ab0:	4a454eef 	.word	0x4a454eef
 8009ab4:	3fca7e28 	.word	0x3fca7e28
 8009ab8:	93c9db65 	.word	0x93c9db65
 8009abc:	3fcd864a 	.word	0x3fcd864a
 8009ac0:	a91d4101 	.word	0xa91d4101
 8009ac4:	3fd17460 	.word	0x3fd17460
 8009ac8:	518f264d 	.word	0x518f264d
 8009acc:	3fd55555 	.word	0x3fd55555
 8009ad0:	db6fabff 	.word	0xdb6fabff
 8009ad4:	3fdb6db6 	.word	0x3fdb6db6
 8009ad8:	33333303 	.word	0x33333303
 8009adc:	3fe33333 	.word	0x3fe33333
 8009ae0:	e0000000 	.word	0xe0000000
 8009ae4:	3feec709 	.word	0x3feec709
 8009ae8:	dc3a03fd 	.word	0xdc3a03fd
 8009aec:	3feec709 	.word	0x3feec709
 8009af0:	145b01f5 	.word	0x145b01f5
 8009af4:	be3e2fe0 	.word	0xbe3e2fe0
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	43400000 	.word	0x43400000
 8009b00:	0003988e 	.word	0x0003988e
 8009b04:	000bb679 	.word	0x000bb679
 8009b08:	0800a100 	.word	0x0800a100
 8009b0c:	3ff00000 	.word	0x3ff00000
 8009b10:	40080000 	.word	0x40080000
 8009b14:	0800a120 	.word	0x0800a120
 8009b18:	0800a110 	.word	0x0800a110
 8009b1c:	2601      	movs	r6, #1
 8009b1e:	e66a      	b.n	80097f6 <__ieee754_pow+0x42e>
 8009b20:	a39d      	add	r3, pc, #628	; (adr r3, 8009d98 <__ieee754_pow+0x9d0>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	4640      	mov	r0, r8
 8009b28:	4649      	mov	r1, r9
 8009b2a:	f7f6 fb17 	bl	800015c <__adddf3>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b34:	462b      	mov	r3, r5
 8009b36:	4650      	mov	r0, sl
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fb0d 	bl	8000158 <__aeabi_dsub>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b46:	f7f6 ff4f 	bl	80009e8 <__aeabi_dcmpgt>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f47f ae09 	bne.w	8009762 <__ieee754_pow+0x39a>
 8009b50:	4aa3      	ldr	r2, [pc, #652]	; (8009de0 <__ieee754_pow+0xa18>)
 8009b52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009b56:	4293      	cmp	r3, r2
 8009b58:	f340 8101 	ble.w	8009d5e <__ieee754_pow+0x996>
 8009b5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b60:	2000      	movs	r0, #0
 8009b62:	151b      	asrs	r3, r3, #20
 8009b64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b68:	fa4a f303 	asr.w	r3, sl, r3
 8009b6c:	4433      	add	r3, r6
 8009b6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009b72:	4f9c      	ldr	r7, [pc, #624]	; (8009de4 <__ieee754_pow+0xa1c>)
 8009b74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b78:	4117      	asrs	r7, r2
 8009b7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009b7e:	ea23 0107 	bic.w	r1, r3, r7
 8009b82:	f1c2 0214 	rsb	r2, r2, #20
 8009b86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	fa4a fa02 	asr.w	sl, sl, r2
 8009b90:	2e00      	cmp	r6, #0
 8009b92:	4602      	mov	r2, r0
 8009b94:	4629      	mov	r1, r5
 8009b96:	4620      	mov	r0, r4
 8009b98:	bfb8      	it	lt
 8009b9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b9e:	f7f6 fadb 	bl	8000158 <__aeabi_dsub>
 8009ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009baa:	2400      	movs	r4, #0
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	f7f6 fad4 	bl	800015c <__adddf3>
 8009bb4:	a37a      	add	r3, pc, #488	; (adr r3, 8009da0 <__ieee754_pow+0x9d8>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	f7f6 fc83 	bl	80004c8 <__aeabi_dmul>
 8009bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fac3 	bl	8000158 <__aeabi_dsub>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fabd 	bl	8000158 <__aeabi_dsub>
 8009bde:	a372      	add	r3, pc, #456	; (adr r3, 8009da8 <__ieee754_pow+0x9e0>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fc70 	bl	80004c8 <__aeabi_dmul>
 8009be8:	a371      	add	r3, pc, #452	; (adr r3, 8009db0 <__ieee754_pow+0x9e8>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	4680      	mov	r8, r0
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7f6 fc67 	bl	80004c8 <__aeabi_dmul>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 faab 	bl	800015c <__adddf3>
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 faa3 	bl	800015c <__adddf3>
 8009c16:	4632      	mov	r2, r6
 8009c18:	463b      	mov	r3, r7
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	4689      	mov	r9, r1
 8009c1e:	f7f6 fa9b 	bl	8000158 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4620      	mov	r0, r4
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fa95 	bl	8000158 <__aeabi_dsub>
 8009c2e:	4642      	mov	r2, r8
 8009c30:	4606      	mov	r6, r0
 8009c32:	460f      	mov	r7, r1
 8009c34:	464b      	mov	r3, r9
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 fc45 	bl	80004c8 <__aeabi_dmul>
 8009c3e:	a35e      	add	r3, pc, #376	; (adr r3, 8009db8 <__ieee754_pow+0x9f0>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4604      	mov	r4, r0
 8009c46:	460d      	mov	r5, r1
 8009c48:	f7f6 fc3e 	bl	80004c8 <__aeabi_dmul>
 8009c4c:	a35c      	add	r3, pc, #368	; (adr r3, 8009dc0 <__ieee754_pow+0x9f8>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	f7f6 fa81 	bl	8000158 <__aeabi_dsub>
 8009c56:	4622      	mov	r2, r4
 8009c58:	462b      	mov	r3, r5
 8009c5a:	f7f6 fc35 	bl	80004c8 <__aeabi_dmul>
 8009c5e:	a35a      	add	r3, pc, #360	; (adr r3, 8009dc8 <__ieee754_pow+0xa00>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f7f6 fa7a 	bl	800015c <__adddf3>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	f7f6 fc2c 	bl	80004c8 <__aeabi_dmul>
 8009c70:	a357      	add	r3, pc, #348	; (adr r3, 8009dd0 <__ieee754_pow+0xa08>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fa6f 	bl	8000158 <__aeabi_dsub>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	f7f6 fc23 	bl	80004c8 <__aeabi_dmul>
 8009c82:	a355      	add	r3, pc, #340	; (adr r3, 8009dd8 <__ieee754_pow+0xa10>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fa68 	bl	800015c <__adddf3>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f7f6 fc1a 	bl	80004c8 <__aeabi_dmul>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 fa5c 	bl	8000158 <__aeabi_dsub>
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4640      	mov	r0, r8
 8009caa:	4649      	mov	r1, r9
 8009cac:	f7f6 fc0c 	bl	80004c8 <__aeabi_dmul>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cba:	4620      	mov	r0, r4
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	f7f6 fa4b 	bl	8000158 <__aeabi_dsub>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cca:	f7f6 fd27 	bl	800071c <__aeabi_ddiv>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fbf5 	bl	80004c8 <__aeabi_dmul>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fa3b 	bl	800015c <__adddf3>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4620      	mov	r0, r4
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7f6 fa33 	bl	8000158 <__aeabi_dsub>
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	f7f6 fa2f 	bl	8000158 <__aeabi_dsub>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4939      	ldr	r1, [pc, #228]	; (8009de8 <__ieee754_pow+0xa20>)
 8009d02:	f7f6 fa29 	bl	8000158 <__aeabi_dsub>
 8009d06:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009d0a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009d0e:	da29      	bge.n	8009d64 <__ieee754_pow+0x99c>
 8009d10:	4652      	mov	r2, sl
 8009d12:	f000 f955 	bl	8009fc0 <scalbn>
 8009d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d1a:	f7ff bbfe 	b.w	800951a <__ieee754_pow+0x152>
 8009d1e:	4b33      	ldr	r3, [pc, #204]	; (8009dec <__ieee754_pow+0xa24>)
 8009d20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009d24:	429f      	cmp	r7, r3
 8009d26:	f77f af13 	ble.w	8009b50 <__ieee754_pow+0x788>
 8009d2a:	4b31      	ldr	r3, [pc, #196]	; (8009df0 <__ieee754_pow+0xa28>)
 8009d2c:	440b      	add	r3, r1
 8009d2e:	4303      	orrs	r3, r0
 8009d30:	d009      	beq.n	8009d46 <__ieee754_pow+0x97e>
 8009d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f7f6 fe37 	bl	80009ac <__aeabi_dcmplt>
 8009d3e:	3800      	subs	r0, #0
 8009d40:	bf18      	it	ne
 8009d42:	2001      	movne	r0, #1
 8009d44:	e453      	b.n	80095ee <__ieee754_pow+0x226>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fa05 	bl	8000158 <__aeabi_dsub>
 8009d4e:	4642      	mov	r2, r8
 8009d50:	464b      	mov	r3, r9
 8009d52:	f7f6 fe3f 	bl	80009d4 <__aeabi_dcmpge>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f aefa 	beq.w	8009b50 <__ieee754_pow+0x788>
 8009d5c:	e7e9      	b.n	8009d32 <__ieee754_pow+0x96a>
 8009d5e:	f04f 0a00 	mov.w	sl, #0
 8009d62:	e720      	b.n	8009ba6 <__ieee754_pow+0x7de>
 8009d64:	4621      	mov	r1, r4
 8009d66:	e7d6      	b.n	8009d16 <__ieee754_pow+0x94e>
 8009d68:	f04f 0b00 	mov.w	fp, #0
 8009d6c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009de8 <__ieee754_pow+0xa20>
 8009d70:	f7ff bbba 	b.w	80094e8 <__ieee754_pow+0x120>
 8009d74:	f04f 0b00 	mov.w	fp, #0
 8009d78:	f04f 0c00 	mov.w	ip, #0
 8009d7c:	f7ff bbb4 	b.w	80094e8 <__ieee754_pow+0x120>
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7ff bb3d 	b.w	8009402 <__ieee754_pow+0x3a>
 8009d88:	9200      	str	r2, [sp, #0]
 8009d8a:	f7ff bb89 	b.w	80094a0 <__ieee754_pow+0xd8>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f7ff bb73 	b.w	800947a <__ieee754_pow+0xb2>
 8009d94:	f3af 8000 	nop.w
 8009d98:	652b82fe 	.word	0x652b82fe
 8009d9c:	3c971547 	.word	0x3c971547
 8009da0:	00000000 	.word	0x00000000
 8009da4:	3fe62e43 	.word	0x3fe62e43
 8009da8:	fefa39ef 	.word	0xfefa39ef
 8009dac:	3fe62e42 	.word	0x3fe62e42
 8009db0:	0ca86c39 	.word	0x0ca86c39
 8009db4:	be205c61 	.word	0xbe205c61
 8009db8:	72bea4d0 	.word	0x72bea4d0
 8009dbc:	3e663769 	.word	0x3e663769
 8009dc0:	c5d26bf1 	.word	0xc5d26bf1
 8009dc4:	3ebbbd41 	.word	0x3ebbbd41
 8009dc8:	af25de2c 	.word	0xaf25de2c
 8009dcc:	3f11566a 	.word	0x3f11566a
 8009dd0:	16bebd93 	.word	0x16bebd93
 8009dd4:	3f66c16c 	.word	0x3f66c16c
 8009dd8:	5555553e 	.word	0x5555553e
 8009ddc:	3fc55555 	.word	0x3fc55555
 8009de0:	3fe00000 	.word	0x3fe00000
 8009de4:	000fffff 	.word	0x000fffff
 8009de8:	3ff00000 	.word	0x3ff00000
 8009dec:	4090cbff 	.word	0x4090cbff
 8009df0:	3f6f3400 	.word	0x3f6f3400

08009df4 <__ieee754_sqrt>:
 8009df4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009f50 <__ieee754_sqrt+0x15c>
 8009df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfc:	ea3c 0c01 	bics.w	ip, ip, r1
 8009e00:	4606      	mov	r6, r0
 8009e02:	460d      	mov	r5, r1
 8009e04:	460c      	mov	r4, r1
 8009e06:	460a      	mov	r2, r1
 8009e08:	4607      	mov	r7, r0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	d10f      	bne.n	8009e2e <__ieee754_sqrt+0x3a>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	f7f6 fb59 	bl	80004c8 <__aeabi_dmul>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 f99d 	bl	800015c <__adddf3>
 8009e22:	4606      	mov	r6, r0
 8009e24:	460d      	mov	r5, r1
 8009e26:	4630      	mov	r0, r6
 8009e28:	4629      	mov	r1, r5
 8009e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2e:	2900      	cmp	r1, #0
 8009e30:	dc0e      	bgt.n	8009e50 <__ieee754_sqrt+0x5c>
 8009e32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009e36:	ea5c 0707 	orrs.w	r7, ip, r7
 8009e3a:	d0f4      	beq.n	8009e26 <__ieee754_sqrt+0x32>
 8009e3c:	b141      	cbz	r1, 8009e50 <__ieee754_sqrt+0x5c>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	f7f6 f989 	bl	8000158 <__aeabi_dsub>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	f7f6 fc67 	bl	800071c <__aeabi_ddiv>
 8009e4e:	e7e8      	b.n	8009e22 <__ieee754_sqrt+0x2e>
 8009e50:	1521      	asrs	r1, r4, #20
 8009e52:	d075      	beq.n	8009f40 <__ieee754_sqrt+0x14c>
 8009e54:	07cc      	lsls	r4, r1, #31
 8009e56:	f04f 0400 	mov.w	r4, #0
 8009e5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009e5e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009e62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e66:	bf5e      	ittt	pl
 8009e68:	0fd9      	lsrpl	r1, r3, #31
 8009e6a:	005b      	lslpl	r3, r3, #1
 8009e6c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009e70:	0fd9      	lsrs	r1, r3, #31
 8009e72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009e76:	2516      	movs	r5, #22
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e7e:	107f      	asrs	r7, r7, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	1846      	adds	r6, r0, r1
 8009e84:	4296      	cmp	r6, r2
 8009e86:	bfde      	ittt	le
 8009e88:	1b92      	suble	r2, r2, r6
 8009e8a:	1870      	addle	r0, r6, r1
 8009e8c:	1864      	addle	r4, r4, r1
 8009e8e:	0052      	lsls	r2, r2, #1
 8009e90:	3d01      	subs	r5, #1
 8009e92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e9e:	d1f0      	bne.n	8009e82 <__ieee754_sqrt+0x8e>
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f04f 0e20 	mov.w	lr, #32
 8009ea6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009eaa:	4282      	cmp	r2, r0
 8009eac:	eb06 0c05 	add.w	ip, r6, r5
 8009eb0:	dc02      	bgt.n	8009eb8 <__ieee754_sqrt+0xc4>
 8009eb2:	d113      	bne.n	8009edc <__ieee754_sqrt+0xe8>
 8009eb4:	459c      	cmp	ip, r3
 8009eb6:	d811      	bhi.n	8009edc <__ieee754_sqrt+0xe8>
 8009eb8:	f1bc 0f00 	cmp.w	ip, #0
 8009ebc:	eb0c 0506 	add.w	r5, ip, r6
 8009ec0:	da43      	bge.n	8009f4a <__ieee754_sqrt+0x156>
 8009ec2:	2d00      	cmp	r5, #0
 8009ec4:	db41      	blt.n	8009f4a <__ieee754_sqrt+0x156>
 8009ec6:	f100 0801 	add.w	r8, r0, #1
 8009eca:	1a12      	subs	r2, r2, r0
 8009ecc:	4640      	mov	r0, r8
 8009ece:	459c      	cmp	ip, r3
 8009ed0:	bf88      	it	hi
 8009ed2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009ed6:	eba3 030c 	sub.w	r3, r3, ip
 8009eda:	4431      	add	r1, r6
 8009edc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009ee0:	f1be 0e01 	subs.w	lr, lr, #1
 8009ee4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009ee8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009eec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ef0:	d1db      	bne.n	8009eaa <__ieee754_sqrt+0xb6>
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	d006      	beq.n	8009f04 <__ieee754_sqrt+0x110>
 8009ef6:	1c48      	adds	r0, r1, #1
 8009ef8:	bf0b      	itete	eq
 8009efa:	4671      	moveq	r1, lr
 8009efc:	3101      	addne	r1, #1
 8009efe:	3401      	addeq	r4, #1
 8009f00:	f021 0101 	bicne.w	r1, r1, #1
 8009f04:	1063      	asrs	r3, r4, #1
 8009f06:	0849      	lsrs	r1, r1, #1
 8009f08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f0c:	07e2      	lsls	r2, r4, #31
 8009f0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f12:	bf48      	it	mi
 8009f14:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009f18:	460e      	mov	r6, r1
 8009f1a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009f1e:	e782      	b.n	8009e26 <__ieee754_sqrt+0x32>
 8009f20:	0ada      	lsrs	r2, r3, #11
 8009f22:	3815      	subs	r0, #21
 8009f24:	055b      	lsls	r3, r3, #21
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d0fa      	beq.n	8009f20 <__ieee754_sqrt+0x12c>
 8009f2a:	02d5      	lsls	r5, r2, #11
 8009f2c:	d50a      	bpl.n	8009f44 <__ieee754_sqrt+0x150>
 8009f2e:	f1c1 0420 	rsb	r4, r1, #32
 8009f32:	fa23 f404 	lsr.w	r4, r3, r4
 8009f36:	1e4d      	subs	r5, r1, #1
 8009f38:	408b      	lsls	r3, r1
 8009f3a:	4322      	orrs	r2, r4
 8009f3c:	1b41      	subs	r1, r0, r5
 8009f3e:	e789      	b.n	8009e54 <__ieee754_sqrt+0x60>
 8009f40:	4608      	mov	r0, r1
 8009f42:	e7f0      	b.n	8009f26 <__ieee754_sqrt+0x132>
 8009f44:	0052      	lsls	r2, r2, #1
 8009f46:	3101      	adds	r1, #1
 8009f48:	e7ef      	b.n	8009f2a <__ieee754_sqrt+0x136>
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	e7bd      	b.n	8009eca <__ieee754_sqrt+0xd6>
 8009f4e:	bf00      	nop
 8009f50:	7ff00000 	.word	0x7ff00000

08009f54 <with_errno>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	4604      	mov	r4, r0
 8009f58:	460d      	mov	r5, r1
 8009f5a:	4616      	mov	r6, r2
 8009f5c:	f7ff f88e 	bl	800907c <__errno>
 8009f60:	4629      	mov	r1, r5
 8009f62:	6006      	str	r6, [r0, #0]
 8009f64:	4620      	mov	r0, r4
 8009f66:	bd70      	pop	{r4, r5, r6, pc}

08009f68 <xflow>:
 8009f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6a:	4615      	mov	r5, r2
 8009f6c:	461c      	mov	r4, r3
 8009f6e:	b180      	cbz	r0, 8009f92 <xflow+0x2a>
 8009f70:	4610      	mov	r0, r2
 8009f72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f76:	e9cd 0100 	strd	r0, r1, [sp]
 8009f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f7e:	4628      	mov	r0, r5
 8009f80:	4621      	mov	r1, r4
 8009f82:	f7f6 faa1 	bl	80004c8 <__aeabi_dmul>
 8009f86:	2222      	movs	r2, #34	; 0x22
 8009f88:	b003      	add	sp, #12
 8009f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f8e:	f7ff bfe1 	b.w	8009f54 <with_errno>
 8009f92:	4610      	mov	r0, r2
 8009f94:	4619      	mov	r1, r3
 8009f96:	e7ee      	b.n	8009f76 <xflow+0xe>

08009f98 <__math_uflow>:
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f9e:	f7ff bfe3 	b.w	8009f68 <xflow>

08009fa2 <__math_oflow>:
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009fa8:	f7ff bfde 	b.w	8009f68 <xflow>

08009fac <fabs>:
 8009fac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009fb0:	4770      	bx	lr

08009fb2 <finite>:
 8009fb2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009fb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009fba:	0fc0      	lsrs	r0, r0, #31
 8009fbc:	4770      	bx	lr
	...

08009fc0 <scalbn>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	4617      	mov	r7, r2
 8009fcc:	460b      	mov	r3, r1
 8009fce:	b996      	cbnz	r6, 8009ff6 <scalbn+0x36>
 8009fd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fd4:	4303      	orrs	r3, r0
 8009fd6:	d039      	beq.n	800a04c <scalbn+0x8c>
 8009fd8:	4b33      	ldr	r3, [pc, #204]	; (800a0a8 <scalbn+0xe8>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f7f6 fa74 	bl	80004c8 <__aeabi_dmul>
 8009fe0:	4b32      	ldr	r3, [pc, #200]	; (800a0ac <scalbn+0xec>)
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	429f      	cmp	r7, r3
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	da0f      	bge.n	800a00a <scalbn+0x4a>
 8009fea:	a32b      	add	r3, pc, #172	; (adr r3, 800a098 <scalbn+0xd8>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f7f6 fa6a 	bl	80004c8 <__aeabi_dmul>
 8009ff4:	e006      	b.n	800a004 <scalbn+0x44>
 8009ff6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009ffa:	4296      	cmp	r6, r2
 8009ffc:	d10a      	bne.n	800a014 <scalbn+0x54>
 8009ffe:	4602      	mov	r2, r0
 800a000:	f7f6 f8ac 	bl	800015c <__adddf3>
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	e020      	b.n	800a04c <scalbn+0x8c>
 800a00a:	460b      	mov	r3, r1
 800a00c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a010:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a014:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a018:	19b9      	adds	r1, r7, r6
 800a01a:	4291      	cmp	r1, r2
 800a01c:	dd0e      	ble.n	800a03c <scalbn+0x7c>
 800a01e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a022:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a026:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a02a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a02e:	4820      	ldr	r0, [pc, #128]	; (800a0b0 <scalbn+0xf0>)
 800a030:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a034:	a31a      	add	r3, pc, #104	; (adr r3, 800a0a0 <scalbn+0xe0>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	e7d9      	b.n	8009ff0 <scalbn+0x30>
 800a03c:	2900      	cmp	r1, #0
 800a03e:	dd08      	ble.n	800a052 <scalbn+0x92>
 800a040:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a048:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a052:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a056:	da12      	bge.n	800a07e <scalbn+0xbe>
 800a058:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a05c:	429f      	cmp	r7, r3
 800a05e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a062:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a066:	dcdc      	bgt.n	800a022 <scalbn+0x62>
 800a068:	a30b      	add	r3, pc, #44	; (adr r3, 800a098 <scalbn+0xd8>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a072:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a076:	480f      	ldr	r0, [pc, #60]	; (800a0b4 <scalbn+0xf4>)
 800a078:	f041 011f 	orr.w	r1, r1, #31
 800a07c:	e7b8      	b.n	8009ff0 <scalbn+0x30>
 800a07e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a082:	3136      	adds	r1, #54	; 0x36
 800a084:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a088:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	2200      	movs	r2, #0
 800a092:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <scalbn+0xf8>)
 800a094:	e7ac      	b.n	8009ff0 <scalbn+0x30>
 800a096:	bf00      	nop
 800a098:	c2f8f359 	.word	0xc2f8f359
 800a09c:	01a56e1f 	.word	0x01a56e1f
 800a0a0:	8800759c 	.word	0x8800759c
 800a0a4:	7e37e43c 	.word	0x7e37e43c
 800a0a8:	43500000 	.word	0x43500000
 800a0ac:	ffff3cb0 	.word	0xffff3cb0
 800a0b0:	8800759c 	.word	0x8800759c
 800a0b4:	c2f8f359 	.word	0xc2f8f359
 800a0b8:	3c900000 	.word	0x3c900000

0800a0bc <_init>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <_fini>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr
